!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ArrayPromote	hw5/cml/et/array_promotions.h	/^struct ArrayPromote$/;"	s	namespace:cml::et
AxisOrder	hw5/cml/mathlib/helper.h	/^enum AxisOrder {$/;"	g	namespace:cml
AxisOrder2D	hw5/cml/mathlib/helper.h	/^enum AxisOrder2D {$/;"	g	namespace:cml
BACKGND_COLOR	hw5/common.h	/^const vector3 BACKGND_COLOR = vector3(0.0, 0.0, 0.0);$/;"	v
BinaryMatrixOp	hw5/cml/matrix/matrix_expr.h	/^    BinaryMatrixOp(const expr_type& e)$/;"	f	class:cml::et::BinaryMatrixOp
BinaryMatrixOp	hw5/cml/matrix/matrix_expr.h	/^    explicit BinaryMatrixOp(left_reference left, right_reference right)$/;"	f	class:cml::et::BinaryMatrixOp
BinaryMatrixOp	hw5/cml/matrix/matrix_expr.h	/^class BinaryMatrixOp$/;"	c	namespace:cml::et
BinaryQuaternionOp	hw5/cml/quaternion/quaternion_expr.h	/^    BinaryQuaternionOp(const expr_type& e)$/;"	f	class:cml::et::BinaryQuaternionOp
BinaryQuaternionOp	hw5/cml/quaternion/quaternion_expr.h	/^    explicit BinaryQuaternionOp(left_reference left, right_reference right)$/;"	f	class:cml::et::BinaryQuaternionOp
BinaryQuaternionOp	hw5/cml/quaternion/quaternion_expr.h	/^class BinaryQuaternionOp$/;"	c	namespace:cml::et
BinaryVectorOp	hw5/cml/vector/vector_expr.h	/^    BinaryVectorOp(const expr_type& e)$/;"	f	class:cml::et::BinaryVectorOp
BinaryVectorOp	hw5/cml/vector/vector_expr.h	/^    explicit BinaryVectorOp(left_reference left, right_reference right)$/;"	f	class:cml::et::BinaryVectorOp
BinaryVectorOp	hw5/cml/vector/vector_expr.h	/^class BinaryVectorOp$/;"	c	namespace:cml::et
CML_ACCUMULATED_MATRIX_MULT	hw5/cml/matrix/class_ops.h	/^#define CML_ACCUMULATED_MATRIX_MULT(/;"	d
CML_ALWAYS_PROMOTE_TO_DEFAULT_LAYOUT	hw5/cml/defaults.h	/^#define CML_ALWAYS_PROMOTE_TO_DEFAULT_LAYOUT$/;"	d
CML_ASSIGN_MAT_22	hw5/cml/matrix/class_ops.h	/^#define CML_ASSIGN_MAT_22 /;"	d
CML_ASSIGN_MAT_33	hw5/cml/matrix/class_ops.h	/^#define CML_ASSIGN_MAT_33 /;"	d
CML_ASSIGN_MAT_44	hw5/cml/matrix/class_ops.h	/^#define CML_ASSIGN_MAT_44 /;"	d
CML_ASSIGN_VEC_2	hw5/cml/vector/class_ops.h	/^#define CML_ASSIGN_VEC_2 /;"	d
CML_ASSIGN_VEC_3	hw5/cml/vector/class_ops.h	/^#define CML_ASSIGN_VEC_3 /;"	d
CML_ASSIGN_VEC_4	hw5/cml/vector/class_ops.h	/^#define CML_ASSIGN_VEC_4 /;"	d
CML_AUTOMATIC_MATRIX_RESIZE_ON_ASSIGNMENT	hw5/cml/defaults.h	/^#define CML_AUTOMATIC_MATRIX_RESIZE_ON_ASSIGNMENT$/;"	d
CML_AUTOMATIC_VECTOR_RESIZE_ON_ASSIGNMENT	hw5/cml/defaults.h	/^#define CML_AUTOMATIC_VECTOR_RESIZE_ON_ASSIGNMENT$/;"	d
CML_BINARY_SCALAR_OP	hw5/cml/et/scalar_ops.h	/^#define CML_BINARY_SCALAR_OP(/;"	d
CML_BINARY_SCALAR_OP	hw5/cml/et/scalar_ops.h	/^#undef CML_BINARY_SCALAR_OP$/;"	d
CML_BINARY_SCALAR_OP_ASSIGN	hw5/cml/et/scalar_ops.h	/^#define CML_BINARY_SCALAR_OP_ASSIGN(/;"	d
CML_BINARY_SCALAR_OP_ASSIGN	hw5/cml/et/scalar_ops.h	/^#undef CML_BINARY_SCALAR_OP_ASSIGN$/;"	d
CML_BOOLEAN_SCALAR_OP	hw5/cml/et/scalar_ops.h	/^#define CML_BOOLEAN_SCALAR_OP(/;"	d
CML_BOOLEAN_SCALAR_OP	hw5/cml/et/scalar_ops.h	/^#undef CML_BOOLEAN_SCALAR_OP$/;"	d
CML_CHECK_MATRIX_EXPR_SIZES	hw5/cml/defaults.h	/^#define CML_CHECK_MATRIX_EXPR_SIZES$/;"	d
CML_CHECK_VECTOR_EXPR_SIZES	hw5/cml/defaults.h	/^#define CML_CHECK_VECTOR_EXPR_SIZES$/;"	d
CML_CONSTRUCT_FROM_SUBVEC	hw5/cml/vector/class_ops.h	/^#define CML_CONSTRUCT_FROM_SUBVEC(/;"	d
CML_CONSTRUCT_MAT_22	hw5/cml/matrix/class_ops.h	/^#define CML_CONSTRUCT_MAT_22 /;"	d
CML_CONSTRUCT_MAT_33	hw5/cml/matrix/class_ops.h	/^#define CML_CONSTRUCT_MAT_33 /;"	d
CML_CONSTRUCT_MAT_44	hw5/cml/matrix/class_ops.h	/^#define CML_CONSTRUCT_MAT_44 /;"	d
CML_CONSTRUCT_VEC_2	hw5/cml/vector/class_ops.h	/^#define CML_CONSTRUCT_VEC_2(/;"	d
CML_CONSTRUCT_VEC_3	hw5/cml/vector/class_ops.h	/^#define CML_CONSTRUCT_VEC_3(/;"	d
CML_CONSTRUCT_VEC_4	hw5/cml/vector/class_ops.h	/^#define CML_CONSTRUCT_VEC_4(/;"	d
CML_DEFAULT_ARRAY_ALLOC	hw5/cml/defaults.h	/^#define CML_DEFAULT_ARRAY_ALLOC /;"	d
CML_DEFAULT_ARRAY_LAYOUT	hw5/cml/defaults.h	/^#define CML_DEFAULT_ARRAY_LAYOUT /;"	d
CML_DEFAULT_BASIS_ORIENTATION	hw5/cml/defaults.h	/^#define CML_DEFAULT_BASIS_ORIENTATION /;"	d
CML_DO_JOIN	hw5/cml/core/cml_assert.h	/^#define CML_DO_JOIN(/;"	d
CML_DO_JOIN2	hw5/cml/core/cml_assert.h	/^#define CML_DO_JOIN2(/;"	d
CML_JOIN	hw5/cml/core/cml_assert.h	/^#define CML_JOIN(/;"	d
CML_MATRIX_BRACE_OPERATORS	hw5/cml/matrix/class_ops.h	/^#define CML_MATRIX_BRACE_OPERATORS /;"	d
CML_MATXPR_MATXPR_BINOP	hw5/cml/matrix/matop_macros.h	/^#define CML_MATXPR_MATXPR_BINOP(/;"	d
CML_MATXPR_MATXPR_ORDER	hw5/cml/matrix/matrix_comparison.h	/^#define CML_MATXPR_MATXPR_ORDER(/;"	d
CML_MATXPR_MAT_BINOP	hw5/cml/matrix/matop_macros.h	/^#define CML_MATXPR_MAT_BINOP(/;"	d
CML_MATXPR_MAT_ORDER	hw5/cml/matrix/matrix_comparison.h	/^#define CML_MATXPR_MAT_ORDER(/;"	d
CML_MATXPR_SCALAR_BINOP	hw5/cml/matrix/matop_macros.h	/^#define CML_MATXPR_SCALAR_BINOP(/;"	d
CML_MATXPR_UNIOP	hw5/cml/matrix/matop_macros.h	/^#define CML_MATXPR_UNIOP(/;"	d
CML_MAT_ASSIGN_FROM_MAT	hw5/cml/matrix/class_ops.h	/^#define CML_MAT_ASSIGN_FROM_MAT(/;"	d
CML_MAT_ASSIGN_FROM_MATTYPE	hw5/cml/matrix/class_ops.h	/^#define CML_MAT_ASSIGN_FROM_MATTYPE /;"	d
CML_MAT_ASSIGN_FROM_MATTYPE	hw5/cml/matrix/class_ops.h	/^#define CML_MAT_ASSIGN_FROM_MATTYPE$/;"	d
CML_MAT_ASSIGN_FROM_MATXPR	hw5/cml/matrix/class_ops.h	/^#define CML_MAT_ASSIGN_FROM_MATXPR(/;"	d
CML_MAT_ASSIGN_FROM_SCALAR	hw5/cml/matrix/class_ops.h	/^#define CML_MAT_ASSIGN_FROM_SCALAR(/;"	d
CML_MAT_COPY_FROM_ARRAY	hw5/cml/matrix/class_ops.h	/^#define CML_MAT_COPY_FROM_ARRAY(/;"	d
CML_MAT_COPY_FROM_FIXED_ARRAY	hw5/cml/matrix/class_ops.h	/^#define CML_MAT_COPY_FROM_FIXED_ARRAY(/;"	d
CML_MAT_COPY_FROM_MAT	hw5/cml/matrix/class_ops.h	/^#define CML_MAT_COPY_FROM_MAT /;"	d
CML_MAT_COPY_FROM_MATTYPE	hw5/cml/matrix/class_ops.h	/^#define CML_MAT_COPY_FROM_MATTYPE /;"	d
CML_MAT_COPY_FROM_MATXPR	hw5/cml/matrix/class_ops.h	/^#define CML_MAT_COPY_FROM_MATXPR /;"	d
CML_MAT_MATXPR_BINOP	hw5/cml/matrix/matop_macros.h	/^#define CML_MAT_MATXPR_BINOP(/;"	d
CML_MAT_MATXPR_ORDER	hw5/cml/matrix/matrix_comparison.h	/^#define CML_MAT_MATXPR_ORDER(/;"	d
CML_MAT_MAT_BINOP	hw5/cml/matrix/matop_macros.h	/^#define CML_MAT_MAT_BINOP(/;"	d
CML_MAT_MAT_ORDER	hw5/cml/matrix/matrix_comparison.h	/^#define CML_MAT_MAT_ORDER(/;"	d
CML_MAT_SCALAR_BINOP	hw5/cml/matrix/matop_macros.h	/^#define CML_MAT_SCALAR_BINOP(/;"	d
CML_MAT_UNIOP	hw5/cml/matrix/matop_macros.h	/^#define CML_MAT_UNIOP(/;"	d
CML_NO_2D_UNROLLER	hw5/cml/defaults.h	/^#define CML_NO_2D_UNROLLER$/;"	d
CML_QUATXPR_QUATXPR_BINOP	hw5/cml/quaternion/quatop_macros.h	/^#define CML_QUATXPR_QUATXPR_BINOP(/;"	d
CML_QUATXPR_QUATXPR_ORDER	hw5/cml/quaternion/quaternion_comparison.h	/^#define CML_QUATXPR_QUATXPR_ORDER(/;"	d
CML_QUATXPR_QUAT_BINOP	hw5/cml/quaternion/quatop_macros.h	/^#define CML_QUATXPR_QUAT_BINOP(/;"	d
CML_QUATXPR_QUAT_ORDER	hw5/cml/quaternion/quaternion_comparison.h	/^#define CML_QUATXPR_QUAT_ORDER(/;"	d
CML_QUATXPR_SCALAR_BINOP	hw5/cml/quaternion/quatop_macros.h	/^#define CML_QUATXPR_SCALAR_BINOP(/;"	d
CML_QUATXPR_UNIOP	hw5/cml/quaternion/quatop_macros.h	/^#define CML_QUATXPR_UNIOP(/;"	d
CML_QUAT_ASSIGN_FROM_QUAT	hw5/cml/quaternion/quaternion.h	/^#define CML_QUAT_ASSIGN_FROM_QUAT(/;"	d
CML_QUAT_ASSIGN_FROM_QUAT	hw5/cml/quaternion/quaternion.h	/^#undef CML_QUAT_ASSIGN_FROM_QUAT$/;"	d
CML_QUAT_ASSIGN_FROM_QUATXPR	hw5/cml/quaternion/quaternion.h	/^#define CML_QUAT_ASSIGN_FROM_QUATXPR(/;"	d
CML_QUAT_ASSIGN_FROM_QUATXPR	hw5/cml/quaternion/quaternion.h	/^#undef CML_QUAT_ASSIGN_FROM_QUATXPR$/;"	d
CML_QUAT_ASSIGN_FROM_SCALAR	hw5/cml/quaternion/quaternion.h	/^#define CML_QUAT_ASSIGN_FROM_SCALAR(/;"	d
CML_QUAT_ASSIGN_FROM_SCALAR	hw5/cml/quaternion/quaternion.h	/^#undef CML_QUAT_ASSIGN_FROM_SCALAR$/;"	d
CML_QUAT_QUATXPR_BINOP	hw5/cml/quaternion/quatop_macros.h	/^#define CML_QUAT_QUATXPR_BINOP(/;"	d
CML_QUAT_QUATXPR_ORDER	hw5/cml/quaternion/quaternion_comparison.h	/^#define CML_QUAT_QUATXPR_ORDER(/;"	d
CML_QUAT_QUAT_BINOP	hw5/cml/quaternion/quatop_macros.h	/^#define CML_QUAT_QUAT_BINOP(/;"	d
CML_QUAT_QUAT_ORDER	hw5/cml/quaternion/quaternion_comparison.h	/^#define CML_QUAT_QUAT_ORDER(/;"	d
CML_QUAT_SCALAR_BINOP	hw5/cml/quaternion/quatop_macros.h	/^#define CML_QUAT_SCALAR_BINOP(/;"	d
CML_QUAT_UNIOP	hw5/cml/quaternion/quatop_macros.h	/^#define CML_QUAT_UNIOP(/;"	d
CML_SCALAR_MATXPR_BINOP	hw5/cml/matrix/matop_macros.h	/^#define CML_SCALAR_MATXPR_BINOP(/;"	d
CML_SCALAR_MAT_BINOP	hw5/cml/matrix/matop_macros.h	/^#define CML_SCALAR_MAT_BINOP(/;"	d
CML_SCALAR_QUATXPR_BINOP	hw5/cml/quaternion/quatop_macros.h	/^#define CML_SCALAR_QUATXPR_BINOP(/;"	d
CML_SCALAR_QUAT_BINOP	hw5/cml/quaternion/quatop_macros.h	/^#define CML_SCALAR_QUAT_BINOP(/;"	d
CML_SCALAR_VECXPR_BINOP	hw5/cml/vector/vecop_macros.h	/^#define CML_SCALAR_VECXPR_BINOP(/;"	d
CML_SCALAR_VEC_BINOP	hw5/cml/vector/vecop_macros.h	/^#define CML_SCALAR_VEC_BINOP(/;"	d
CML_STATIC_REQUIRE	hw5/cml/core/cml_assert.h	/^#define CML_STATIC_REQUIRE(/;"	d
CML_STATIC_REQUIRE_M	hw5/cml/core/cml_assert.h	/^#define CML_STATIC_REQUIRE_M(/;"	d
CML_UNARY_SCALAR_OP	hw5/cml/et/scalar_ops.h	/^#define CML_UNARY_SCALAR_OP(/;"	d
CML_UNARY_SCALAR_OP	hw5/cml/et/scalar_ops.h	/^#undef CML_UNARY_SCALAR_OP$/;"	d
CML_VECTOR_DOT_UNROLL_LIMIT	hw5/cml/defaults.h	/^#define CML_VECTOR_DOT_UNROLL_LIMIT /;"	d
CML_VECTOR_UNROLL_LIMIT	hw5/cml/defaults.h	/^#define CML_VECTOR_UNROLL_LIMIT /;"	d
CML_VECXPR_SCALAR_BINOP	hw5/cml/vector/vecop_macros.h	/^#define CML_VECXPR_SCALAR_BINOP(/;"	d
CML_VECXPR_UNIOP	hw5/cml/vector/vecop_macros.h	/^#define CML_VECXPR_UNIOP(/;"	d
CML_VECXPR_VECXPR_BINOP	hw5/cml/vector/vecop_macros.h	/^#define CML_VECXPR_VECXPR_BINOP(/;"	d
CML_VECXPR_VECXPR_ORDER	hw5/cml/vector/vector_comparison.h	/^#define CML_VECXPR_VECXPR_ORDER(/;"	d
CML_VECXPR_VEC_BINOP	hw5/cml/vector/vecop_macros.h	/^#define CML_VECXPR_VEC_BINOP(/;"	d
CML_VECXPR_VEC_ORDER	hw5/cml/vector/vector_comparison.h	/^#define CML_VECXPR_VEC_ORDER(/;"	d
CML_VEC_ASSIGN_FROM_SCALAR	hw5/cml/vector/class_ops.h	/^#define CML_VEC_ASSIGN_FROM_SCALAR(/;"	d
CML_VEC_ASSIGN_FROM_VEC	hw5/cml/vector/class_ops.h	/^#define CML_VEC_ASSIGN_FROM_VEC(/;"	d
CML_VEC_ASSIGN_FROM_VECTYPE	hw5/cml/vector/class_ops.h	/^#define CML_VEC_ASSIGN_FROM_VECTYPE /;"	d
CML_VEC_ASSIGN_FROM_VECXPR	hw5/cml/vector/class_ops.h	/^#define CML_VEC_ASSIGN_FROM_VECXPR(/;"	d
CML_VEC_COPY_FROM_ARRAY	hw5/cml/vector/class_ops.h	/^#define CML_VEC_COPY_FROM_ARRAY(/;"	d
CML_VEC_COPY_FROM_FIXED_ARRAY	hw5/cml/vector/class_ops.h	/^#define CML_VEC_COPY_FROM_FIXED_ARRAY(/;"	d
CML_VEC_COPY_FROM_VEC	hw5/cml/vector/class_ops.h	/^#define CML_VEC_COPY_FROM_VEC /;"	d
CML_VEC_COPY_FROM_VECTYPE	hw5/cml/vector/class_ops.h	/^#define CML_VEC_COPY_FROM_VECTYPE(/;"	d
CML_VEC_COPY_FROM_VECXPR	hw5/cml/vector/class_ops.h	/^#define CML_VEC_COPY_FROM_VECXPR /;"	d
CML_VEC_SCALAR_BINOP	hw5/cml/vector/vecop_macros.h	/^#define CML_VEC_SCALAR_BINOP(/;"	d
CML_VEC_UNIOP	hw5/cml/vector/vecop_macros.h	/^#define CML_VEC_UNIOP(/;"	d
CML_VEC_VECXPR_BINOP	hw5/cml/vector/vecop_macros.h	/^#define CML_VEC_VECXPR_BINOP(/;"	d
CML_VEC_VECXPR_ORDER	hw5/cml/vector/vector_comparison.h	/^#define CML_VEC_VECXPR_ORDER(/;"	d
CML_VEC_VEC_BINOP	hw5/cml/vector/vecop_macros.h	/^#define CML_VEC_VEC_BINOP(/;"	d
CML_VEC_VEC_ORDER	hw5/cml/vector/vector_comparison.h	/^#define CML_VEC_VEC_ORDER(/;"	d
CXX	hw5/Makefile	/^CXX=g++-mp-4.5$/;"	m
CheckIndex2	hw5/cml/mathlib/checking.h	/^inline void CheckIndex2(size_t index) {$/;"	f	namespace:cml::detail
CheckIndex3	hw5/cml/mathlib/checking.h	/^inline void CheckIndex3(size_t index) {$/;"	f	namespace:cml::detail
CheckIndexN	hw5/cml/mathlib/checking.h	/^inline void CheckIndexN(size_t index) {$/;"	f	namespace:cml::detail
CheckMat	hw5/cml/mathlib/checking.h	/^CheckMat(const MatT&)$/;"	f	namespace:cml::detail
CheckMat2x2	hw5/cml/mathlib/checking.h	/^CheckMat2x2(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMat3x3	hw5/cml/mathlib/checking.h	/^CheckMat3x3(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMat4x4	hw5/cml/mathlib/checking.h	/^CheckMat4x4(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatAffine2D	hw5/cml/mathlib/checking.h	/^CheckMatAffine2D(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatAffine2D	hw5/cml/mathlib/checking.h	/^CheckMatAffine2D(const MatT& m, col_basis) {$/;"	f	namespace:cml::detail
CheckMatAffine2D	hw5/cml/mathlib/checking.h	/^CheckMatAffine2D(const MatT& m, row_basis) {$/;"	f	namespace:cml::detail
CheckMatAffine3D	hw5/cml/mathlib/checking.h	/^CheckMatAffine3D(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatAffine3D	hw5/cml/mathlib/checking.h	/^CheckMatAffine3D(const MatT& m, col_basis) {$/;"	f	namespace:cml::detail
CheckMatAffine3D	hw5/cml/mathlib/checking.h	/^CheckMatAffine3D(const MatT& m, row_basis) {$/;"	f	namespace:cml::detail
CheckMatHomogeneous3D	hw5/cml/mathlib/checking.h	/^CheckMatHomogeneous3D(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatLinear2D	hw5/cml/mathlib/checking.h	/^CheckMatLinear2D(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatLinear3D	hw5/cml/mathlib/checking.h	/^CheckMatLinear3D(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatMin2x2	hw5/cml/mathlib/checking.h	/^CheckMatMin2x2(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatMin3x3	hw5/cml/mathlib/checking.h	/^CheckMatMin3x3(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatMin4x4	hw5/cml/mathlib/checking.h	/^CheckMatMin4x4(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatMinN	hw5/cml/mathlib/checking.h	/^CheckMatMinN(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatMinNxM	hw5/cml/mathlib/checking.h	/^CheckMatMinNxM(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatMinNxM	hw5/cml/mathlib/checking.h	/^CheckMatMinNxM(const MatT& m, dynamic_size_tag) {$/;"	f	namespace:cml::detail
CheckMatMinNxM	hw5/cml/mathlib/checking.h	/^CheckMatMinNxM(const MatT& m, fixed_size_tag) {$/;"	f	namespace:cml::detail
CheckMatN	hw5/cml/mathlib/checking.h	/^CheckMatN(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatNxM	hw5/cml/mathlib/checking.h	/^CheckMatNxM(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatNxM	hw5/cml/mathlib/checking.h	/^CheckMatNxM(const MatT& m, dynamic_size_tag) {$/;"	f	namespace:cml::detail
CheckMatNxM	hw5/cml/mathlib/checking.h	/^CheckMatNxM(const MatT& m, fixed_size_tag) {$/;"	f	namespace:cml::detail
CheckMatSquare	hw5/cml/mathlib/checking.h	/^CheckMatSquare(const MatT& m) {$/;"	f	namespace:cml::detail
CheckMatSquare	hw5/cml/mathlib/checking.h	/^CheckMatSquare(const MatT& m, dynamic_size_tag) {$/;"	f	namespace:cml::detail
CheckMatSquare	hw5/cml/mathlib/checking.h	/^CheckMatSquare(const MatT& m, fixed_size_tag) {$/;"	f	namespace:cml::detail
CheckOrResize	hw5/cml/matrix/matrix_unroller.h	/^    matrix_size CheckOrResize($/;"	f	class:cml::et::detail::MatrixAssignmentUnroller
CheckOrResize	hw5/cml/vector/vector_unroller.h	/^    size_t CheckOrResize($/;"	f	class:cml::et::detail::VectorAssignmentUnroller
CheckQuat	hw5/cml/mathlib/checking.h	/^CheckQuat(const QuatT& \/*q*\/)$/;"	f	namespace:cml::detail
CheckValidArg	hw5/cml/mathlib/checking.h	/^inline void CheckValidArg(bool valid)$/;"	f	namespace:cml::detail
CheckVec	hw5/cml/mathlib/checking.h	/^CheckVec(const VecT&)$/;"	f	namespace:cml::detail
CheckVec2	hw5/cml/mathlib/checking.h	/^CheckVec2(const VecT& v) {$/;"	f	namespace:cml::detail
CheckVec2Or3	hw5/cml/mathlib/checking.h	/^CheckVec2Or3(const VecT& v) {$/;"	f	namespace:cml::detail
CheckVec2Or3	hw5/cml/mathlib/checking.h	/^CheckVec2Or3(const VecT& v, dynamic_size_tag) {$/;"	f	namespace:cml::detail
CheckVec2Or3	hw5/cml/mathlib/checking.h	/^CheckVec2Or3(const VecT& v, fixed_size_tag) {$/;"	f	namespace:cml::detail
CheckVec3	hw5/cml/mathlib/checking.h	/^CheckVec3(const VecT& v) {$/;"	f	namespace:cml::detail
CheckVec4	hw5/cml/mathlib/checking.h	/^CheckVec4(const VecT& v) {$/;"	f	namespace:cml::detail
CheckVecN	hw5/cml/mathlib/checking.h	/^CheckVecN(const VecT& v) {$/;"	f	namespace:cml::detail
CheckVecN	hw5/cml/mathlib/checking.h	/^CheckVecN(const VecT& v, dynamic_size_tag) {$/;"	f	namespace:cml::detail
CheckVecN	hw5/cml/mathlib/checking.h	/^CheckVecN(const VecT& v, fixed_size_tag) {$/;"	f	namespace:cml::detail
CheckedSize	hw5/cml/et/size_checking.h	/^CheckedSize(const LeftT& left, const RightT& right, SizeTag)$/;"	f	namespace:cml::et
CheckedSquare	hw5/cml/et/size_checking.h	/^CheckedSquare(const MatT& m, dynamic_size_tag)$/;"	f	namespace:cml::et
CheckedSquare	hw5/cml/et/size_checking.h	/^CheckedSquare(const MatT&, fixed_size_tag)$/;"	f	namespace:cml::et
Cols	hw5/cml/et/array_promotions.h	/^        Cols = (size_t)A2::array_cols$/;"	e	enum:cml::et::detail::promote::__anon21
ConjugateOp	hw5/cml/quaternion/conjugate.h	/^    ConjugateOp(const expr_type& e) : m_expr(e.m_expr) {}$/;"	f	class:cml::et::ConjugateOp
ConjugateOp	hw5/cml/quaternion/conjugate.h	/^    explicit ConjugateOp(expr_reference expr) : m_expr(expr) {}$/;"	f	class:cml::et::ConjugateOp
ConjugateOp	hw5/cml/quaternion/conjugate.h	/^class ConjugateOp$/;"	c	namespace:cml::et
CrossPromote	hw5/cml/vector/vector_products.h	/^struct CrossPromote$/;"	s	namespace:cml::detail
DECLARE_AUTOPROMOTE	hw5/cml/et/scalar_promotions.h	/^#define DECLARE_AUTOPROMOTE(/;"	d
DECLARE_PRECISION	hw5/cml/et/scalar_promotions.h	/^#define DECLARE_PRECISION(/;"	d
Default	hw5/cml/core/meta/switch.h	/^struct Default {};      \/* For indicating the default result. *\/$/;"	s	namespace:cml
DotPromote	hw5/cml/vector/vector_products.h	/^struct DotPromote$/;"	s	namespace:cml::detail
ELEMENT_ARG_TYPE	hw5/cml/et/traits.h	/^#define ELEMENT_ARG_TYPE /;"	d
EPS_D	hw5/common.h	/^const float EPS_D = std::numeric_limits<double>::epsilon();$/;"	v
EPS_F	hw5/common.h	/^const float EPS_F = std::numeric_limits<float>::epsilon();$/;"	v
EulerOrder	hw5/cml/mathlib/helper.h	/^enum EulerOrder {$/;"	g	namespace:cml
Eval	hw5/cml/matrix/matrix_unroller.h	/^        struct Eval<LastRow,C,LastRow,LastCol,true> {$/;"	s	class:cml::et::detail::MatrixAssignmentUnroller
Eval	hw5/cml/matrix/matrix_unroller.h	/^        struct Eval<LastRow,LastCol,LastRow,LastCol,true> {$/;"	s	class:cml::et::detail::MatrixAssignmentUnroller
Eval	hw5/cml/matrix/matrix_unroller.h	/^        struct Eval<R,C,LastRow,LastCol,false> {$/;"	s	class:cml::et::detail::MatrixAssignmentUnroller
Eval	hw5/cml/matrix/matrix_unroller.h	/^        struct Eval<R,C,LastRow,LastCol,true> {$/;"	s	class:cml::et::detail::MatrixAssignmentUnroller
Eval	hw5/cml/matrix/matrix_unroller.h	/^        struct Eval<R,LastCol,LastRow,LastCol,true> {$/;"	s	class:cml::et::detail::MatrixAssignmentUnroller
Eval	hw5/cml/matrix/matrix_unroller.h	/^    template<int R, int C, int LastRow, int LastCol> struct Eval {$/;"	s	class:cml::et::detail::MatrixAssignmentUnroller
Eval	hw5/cml/vector/vector_unroller.h	/^    template<int Last> struct Eval<Last,Last,true> {$/;"	s	class:cml::et::detail::VectorAssignmentUnroller
Eval	hw5/cml/vector/vector_unroller.h	/^    template<int Last> struct Eval<Last,Last,true> {$/;"	s	struct:cml::et::detail::VectorAccumulateUnroller
Eval	hw5/cml/vector/vector_unroller.h	/^    template<int N, int Last> struct Eval<N,Last,false> {$/;"	s	class:cml::et::detail::VectorAssignmentUnroller
Eval	hw5/cml/vector/vector_unroller.h	/^    template<int N, int Last> struct Eval<N,Last,false> {$/;"	s	struct:cml::et::detail::VectorAccumulateUnroller
Eval	hw5/cml/vector/vector_unroller.h	/^    template<int N, int Last> struct Eval<N,Last,true> {$/;"	s	class:cml::et::detail::VectorAssignmentUnroller
Eval	hw5/cml/vector/vector_unroller.h	/^    template<int N, int Last> struct Eval<N,Last,true> {$/;"	s	struct:cml::et::detail::VectorAccumulateUnroller
ExprTraits	hw5/cml/et/traits.h	/^template<> struct ExprTraits<double>$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/et/traits.h	/^template<> struct ExprTraits<float>$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/matrix/matrix_expr.h	/^struct ExprTraits< BinaryMatrixOp<LeftT,RightT,OpT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/matrix/matrix_expr.h	/^struct ExprTraits< MatrixXpr<ExprT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/matrix/matrix_expr.h	/^struct ExprTraits< UnaryMatrixOp<ExprT,OpT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/matrix/matrix_rowcol.h	/^struct ExprTraits< MatrixColOp<ExprT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/matrix/matrix_rowcol.h	/^struct ExprTraits< MatrixRowOp<ExprT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/matrix/matrix_traits.h	/^struct ExprTraits< cml::matrix<E,AT,BO,L> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/matrix/matrix_transpose.h	/^struct ExprTraits< MatrixTransposeOp<ExprT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/quaternion/conjugate.h	/^struct ExprTraits< ConjugateOp<ExprT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/quaternion/inverse.h	/^struct ExprTraits< QuaternionInverseOp<ExprT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/quaternion/quaternion_expr.h	/^struct ExprTraits< BinaryQuaternionOp<LeftT,RightT,OpT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/quaternion/quaternion_expr.h	/^struct ExprTraits< QuaternionXpr<ExprT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/quaternion/quaternion_expr.h	/^struct ExprTraits< UnaryQuaternionOp<ExprT,OpT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/quaternion/quaternion_traits.h	/^struct ExprTraits< cml::quaternion<E,AT,OT,CT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/vector/vector_expr.h	/^struct ExprTraits< BinaryVectorOp<LeftT,RightT,OpT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/vector/vector_expr.h	/^struct ExprTraits< UnaryVectorOp<ExprT,OpT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/vector/vector_expr.h	/^struct ExprTraits< VectorXpr<ExprT> >$/;"	s	namespace:cml::et
ExprTraits	hw5/cml/vector/vector_traits.h	/^struct ExprTraits< cml::vector<E,AT> >$/;"	s	namespace:cml::et
GetCheckedSize	hw5/cml/et/size_checking.h	/^struct GetCheckedSize<LeftT,RightT,dynamic_size_tag>$/;"	s	namespace:cml::et
GetCheckedSize	hw5/cml/et/size_checking.h	/^struct GetCheckedSize<LeftT,RightT,fixed_size_tag>$/;"	s	namespace:cml::et
Handedness	hw5/cml/mathlib/helper.h	/^enum Handedness { left_handed, right_handed };$/;"	g	namespace:cml
IMG_HEIGHT	hw5/common.h	/^const int IMG_HEIGHT = 600;$/;"	v
IMG_WIDTH	hw5/common.h	/^const int IMG_WIDTH = 800;$/;"	v
InterpResize	hw5/cml/mathlib/interpolation.h	/^InterpResize(T1& t1, const T2& t2, SizeTag) {}$/;"	f	namespace:cml::detail
InterpResize	hw5/cml/mathlib/interpolation.h	/^InterpResize(matrix<E,A,B,L>& m, const MatT& target, dynamic_size_tag) {$/;"	f	namespace:cml::detail
InterpResize	hw5/cml/mathlib/interpolation.h	/^InterpResize(vector<E,A>& v, const VecT& target, dynamic_size_tag) {$/;"	f	namespace:cml::detail
LeftBaseT	hw5/cml/matrix/matrix_promotions.h	/^        typename remove_reference<LeftT>::type>::type LeftBaseT;$/;"	t	struct:cml::et::MatrixPromote
MATRIX_TRANSPOSE_RETURNS_TEMP	hw5/cml/matrix/matrix_transpose.h	/^#define MATRIX_TRANSPOSE_RETURNS_TEMP$/;"	d
MATXPR_ARG_TYPE	hw5/cml/matrix/matrix_expr.h	/^#define MATXPR_ARG_TYPE /;"	d
MATXPR_ARG_TYPE_N	hw5/cml/matrix/matrix_expr.h	/^#define MATXPR_ARG_TYPE_N(/;"	d
MAT_TEMP_2X2	hw5/cml/mathlib/matrix_rotation.h	/^#define MAT_TEMP_2X2 /;"	d
MAT_TEMP_2X2	hw5/cml/mathlib/matrix_rotation.h	/^#undef MAT_TEMP_2X2$/;"	d
MAT_TEMP_3X3	hw5/cml/mathlib/matrix_rotation.h	/^#define MAT_TEMP_3X3 /;"	d
MAT_TEMP_3X3	hw5/cml/mathlib/matrix_rotation.h	/^#undef MAT_TEMP_3X3$/;"	d
MAT_TEMP_4X4	hw5/cml/mathlib/matrix_concat.h	/^#define MAT_TEMP_4X4 /;"	d
MAT_TEMP_4x4	hw5/cml/mathlib/matrix_concat.h	/^#undef MAT_TEMP_4x4$/;"	d
MAX_DEPTH	hw5/common.h	/^const int MAX_DEPTH = 1024;$/;"	v
M_E	hw5/cml/constants.h	/^#define M_E /;"	d
M_PI	hw5/cml/constants.h	/^#define M_PI /;"	d
M_SQRT2	hw5/cml/constants.h	/^#define M_SQRT2 /;"	d
MatMulCheckedSize	hw5/cml/matrix/matrix_mul.h	/^MatMulCheckedSize(const LeftT& left, const RightT& right, dynamic_size_tag)$/;"	f	namespace:cml::detail
MatMulCheckedSize	hw5/cml/matrix/matrix_mul.h	/^MatMulCheckedSize(const LeftT&, const RightT&, fixed_size_tag)$/;"	f	namespace:cml::detail
MatVecPromote	hw5/cml/matvec/matvec_promotions.h	/^struct MatVecPromote< cml::matrix<E1,AT1,BO,L>, cml::vector<E2,AT2> >$/;"	s	namespace:cml::et
MatVecPromote	hw5/cml/matvec/matvec_promotions.h	/^struct MatVecPromote< cml::vector<E1,AT1>, cml::matrix<E2,AT2,BO,L> >$/;"	s	namespace:cml::et
MatrixAssignmentUnroller	hw5/cml/matrix/matrix_unroller.h	/^class MatrixAssignmentUnroller$/;"	c	namespace:cml::et::detail
MatrixColOp	hw5/cml/matrix/matrix_rowcol.h	/^    MatrixColOp(const expr_type& e)$/;"	f	class:cml::et::MatrixColOp
MatrixColOp	hw5/cml/matrix/matrix_rowcol.h	/^    explicit MatrixColOp(const ExprT& expr, size_t col)$/;"	f	class:cml::et::MatrixColOp
MatrixColOp	hw5/cml/matrix/matrix_rowcol.h	/^class MatrixColOp$/;"	c	namespace:cml::et
MatrixExpressions	hw5/cml/matrix/matrix_expr.h	/^struct MatrixExpressions$/;"	s	namespace:cml::et
MatrixPromote	hw5/cml/matrix/matrix_promotions.h	/^template<typename LeftT, typename RightT> struct MatrixPromote$/;"	s	namespace:cml::et
MatrixPromote2	hw5/cml/matrix/matrix_promotions.h	/^struct MatrixPromote2$/;"	s	namespace:cml::et
MatrixPromote3	hw5/cml/matrix/matrix_promotions.h	/^struct MatrixPromote3$/;"	s	namespace:cml::et
MatrixPromote4	hw5/cml/matrix/matrix_promotions.h	/^struct MatrixPromote4$/;"	s	namespace:cml::et
MatrixPromoteHelper	hw5/cml/matrix/matrix_promotions.h	/^    struct MatrixPromoteHelper< cml::vector<E1,AT1>, cml::vector<E2,AT2> >$/;"	s	struct:cml::et::MatrixPromote
MatrixPromoteHelper	hw5/cml/matrix/matrix_promotions.h	/^    struct MatrixPromoteHelper<$/;"	s	struct:cml::et::MatrixPromote
MatrixPromoteHelper	hw5/cml/matrix/matrix_promotions.h	/^    struct MatrixPromoteHelper<S, cml::matrix<E,AT,BO,L> >$/;"	s	struct:cml::et::MatrixPromote
MatrixPromoteHelper	hw5/cml/matrix/matrix_promotions.h	/^    struct MatrixPromoteHelper<cml::matrix<E,AT,BO,L>, S>$/;"	s	struct:cml::et::MatrixPromote
MatrixRowOp	hw5/cml/matrix/matrix_rowcol.h	/^    MatrixRowOp(const expr_type& e)$/;"	f	class:cml::et::MatrixRowOp
MatrixRowOp	hw5/cml/matrix/matrix_rowcol.h	/^    explicit MatrixRowOp(const ExprT& expr, size_t row)$/;"	f	class:cml::et::MatrixRowOp
MatrixRowOp	hw5/cml/matrix/matrix_rowcol.h	/^class MatrixRowOp$/;"	c	namespace:cml::et
MatrixTransposeOp	hw5/cml/matrix/matrix_transpose.h	/^    MatrixTransposeOp(const expr_type& e) : m_expr(e.m_expr) {}$/;"	f	class:cml::et::MatrixTransposeOp
MatrixTransposeOp	hw5/cml/matrix/matrix_transpose.h	/^    explicit MatrixTransposeOp(const ExprT& expr) : m_expr(expr) {}$/;"	f	class:cml::et::MatrixTransposeOp
MatrixTransposeOp	hw5/cml/matrix/matrix_transpose.h	/^class MatrixTransposeOp$/;"	c	namespace:cml::et
MatrixXpr	hw5/cml/matrix/matrix_expr.h	/^    MatrixXpr(const expr_type& e) : m_expr(e.m_expr) {}$/;"	f	class:cml::et::MatrixXpr
MatrixXpr	hw5/cml/matrix/matrix_expr.h	/^    explicit MatrixXpr(expr_reference expr) : m_expr(expr) {}$/;"	f	class:cml::et::MatrixXpr
MatrixXpr	hw5/cml/matrix/matrix_expr.h	/^class MatrixXpr$/;"	c	namespace:cml::et
NilCase	hw5/cml/core/meta/switch.h	/^struct NilCase {};      \/* For terminating the case list. *\/$/;"	s	namespace:cml
OuterPromote	hw5/cml/vector/vector_products.h	/^struct OuterPromote$/;"	s	namespace:cml::detail
QUATXPR_ARG_TYPE	hw5/cml/quaternion/quaternion_expr.h	/^#define QUATXPR_ARG_TYPE /;"	d
QUATXPR_ARG_TYPE_N	hw5/cml/quaternion/quaternion_expr.h	/^#define QUATXPR_ARG_TYPE_N(/;"	d
QuaternionExpressions	hw5/cml/quaternion/quaternion_expr.h	/^struct QuaternionExpressions$/;"	s	namespace:cml::et
QuaternionInverseOp	hw5/cml/quaternion/inverse.h	/^    QuaternionInverseOp(const expr_type& e)$/;"	f	class:cml::et::QuaternionInverseOp
QuaternionInverseOp	hw5/cml/quaternion/inverse.h	/^    explicit QuaternionInverseOp(arg_reference arg)$/;"	f	class:cml::et::QuaternionInverseOp
QuaternionInverseOp	hw5/cml/quaternion/inverse.h	/^class QuaternionInverseOp$/;"	c	namespace:cml::et
QuaternionMult	hw5/cml/quaternion/quaternion_mul.h	/^QuaternionMult(const Quat1_T& q1, const Quat2_T& q2)$/;"	f	namespace:cml::detail
QuaternionPromote	hw5/cml/quaternion/quaternion_promotions.h	/^struct QuaternionPromote<$/;"	s	namespace:cml::et
QuaternionPromote	hw5/cml/quaternion/quaternion_promotions.h	/^struct QuaternionPromote<S, cml::quaternion<E,AT,OT,CT> >$/;"	s	namespace:cml::et
QuaternionPromote	hw5/cml/quaternion/quaternion_promotions.h	/^struct QuaternionPromote<cml::quaternion<E,AT,OT,CT>, S>$/;"	s	namespace:cml::et
QuaternionPromote2	hw5/cml/quaternion/quaternion_promotions.h	/^struct QuaternionPromote2$/;"	s	namespace:cml::et
QuaternionPromote3	hw5/cml/quaternion/quaternion_promotions.h	/^struct QuaternionPromote3$/;"	s	namespace:cml::et
QuaternionPromote4	hw5/cml/quaternion/quaternion_promotions.h	/^struct QuaternionPromote4$/;"	s	namespace:cml::et
QuaternionXpr	hw5/cml/quaternion/quaternion_expr.h	/^    QuaternionXpr(const expr_type& e) : m_expr(e.m_expr) {}$/;"	f	class:cml::et::QuaternionXpr
QuaternionXpr	hw5/cml/quaternion/quaternion_expr.h	/^    explicit QuaternionXpr(expr_reference expr) : m_expr(expr) {}$/;"	f	class:cml::et::QuaternionXpr
QuaternionXpr	hw5/cml/quaternion/quaternion_expr.h	/^class QuaternionXpr$/;"	c	namespace:cml::et
REFR_AIR	hw5/common.h	/^const float REFR_AIR = 1.000277;$/;"	v
REFR_GLASS	hw5/common.h	/^const float REFR_GLASS = 1.510;$/;"	v
Require2D	hw5/cml/vector/vector_products.h	/^Require2D(const VecT& v, dynamic_size_tag) {$/;"	f	namespace:cml::detail
Require2D	hw5/cml/vector/vector_products.h	/^Require2D(const VecT& v, fixed_size_tag) {$/;"	f	namespace:cml::detail
Require3D	hw5/cml/vector/vector_products.h	/^Require3D(const VecT& v, dynamic_size_tag) {$/;"	f	namespace:cml::detail
Require3D	hw5/cml/vector/vector_products.h	/^Require3D(const VecT&, fixed_size_tag) {$/;"	f	namespace:cml::detail
Resize	hw5/cml/matrix/matrix_expr.h	/^void Resize(MatT& m, matrix_size N) {$/;"	f	namespace:cml::et::detail
Resize	hw5/cml/matrix/matrix_expr.h	/^void Resize(MatT& m, size_t R, size_t C) {$/;"	f	namespace:cml::et::detail
Resize	hw5/cml/matrix/matrix_expr.h	/^void Resize(MatT& m,$/;"	f	namespace:cml::et::detail
Resize	hw5/cml/matrix/matrix_expr.h	/^void Resize(MatT&, size_t, size_t, fixed_size_tag, MT) {}$/;"	f	namespace:cml::et::detail
Resize	hw5/cml/vector/vector_expr.h	/^void Resize(VecT& v, size_t S) {$/;"	f	namespace:cml::et::detail
Resize	hw5/cml/vector/vector_expr.h	/^void Resize(VecT& v, size_t S, resizable_tag, dynamic_memory_tag) {$/;"	f	namespace:cml::et::detail
Resize	hw5/cml/vector/vector_expr.h	/^void Resize(VecT&,size_t,RT,MT) {}$/;"	f	namespace:cml::et::detail
RightBaseT	hw5/cml/matrix/matrix_promotions.h	/^        typename remove_reference<RightT>::type>::type RightBaseT;$/;"	t	struct:cml::et::MatrixPromote
Rows	hw5/cml/et/array_promotions.h	/^        Rows = (size_t)A1::array_rows,$/;"	e	enum:cml::et::detail::promote::__anon21
SCALAR_ARG_TYPE	hw5/cml/et/traits.h	/^#define SCALAR_ARG_TYPE /;"	d
STATIC_ASSERTION_FAILURE	hw5/cml/core/cml_assert.h	/^template<> struct STATIC_ASSERTION_FAILURE<true> {$/;"	s	namespace:cml
STATIC_ASSERTION_FAILURE_M	hw5/cml/core/cml_assert.h	/^template<bool T, typename M> struct STATIC_ASSERTION_FAILURE_M {$/;"	s	namespace:cml
STATIC_ASSERTION_FAILURE_M	hw5/cml/core/cml_assert.h	/^template<typename M> struct STATIC_ASSERTION_FAILURE_M<true,M> {$/;"	s	namespace:cml
ScalarPromote	hw5/cml/et/scalar_promotions.h	/^template<class E1, class E2> struct ScalarPromote$/;"	s	namespace:cml::et
Size	hw5/cml/et/array_promotions.h	/^    enum { Size = (size_t)A1::array_rows };$/;"	e	enum:cml::et::detail::promote::__anon19
Size	hw5/cml/et/array_promotions.h	/^    enum { Size = (size_t)A2::array_cols };$/;"	e	enum:cml::et::detail::promote::__anon20
Size	hw5/cml/et/array_promotions.h	/^    enum { Size = VAL_MAX((size_t)A1::array_size, (size_t)A2::array_size) };$/;"	e	enum:cml::et::detail::promote::__anon18
SphericalType	hw5/cml/mathlib/helper.h	/^enum SphericalType { latitude, colatitude };$/;"	g	namespace:cml
SumOp	hw5/cml/quaternion/quaternion_mul.h	/^template < class Real > struct SumOp< negative_cross, Real > {$/;"	s	namespace:cml::detail
SumOp	hw5/cml/quaternion/quaternion_mul.h	/^template < class Real > struct SumOp< positive_cross, Real > {$/;"	s	namespace:cml::detail
T	hw5/cml/mathlib/epsilon.h	/^    typedef value_type T;$/;"	t	struct:cml::epsilon
T	hw5/cml/matrix/matrix_transpose.h	/^T(MATXPR_ARG_TYPE expr)$/;"	f	namespace:cml
T	hw5/cml/matrix/matrix_transpose.h	/^T(const matrix<E,AT,BO,L>& expr)$/;"	f	namespace:cml
T1	hw5/cml/et/scalar_promotions.h	/^    typedef typename autopromote_trait<T1_non_const>::T_numtype T1;$/;"	t	struct:cml::et::detail::promote_trait
T1IsBetter	hw5/cml/et/scalar_promotions.h	/^      T1IsBetter =$/;"	e	enum:cml::et::detail::promote_trait::__anon23
T1IsLarger	hw5/cml/et/scalar_promotions.h	/^      T1IsLarger = sizeof(T1) >= sizeof(T2),$/;"	e	enum:cml::et::detail::promote_trait::__anon23
T1_non_const	hw5/cml/et/scalar_promotions.h	/^    typedef typename cml::remove_const<T1_orig>::type T1_non_const;$/;"	t	struct:cml::et::detail::promote_trait
T2	hw5/cml/et/scalar_promotions.h	/^    typedef typename autopromote_trait<T2_non_const>::T_numtype T2;$/;"	t	struct:cml::et::detail::promote_trait
T2_non_const	hw5/cml/et/scalar_promotions.h	/^    typedef typename cml::remove_const<T2_orig>::type T2_non_const;$/;"	t	struct:cml::et::detail::promote_trait
TEMPLATED_MATRIX_MACRO	hw5/cml/matrix/class_ops.h	/^#define TEMPLATED_MATRIX_MACRO /;"	d
TEMP_VEC2	hw5/cml/mathlib/matrix_basis.h	/^#define TEMP_VEC2 /;"	d
TEMP_VEC2	hw5/cml/mathlib/matrix_basis.h	/^#undef TEMP_VEC2$/;"	d
TEMP_VEC2	hw5/cml/mathlib/vector_transform.h	/^#define TEMP_VEC2 /;"	d
TEMP_VEC2	hw5/cml/mathlib/vector_transform.h	/^#undef TEMP_VEC2$/;"	d
TEMP_VEC3	hw5/cml/mathlib/matrix_basis.h	/^#define TEMP_VEC3 /;"	d
TEMP_VEC3	hw5/cml/mathlib/matrix_basis.h	/^#undef TEMP_VEC3$/;"	d
TEMP_VEC3	hw5/cml/mathlib/vector_transform.h	/^#define TEMP_VEC3 /;"	d
TEMP_VEC3	hw5/cml/mathlib/vector_transform.h	/^#undef TEMP_VEC3$/;"	d
TEMP_VEC4	hw5/cml/mathlib/vector_transform.h	/^#define TEMP_VEC4 /;"	d
TEMP_VEC4	hw5/cml/mathlib/vector_transform.h	/^#undef TEMP_VEC4$/;"	d
TO_STRING	hw5/cml/core/cml_assert.h	/^#define TO_STRING(/;"	d
TO_STRING2	hw5/cml/core/cml_assert.h	/^#define TO_STRING2(/;"	d
T_numtype	hw5/cml/et/scalar_promotions.h	/^    typedef T T_numtype;$/;"	t	struct:cml::et::detail::autopromote_trait
T_promote	hw5/cml/et/scalar_promotions.h	/^    typedef T1 T_promote;$/;"	t	struct:cml::et::detail::promote2
T_promote	hw5/cml/et/scalar_promotions.h	/^    typedef T2 T_promote;$/;"	t	struct:cml::et::detail::promote2
T_promote	hw5/cml/et/scalar_promotions.h	/^    typedef typename promote2<T1,T2,promoteToT1>::T_promote T_promote;$/;"	t	struct:cml::et::detail::promote_trait
TypePromote	hw5/cml/mathlib/interpolation.h	/^struct TypePromote< T,T,et::scalar_result_tag > {$/;"	s	namespace:cml::detail
TypePromote	hw5/cml/mathlib/interpolation.h	/^struct TypePromote< T1,T2,et::matrix_result_tag > {$/;"	s	namespace:cml::detail
TypePromote	hw5/cml/mathlib/interpolation.h	/^struct TypePromote< T1,T2,et::quaternion_result_tag > {$/;"	s	namespace:cml::detail
TypePromote	hw5/cml/mathlib/interpolation.h	/^struct TypePromote< T1,T2,et::scalar_result_tag > {$/;"	s	namespace:cml::detail
TypePromote	hw5/cml/mathlib/interpolation.h	/^struct TypePromote< T1,T2,et::vector_result_tag > {$/;"	s	namespace:cml::detail
TypePromote3	hw5/cml/mathlib/interpolation.h	/^struct TypePromote3< T1,T2,T3,et::matrix_result_tag > {$/;"	s	namespace:cml::detail
TypePromote3	hw5/cml/mathlib/interpolation.h	/^struct TypePromote3< T1,T2,T3,et::quaternion_result_tag > {$/;"	s	namespace:cml::detail
TypePromote4	hw5/cml/mathlib/interpolation.h	/^struct TypePromote4< T1,T2,T3,T4,et::matrix_result_tag > {$/;"	s	namespace:cml::detail
TypePromote4	hw5/cml/mathlib/interpolation.h	/^struct TypePromote4< T1,T2,T3,T4,et::quaternion_result_tag > {$/;"	s	namespace:cml::detail
UnaryMatrixOp	hw5/cml/matrix/matrix_expr.h	/^    UnaryMatrixOp(const expr_type& e) : m_expr(e.m_expr) {}$/;"	f	class:cml::et::UnaryMatrixOp
UnaryMatrixOp	hw5/cml/matrix/matrix_expr.h	/^    explicit UnaryMatrixOp(expr_reference expr) : m_expr(expr) {}$/;"	f	class:cml::et::UnaryMatrixOp
UnaryMatrixOp	hw5/cml/matrix/matrix_expr.h	/^class UnaryMatrixOp$/;"	c	namespace:cml::et
UnaryQuaternionOp	hw5/cml/quaternion/quaternion_expr.h	/^    UnaryQuaternionOp(const expr_type& e) : m_expr(e.m_expr) {}$/;"	f	class:cml::et::UnaryQuaternionOp
UnaryQuaternionOp	hw5/cml/quaternion/quaternion_expr.h	/^    explicit UnaryQuaternionOp(expr_reference expr) : m_expr(expr) {}$/;"	f	class:cml::et::UnaryQuaternionOp
UnaryQuaternionOp	hw5/cml/quaternion/quaternion_expr.h	/^class UnaryQuaternionOp$/;"	c	namespace:cml::et
UnaryVectorOp	hw5/cml/vector/vector_expr.h	/^    UnaryVectorOp(const expr_type& e) : m_expr(e.m_expr) {}$/;"	f	class:cml::et::UnaryVectorOp
UnaryVectorOp	hw5/cml/vector/vector_expr.h	/^    explicit UnaryVectorOp(expr_reference expr) : m_expr(expr) {}$/;"	f	class:cml::et::UnaryVectorOp
UnaryVectorOp	hw5/cml/vector/vector_expr.h	/^class UnaryVectorOp$/;"	c	namespace:cml::et
UnrollAssignment	hw5/cml/matrix/matrix_unroller.h	/^inline void UnrollAssignment(cml::matrix<E,AT,BO,L>& dest, const SrcT& src)$/;"	f	namespace:cml::et
UnrollAssignment	hw5/cml/vector/vector_unroller.h	/^void UnrollAssignment(cml::vector<E,AT>& dest, const SrcT& src)$/;"	f	namespace:cml::et
UnrollDot	hw5/cml/vector/vector_products.h	/^UnrollDot(const LeftT& left, const RightT& right, dynamic_size_tag)$/;"	f	namespace:cml::detail
UnrollDot	hw5/cml/vector/vector_products.h	/^UnrollDot(const LeftT& left, const RightT& right, fixed_size_tag)$/;"	f	namespace:cml::detail
VAL_MAX	hw5/cml/et/array_promotions.h	/^#define VAL_MAX(/;"	d
VAL_MAX	hw5/cml/et/array_promotions.h	/^#undef VAL_MAX$/;"	d
VECXPR_ARG_TYPE	hw5/cml/vector/vector_expr.h	/^#define VECXPR_ARG_TYPE /;"	d
VECXPR_ARG_TYPE_N	hw5/cml/vector/vector_expr.h	/^#define VECXPR_ARG_TYPE_N(/;"	d
VectorAccumulateUnroller	hw5/cml/vector/vector_unroller.h	/^struct VectorAccumulateUnroller$/;"	s	namespace:cml::et::detail
VectorAssignmentUnroller	hw5/cml/vector/vector_unroller.h	/^class VectorAssignmentUnroller$/;"	c	namespace:cml::et::detail
VectorExpressions	hw5/cml/vector/vector_expr.h	/^struct VectorExpressions$/;"	s	namespace:cml::et
VectorPromote	hw5/cml/vector/vector_promotions.h	/^struct VectorPromote< cml::vector<E1,AT1>, cml::vector<E2,AT2> >$/;"	s	namespace:cml::et
VectorPromote	hw5/cml/vector/vector_promotions.h	/^struct VectorPromote<S, cml::vector<E,AT> >$/;"	s	namespace:cml::et
VectorPromote	hw5/cml/vector/vector_promotions.h	/^struct VectorPromote<cml::vector<E,AT>, S>$/;"	s	namespace:cml::et
VectorXpr	hw5/cml/vector/vector_expr.h	/^    VectorXpr(const expr_type& e) : m_expr(e.m_expr) {}$/;"	f	class:cml::et::VectorXpr
VectorXpr	hw5/cml/vector/vector_expr.h	/^    explicit VectorXpr(expr_reference expr) : m_expr(expr) {}$/;"	f	class:cml::et::VectorXpr
VectorXpr	hw5/cml/vector/vector_expr.h	/^class VectorXpr$/;"	c	namespace:cml::et
W	hw5/cml/quaternion.h	/^    enum { W, X, Y, Z };$/;"	e	enum:cml::scalar_first::__anon58
W	hw5/cml/quaternion.h	/^    enum { X, Y, Z, W };$/;"	e	enum:cml::vector_first::__anon59
W	hw5/cml/quaternion/conjugate.h	/^        W = order_type::W,$/;"	e	enum:cml::et::ConjugateOp::__anon47
W	hw5/cml/quaternion/inverse.h	/^        W = order_type::W,$/;"	e	enum:cml::et::QuaternionInverseOp::__anon49
W	hw5/cml/quaternion/quaternion.h	/^        W = order_type::W,$/;"	e	enum:cml::quaternion::__anon51
W	hw5/cml/quaternion/quaternion_expr.h	/^        W = order_type::W,$/;"	e	enum:cml::et::BinaryQuaternionOp::__anon56
W	hw5/cml/quaternion/quaternion_expr.h	/^        W = order_type::W,$/;"	e	enum:cml::et::UnaryQuaternionOp::__anon54
X	hw5/cml/quaternion.h	/^    enum { W, X, Y, Z };$/;"	e	enum:cml::scalar_first::__anon58
X	hw5/cml/quaternion.h	/^    enum { X, Y, Z, W };$/;"	e	enum:cml::vector_first::__anon59
X	hw5/cml/quaternion/conjugate.h	/^        X = order_type::X,$/;"	e	enum:cml::et::ConjugateOp::__anon47
X	hw5/cml/quaternion/inverse.h	/^        X = order_type::X,$/;"	e	enum:cml::et::QuaternionInverseOp::__anon49
X	hw5/cml/quaternion/quaternion.h	/^        X = order_type::X,$/;"	e	enum:cml::quaternion::__anon51
X	hw5/cml/quaternion/quaternion_expr.h	/^        X = order_type::X,$/;"	e	enum:cml::et::BinaryQuaternionOp::__anon56
X	hw5/cml/quaternion/quaternion_expr.h	/^        X = order_type::X,$/;"	e	enum:cml::et::UnaryQuaternionOp::__anon54
X	hw5/common.h	/^const vector3 X = vector3().cardinal(0);$/;"	v
Y	hw5/cml/quaternion.h	/^    enum { W, X, Y, Z };$/;"	e	enum:cml::scalar_first::__anon58
Y	hw5/cml/quaternion.h	/^    enum { X, Y, Z, W };$/;"	e	enum:cml::vector_first::__anon59
Y	hw5/cml/quaternion/conjugate.h	/^        Y = order_type::Y,$/;"	e	enum:cml::et::ConjugateOp::__anon47
Y	hw5/cml/quaternion/inverse.h	/^        Y = order_type::Y,$/;"	e	enum:cml::et::QuaternionInverseOp::__anon49
Y	hw5/cml/quaternion/quaternion.h	/^        Y = order_type::Y,$/;"	e	enum:cml::quaternion::__anon51
Y	hw5/cml/quaternion/quaternion_expr.h	/^        Y = order_type::Y,$/;"	e	enum:cml::et::BinaryQuaternionOp::__anon56
Y	hw5/cml/quaternion/quaternion_expr.h	/^        Y = order_type::Y,$/;"	e	enum:cml::et::UnaryQuaternionOp::__anon54
Y	hw5/common.h	/^const vector3 Y = vector3().cardinal(1);$/;"	v
Z	hw5/cml/quaternion.h	/^    enum { W, X, Y, Z };$/;"	e	enum:cml::scalar_first::__anon58
Z	hw5/cml/quaternion.h	/^    enum { X, Y, Z, W };$/;"	e	enum:cml::vector_first::__anon59
Z	hw5/cml/quaternion/conjugate.h	/^        Z = order_type::Z$/;"	e	enum:cml::et::ConjugateOp::__anon47
Z	hw5/cml/quaternion/inverse.h	/^        Z = order_type::Z$/;"	e	enum:cml::et::QuaternionInverseOp::__anon49
Z	hw5/cml/quaternion/quaternion.h	/^        Z = order_type::Z$/;"	e	enum:cml::quaternion::__anon51
Z	hw5/cml/quaternion/quaternion_expr.h	/^        Z = order_type::Z$/;"	e	enum:cml::et::BinaryQuaternionOp::__anon56
Z	hw5/cml/quaternion/quaternion_expr.h	/^        Z = order_type::Z$/;"	e	enum:cml::et::UnaryQuaternionOp::__anon54
Z	hw5/common.h	/^const vector3 Z = vector3().cardinal(2);$/;"	v
ZClip	hw5/cml/mathlib/helper.h	/^enum ZClip { z_clip_neg_one, z_clip_zero };$/;"	g	namespace:cml
_COMMON_H_	hw5/common.h	/^#define _COMMON_H_$/;"	d
_DO_MATRIX_SET_RESIZE	hw5/cml/matrix/class_ops.h	/^#define _DO_MATRIX_SET_RESIZE(/;"	d
_DO_VECTOR_SET_RESIZE	hw5/cml/vector/class_ops.h	/^#define _DO_VECTOR_SET_RESIZE(/;"	d
_D_	hw5/common.h	/^#define _D_ /;"	d
_D_	hw5/common.h	/^#define _D_$/;"	d
_MATERIAL_H_	hw5/material.h	/^#define _MATERIAL_H_$/;"	d
_OBJECT_H_	hw5/object.h	/^#define _OBJECT_H_$/;"	d
_RAY_TRACKER_H_	hw5/ray_tracer.h	/^#define _RAY_TRACKER_H_$/;"	d
_SSIZE_T_DEFINED	hw5/cml/core/common.h	/^#define _SSIZE_T_DEFINED$/;"	d
_dummy	hw5/cml/matrix/matrix_expr.h	/^    typename checked_size::check_type _dummy;$/;"	m	class:cml::et::BinaryMatrixOp
_dummy	hw5/cml/quaternion/quaternion_expr.h	/^    typename checked_size::check_type _dummy;$/;"	m	class:cml::et::BinaryQuaternionOp
_dummy	hw5/cml/vector/vector_expr.h	/^    typename checked_size::check_type _dummy;$/;"	m	class:cml::et::BinaryVectorOp
acos_safe	hw5/cml/util.h	/^T acos_safe(T theta) {$/;"	f	namespace:cml
allocator	hw5/cml/et/array_promotions.h	/^        ::rebind<promoted_scalar>::other allocator;$/;"	t	struct:cml::et::detail::promote
allocator_type	hw5/cml/core/dynamic_1D.h	/^    typedef typename Alloc::template rebind<Element>::other allocator_type;$/;"	t	class:cml::dynamic_1D
allocator_type	hw5/cml/core/dynamic_2D.h	/^    typedef typename Alloc::template rebind<Element>::other allocator_type;$/;"	t	class:cml::dynamic_2D
ambient	hw5/material.h	/^        vector3 ambient;$/;"	m	class:material
any_type	hw5/cml/core/meta/common.h	/^struct any_type {};$/;"	s	namespace:cml
area	hw5/triangle.h	/^        float area() const$/;"	f	class:triangle
arg_reference	hw5/cml/quaternion/inverse.h	/^    typedef typename arg_traits::const_reference arg_reference;$/;"	t	class:cml::et::QuaternionInverseOp
arg_traits	hw5/cml/quaternion/inverse.h	/^    typedef ExprTraits<ExprT> arg_traits;$/;"	t	class:cml::et::QuaternionInverseOp
arg_type	hw5/cml/matrix/matrix_expr.h	/^    typedef ExprT arg_type;$/;"	t	struct:cml::et::ExprTraits
arg_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef ExprT arg_type;$/;"	t	struct:cml::et::ExprTraits
arg_type	hw5/cml/quaternion/conjugate.h	/^    typedef ExprT arg_type;$/;"	t	struct:cml::et::ExprTraits
arg_type	hw5/cml/quaternion/inverse.h	/^    typedef ExprT arg_type;$/;"	t	struct:cml::et::ExprTraits
arg_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef ExprT arg_type;$/;"	t	struct:cml::et::ExprTraits
arg_type	hw5/cml/vector/vector_expr.h	/^    typedef ExprT arg_type;$/;"	t	struct:cml::et::ExprTraits
array_cols	hw5/cml/core/dynamic_2D.h	/^    enum { array_rows = -1, array_cols = -1 };$/;"	e	enum:cml::dynamic_2D::__anon4
array_cols	hw5/cml/core/external_2D.h	/^    enum { array_rows = -1, array_cols = -1 };$/;"	e	enum:cml::external_2D::__anon8
array_cols	hw5/cml/core/external_2D.h	/^    enum { array_rows = Rows, array_cols = Cols };$/;"	e	enum:cml::external_2D::__anon7
array_cols	hw5/cml/core/fixed_2D.h	/^    enum { array_rows = Rows, array_cols = Cols };$/;"	e	enum:cml::fixed_2D::__anon10
array_cols	hw5/cml/et/size_checking.h	/^            array_cols = LeftT::array_cols$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon25
array_cols	hw5/cml/et/size_checking.h	/^            array_cols = LeftT::array_cols$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon28
array_cols	hw5/cml/et/size_checking.h	/^            array_cols = RightT::array_cols$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon29
array_cols	hw5/cml/matrix/matrix_expr.h	/^        array_cols = result_type::array_cols$/;"	e	enum:cml::et::BinaryMatrixOp::__anon40
array_cols	hw5/cml/matrix/matrix_expr.h	/^    enum { array_rows = ExprT::array_rows, array_cols = ExprT::array_cols };$/;"	e	enum:cml::et::MatrixXpr::__anon38
array_cols	hw5/cml/matrix/matrix_expr.h	/^    enum { array_rows = ExprT::array_rows, array_cols = ExprT::array_cols };$/;"	e	enum:cml::et::UnaryMatrixOp::__anon39
array_cols	hw5/cml/matrix/matrix_promotions.h	/^            array_cols = right_type::array_size$/;"	e	enum:cml::et::MatrixPromote::MatrixPromoteHelper::__anon42
array_cols	hw5/cml/matrix/matrix_transpose.h	/^        array_cols = result_type::array_cols$/;"	e	enum:cml::et::MatrixTransposeOp::__anon45
array_data	hw5/cml/core/fixed_2D.h	/^        >::result array_data;$/;"	t	class:cml::fixed_2D
array_impl	hw5/cml/core/external_1D.h	/^    typedef value_type array_impl[Size];$/;"	t	class:cml::external_1D
array_impl	hw5/cml/core/fixed_1D.h	/^    typedef value_type array_impl[Size];$/;"	t	class:cml::fixed_1D
array_promotions_h	hw5/cml/et/array_promotions.h	/^#define array_promotions_h$/;"	d
array_rows	hw5/cml/core/dynamic_2D.h	/^    enum { array_rows = -1, array_cols = -1 };$/;"	e	enum:cml::dynamic_2D::__anon4
array_rows	hw5/cml/core/external_2D.h	/^    enum { array_rows = -1, array_cols = -1 };$/;"	e	enum:cml::external_2D::__anon8
array_rows	hw5/cml/core/external_2D.h	/^    enum { array_rows = Rows, array_cols = Cols };$/;"	e	enum:cml::external_2D::__anon7
array_rows	hw5/cml/core/fixed_2D.h	/^    enum { array_rows = Rows, array_cols = Cols };$/;"	e	enum:cml::fixed_2D::__anon10
array_rows	hw5/cml/et/size_checking.h	/^            array_rows = LeftT::array_rows,$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon25
array_rows	hw5/cml/et/size_checking.h	/^            array_rows = LeftT::array_rows,$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon28
array_rows	hw5/cml/et/size_checking.h	/^            array_rows = RightT::array_rows,$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon29
array_rows	hw5/cml/matrix/matrix_expr.h	/^        array_rows = result_type::array_rows,$/;"	e	enum:cml::et::BinaryMatrixOp::__anon40
array_rows	hw5/cml/matrix/matrix_expr.h	/^    enum { array_rows = ExprT::array_rows, array_cols = ExprT::array_cols };$/;"	e	enum:cml::et::MatrixXpr::__anon38
array_rows	hw5/cml/matrix/matrix_expr.h	/^    enum { array_rows = ExprT::array_rows, array_cols = ExprT::array_cols };$/;"	e	enum:cml::et::UnaryMatrixOp::__anon39
array_rows	hw5/cml/matrix/matrix_promotions.h	/^            array_rows = left_type::array_size,$/;"	e	enum:cml::et::MatrixPromote::MatrixPromoteHelper::__anon42
array_rows	hw5/cml/matrix/matrix_transpose.h	/^        array_rows = result_type::array_rows,$/;"	e	enum:cml::et::MatrixTransposeOp::__anon45
array_size	hw5/cml/core/dynamic_1D.h	/^    enum { array_size = -1 };$/;"	e	enum:cml::dynamic_1D::__anon3
array_size	hw5/cml/core/external_1D.h	/^    enum { array_size = -1 };$/;"	e	enum:cml::external_1D::__anon6
array_size	hw5/cml/core/external_1D.h	/^    enum { array_size = Size };$/;"	e	enum:cml::external_1D::__anon5
array_size	hw5/cml/core/fixed_1D.h	/^    enum { array_size = Size };$/;"	e	enum:cml::fixed_1D::__anon9
array_size	hw5/cml/et/size_checking.h	/^        enum { array_size = 4 };$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon33
array_size	hw5/cml/et/size_checking.h	/^        enum { array_size = 4 };$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon34
array_size	hw5/cml/et/size_checking.h	/^        enum { array_size = 4 };$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon35
array_size	hw5/cml/et/size_checking.h	/^        enum { array_size = 4 };$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon36
array_size	hw5/cml/et/size_checking.h	/^        enum { array_size = 4 };$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon37
array_size	hw5/cml/et/size_checking.h	/^        enum { array_size = LeftT::array_rows };$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon26
array_size	hw5/cml/et/size_checking.h	/^        enum { array_size = LeftT::array_size };$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon30
array_size	hw5/cml/et/size_checking.h	/^        enum { array_size = LeftT::array_size };$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon31
array_size	hw5/cml/et/size_checking.h	/^        enum { array_size = RightT::array_cols };$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon27
array_size	hw5/cml/et/size_checking.h	/^        enum { array_size = RightT::array_size };$/;"	e	enum:cml::et::GetCheckedSize::impl::__anon32
array_size	hw5/cml/matrix/matrix_rowcol.h	/^    enum { array_size = result_type::array_size };$/;"	e	enum:cml::et::MatrixColOp::__anon44
array_size	hw5/cml/matrix/matrix_rowcol.h	/^    enum { array_size = result_type::array_size };$/;"	e	enum:cml::et::MatrixRowOp::__anon43
array_size	hw5/cml/quaternion/conjugate.h	/^    enum { array_size = ExprT::array_size };$/;"	e	enum:cml::et::ConjugateOp::__anon46
array_size	hw5/cml/quaternion/inverse.h	/^    enum { array_size = ExprT::array_size };$/;"	e	enum:cml::et::QuaternionInverseOp::__anon48
array_size	hw5/cml/quaternion/quaternion.h	/^    enum { array_size = 4 };$/;"	e	enum:cml::quaternion::__anon50
array_size	hw5/cml/quaternion/quaternion_expr.h	/^    enum { array_size = 4 };$/;"	e	enum:cml::et::BinaryQuaternionOp::__anon55
array_size	hw5/cml/quaternion/quaternion_expr.h	/^    enum { array_size = ExprT::array_size };$/;"	e	enum:cml::et::QuaternionXpr::__anon52
array_size	hw5/cml/quaternion/quaternion_expr.h	/^    enum { array_size = ExprT::array_size };$/;"	e	enum:cml::et::UnaryQuaternionOp::__anon53
array_size	hw5/cml/vector/vector_expr.h	/^    enum { array_size = ExprT::array_size };$/;"	e	enum:cml::et::UnaryVectorOp::__anon63
array_size	hw5/cml/vector/vector_expr.h	/^    enum { array_size = ExprT::array_size };$/;"	e	enum:cml::et::VectorXpr::__anon62
array_size	hw5/cml/vector/vector_expr.h	/^    enum { array_size = result_type::array_size };$/;"	e	enum:cml::et::BinaryVectorOp::__anon64
array_type	hw5/cml/matrix/dynamic.h	/^    typedef dynamic_2D<Element,Layout,Alloc> array_type;$/;"	t	class:cml::matrix
array_type	hw5/cml/matrix/external.h	/^    typedef external_2D<Element,-1,-1,Layout> array_type;$/;"	t	class:cml::matrix
array_type	hw5/cml/matrix/external.h	/^    typedef external_2D<Element,Rows,Cols,Layout> array_type;$/;"	t	class:cml::matrix
array_type	hw5/cml/matrix/fixed.h	/^    typedef fixed_2D<Element,Rows,Cols,Layout> array_type;$/;"	t	class:cml::matrix
array_type	hw5/cml/vector/dynamic.h	/^    typedef dynamic_1D<Element,Alloc> array_type;$/;"	t	class:cml::vector
array_type	hw5/cml/vector/external.h	/^    typedef external_1D<Element,Size> array_type;$/;"	t	class:cml::vector
array_type	hw5/cml/vector/external.h	/^    typedef external_1D<Element> array_type;$/;"	t	class:cml::vector
array_type	hw5/cml/vector/fixed.h	/^    typedef fixed_1D<Element,Size> array_type;$/;"	t	class:cml::vector
as_vector	hw5/cml/quaternion/quaternion.h	/^    const vector_type& as_vector() const {$/;"	f	class:cml::quaternion
asin_safe	hw5/cml/util.h	/^T asin_safe(T theta) {$/;"	f	namespace:cml
assign	hw5/cml/quaternion/quaternion.h	/^    void assign(const value_type& a, const value_type& b,$/;"	f	class:cml::quaternion
assignable_tag	hw5/cml/et/tags.h	/^struct assignable_tag {};$/;"	s	namespace:cml::et
assignable_tag	hw5/cml/matrix/dynamic.h	/^    typedef cml::et::assignable_tag assignable_tag;$/;"	t	class:cml::matrix
assignable_tag	hw5/cml/matrix/external.h	/^    typedef cml::et::assignable_tag assignable_tag;$/;"	t	class:cml::matrix
assignable_tag	hw5/cml/matrix/fixed.h	/^    typedef cml::et::assignable_tag assignable_tag;$/;"	t	class:cml::matrix
assignable_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::BinaryMatrixOp
assignable_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::MatrixXpr
assignable_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::UnaryMatrixOp
assignable_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef typename expr_type::assignable_tag assignable_tag;$/;"	t	struct:cml::et::ExprTraits
assignable_tag	hw5/cml/matrix/matrix_traits.h	/^    typedef typename expr_type::assignable_tag assignable_tag;$/;"	t	struct:cml::et::ExprTraits
assignable_tag	hw5/cml/matrix/matrix_transpose.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::MatrixTransposeOp
assignable_tag	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename expr_type::assignable_tag assignable_tag;$/;"	t	struct:cml::et::ExprTraits
assignable_tag	hw5/cml/quaternion/conjugate.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::ConjugateOp
assignable_tag	hw5/cml/quaternion/conjugate.h	/^    typedef typename expr_type::assignable_tag assignable_tag;$/;"	t	struct:cml::et::ExprTraits
assignable_tag	hw5/cml/quaternion/inverse.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::QuaternionInverseOp
assignable_tag	hw5/cml/quaternion/inverse.h	/^    typedef typename expr_type::assignable_tag assignable_tag;$/;"	t	struct:cml::et::ExprTraits
assignable_tag	hw5/cml/quaternion/quaternion.h	/^    typedef cml::et::assignable_tag assignable_tag;$/;"	t	class:cml::quaternion
assignable_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::BinaryQuaternionOp
assignable_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::QuaternionXpr
assignable_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::UnaryQuaternionOp
assignable_tag	hw5/cml/quaternion/quaternion_traits.h	/^    typedef typename expr_type::assignable_tag assignable_tag;$/;"	t	struct:cml::et::ExprTraits
assignable_tag	hw5/cml/vector/dynamic.h	/^    typedef cml::et::assignable_tag assignable_tag;$/;"	t	class:cml::vector
assignable_tag	hw5/cml/vector/external.h	/^    typedef cml::et::assignable_tag assignable_tag;$/;"	t	class:cml::vector
assignable_tag	hw5/cml/vector/fixed.h	/^    typedef cml::et::assignable_tag assignable_tag;$/;"	t	class:cml::vector
assignable_tag	hw5/cml/vector/vector_expr.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::BinaryVectorOp
assignable_tag	hw5/cml/vector/vector_expr.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::UnaryVectorOp
assignable_tag	hw5/cml/vector/vector_expr.h	/^    typedef cml::et::not_assignable_tag assignable_tag;$/;"	t	class:cml::et::VectorXpr
assignable_tag	hw5/cml/vector/vector_expr.h	/^    typedef typename expr_type::assignable_tag assignable_tag;$/;"	t	struct:cml::et::ExprTraits
assignable_tag	hw5/cml/vector/vector_traits.h	/^    typedef typename expr_type::assignable_tag assignable_tag;$/;"	t	struct:cml::et::ExprTraits
autopromote_trait	hw5/cml/et/scalar_promotions.h	/^struct autopromote_trait {$/;"	s	namespace:cml::et::detail
axis	hw5/cml/mathlib/misc.h	/^vector< double, fixed<N> > axis(size_t i)$/;"	f	namespace:cml
axis_2D	hw5/cml/mathlib/misc.h	/^inline vector< double, fixed<2> > axis_2D(size_t i) {$/;"	f	namespace:cml
axis_3D	hw5/cml/mathlib/misc.h	/^inline vector< double, fixed<3> > axis_3D(size_t i) {$/;"	f	namespace:cml
axis_order_xy	hw5/cml/mathlib/helper.h	/^    axis_order_xy = axis_order_xyz, \/\/ 0x00 [0000]$/;"	e	enum:cml::AxisOrder2D
axis_order_xyz	hw5/cml/mathlib/helper.h	/^    axis_order_xyz = euler_order_xyz, \/\/ 0x00 [0000]$/;"	e	enum:cml::AxisOrder
axis_order_xzy	hw5/cml/mathlib/helper.h	/^    axis_order_xzy = euler_order_xzy, \/\/ 0x02 [0010]$/;"	e	enum:cml::AxisOrder
axis_order_yx	hw5/cml/mathlib/helper.h	/^    axis_order_yx = axis_order_yxz, \/\/ 0x06 [0110]$/;"	e	enum:cml::AxisOrder2D
axis_order_yxz	hw5/cml/mathlib/helper.h	/^    axis_order_yxz = euler_order_yxz, \/\/ 0x06 [0110]$/;"	e	enum:cml::AxisOrder
axis_order_yzx	hw5/cml/mathlib/helper.h	/^    axis_order_yzx = euler_order_yzx, \/\/ 0x04 [0100]$/;"	e	enum:cml::AxisOrder
axis_order_zxy	hw5/cml/mathlib/helper.h	/^    axis_order_zxy = euler_order_zxy, \/\/ 0x08 [1000]$/;"	e	enum:cml::AxisOrder
axis_order_zyx	hw5/cml/mathlib/helper.h	/^    axis_order_zyx = euler_order_zyx, \/\/ 0x0A [1010]$/;"	e	enum:cml::AxisOrder
basis_element	hw5/cml/matrix/dynamic.h	/^    value_type basis_element(size_t i, size_t j) const {$/;"	f	class:cml::matrix
basis_element	hw5/cml/matrix/dynamic.h	/^    value_type basis_element(size_t i, size_t j, col_basis) const {$/;"	f	class:cml::matrix
basis_element	hw5/cml/matrix/dynamic.h	/^    value_type basis_element(size_t i, size_t j, row_basis) const {$/;"	f	class:cml::matrix
basis_element	hw5/cml/matrix/external.h	/^    value_type basis_element(size_t i, size_t j) const {$/;"	f	class:cml::matrix
basis_element	hw5/cml/matrix/external.h	/^    value_type basis_element(size_t i, size_t j, col_basis) const {$/;"	f	class:cml::matrix
basis_element	hw5/cml/matrix/external.h	/^    value_type basis_element(size_t i, size_t j, row_basis) const {$/;"	f	class:cml::matrix
basis_element	hw5/cml/matrix/fixed.h	/^    value_type basis_element(size_t i, size_t j) const {$/;"	f	class:cml::matrix
basis_element	hw5/cml/matrix/fixed.h	/^    value_type basis_element(size_t i, size_t j, col_basis) const {$/;"	f	class:cml::matrix
basis_element	hw5/cml/matrix/fixed.h	/^    value_type basis_element(size_t i, size_t j, row_basis) const {$/;"	f	class:cml::matrix
basis_element	hw5/cml/matrix/matrix_expr.h	/^    value_type basis_element(size_t i, size_t j) const {$/;"	f	class:cml::et::MatrixXpr
basis_element	hw5/cml/matrix/matrix_expr.h	/^    value_type basis_element(size_t i, size_t j, col_basis) const {$/;"	f	class:cml::et::MatrixXpr
basis_element	hw5/cml/matrix/matrix_expr.h	/^    value_type basis_element(size_t i, size_t j, row_basis) const {$/;"	f	class:cml::et::MatrixXpr
basis_orient	hw5/cml/matrix/dynamic.h	/^    typedef BasisOrient basis_orient;$/;"	t	class:cml::matrix
basis_orient	hw5/cml/matrix/external.h	/^    typedef BasisOrient basis_orient;$/;"	t	class:cml::matrix
basis_orient	hw5/cml/matrix/fixed.h	/^    typedef BasisOrient basis_orient;$/;"	t	class:cml::matrix
basis_orient	hw5/cml/matrix/matrix_expr.h	/^    typedef typename result_type::basis_orient basis_orient;$/;"	t	class:cml::et::MatrixXpr
basis_orient	hw5/cml/matrix/matrix_promotions.h	/^        typedef CML_DEFAULT_BASIS_ORIENTATION basis_orient;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
bilerp	hw5/cml/mathlib/interpolation.h	/^bilerp(const T1& val00, const T2& val10,$/;"	f	namespace:cml
binary_expression	hw5/cml/et/tags.h	/^struct binary_expression {};$/;"	s	namespace:cml::et
calc_intersect	hw5/object.h	/^        std::pair<ray, ray> calc_intersect(const ray& in_ray, const float dist, bool from_in_to_out)$/;"	f	class:object
calc_local_illu	hw5/object.cpp	/^vector3 object::calc_local_illu(const point3& pt, const light& light, const vector3& u) const$/;"	f	class:object
cardinal	hw5/cml/vector/dynamic.h	/^    vector_type& cardinal(size_t i) {$/;"	f	class:cml::vector
cardinal	hw5/cml/vector/external.h	/^    vector_type& cardinal(size_t i) {$/;"	f	class:cml::vector
cardinal	hw5/cml/vector/fixed.h	/^    vector_type& cardinal(size_t i) {$/;"	f	class:cml::vector
cartesian_to_cylindrical	hw5/cml/mathlib/coord_conversion.h	/^cartesian_to_cylindrical(const VecT& v, Real& radius, Real& theta,$/;"	f	namespace:cml
cartesian_to_polar	hw5/cml/mathlib/coord_conversion.h	/^cartesian_to_polar(const VecT& v, Real& radius, Real& theta,$/;"	f	namespace:cml
cartesian_to_spherical	hw5/cml/mathlib/coord_conversion.h	/^cartesian_to_spherical(const VecT& v, Real& radius, Real& theta, Real& phi,$/;"	f	namespace:cml
check_type	hw5/cml/et/size_checking.h	/^    typedef impl<left_result,right_result> check_type;$/;"	t	struct:cml::et::GetCheckedSize
checked_size	hw5/cml/matrix/matrix_expr.h	/^    typedef GetCheckedSize<LeftT,RightT,size_tag> checked_size;$/;"	t	class:cml::et::BinaryMatrixOp
checked_size	hw5/cml/quaternion/quaternion_expr.h	/^    typedef GetCheckedSize<LeftT,RightT,size_tag> checked_size;$/;"	t	class:cml::et::BinaryQuaternionOp
checked_size	hw5/cml/vector/vector_expr.h	/^    typedef GetCheckedSize<LeftT,RightT,size_tag> checked_size;$/;"	t	class:cml::et::BinaryVectorOp
checking_h	hw5/cml/mathlib/checking.h	/^#define checking_h$/;"	d
clamp	hw5/cml/util.h	/^T clamp(T value, T min, T max) {$/;"	f	namespace:cml
cml	hw5/cml/constants.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/cml_assert.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/common.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/dynamic_1D.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/dynamic_2D.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/external_1D.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/external_2D.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/fixed_1D.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/fixed_2D.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/fwd.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/meta/common.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/meta/if.h	/^namespace cml {$/;"	n
cml	hw5/cml/core/meta/switch.h	/^namespace cml {$/;"	n
cml	hw5/cml/dynamic.h	/^namespace cml {$/;"	n
cml	hw5/cml/et/array_promotions.h	/^namespace cml {$/;"	n
cml	hw5/cml/et/scalar_ops.h	/^namespace cml {$/;"	n
cml	hw5/cml/et/scalar_promotions.h	/^namespace cml {$/;"	n
cml	hw5/cml/et/size_checking.h	/^namespace cml {$/;"	n
cml	hw5/cml/et/tags.h	/^namespace cml {$/;"	n
cml	hw5/cml/et/traits.h	/^namespace cml {$/;"	n
cml	hw5/cml/external.h	/^namespace cml {$/;"	n
cml	hw5/cml/fixed.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/checking.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/coord_conversion.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/epsilon.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/frustum.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/helper.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/interpolation.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/matrix_basis.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/matrix_concat.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/matrix_misc.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/matrix_ortho.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/matrix_projection.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/matrix_rotation.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/matrix_transform.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/matrix_translation.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/misc.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/picking.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/projection.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/quaternion_basis.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/quaternion_rotation.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/typedef.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/vector_angle.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/vector_misc.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/vector_ortho.h	/^namespace cml {$/;"	n
cml	hw5/cml/mathlib/vector_transform.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/determinant.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/dynamic.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/external.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/fixed.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/inverse.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/lu.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_comparison.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_expr.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_functions.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_mul.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_ops.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_print.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_promotions.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_rowcol.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_traits.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_transpose.h	/^namespace cml {$/;"	n
cml	hw5/cml/matrix/matrix_unroller.h	/^namespace cml {$/;"	n
cml	hw5/cml/matvec/matvec_mul.h	/^namespace cml {$/;"	n
cml	hw5/cml/matvec/matvec_promotions.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/conjugate.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/inverse.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/quaternion.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/quaternion_comparison.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/quaternion_dot.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/quaternion_expr.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/quaternion_functions.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/quaternion_mul.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/quaternion_ops.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/quaternion_print.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/quaternion_promotions.h	/^namespace cml {$/;"	n
cml	hw5/cml/quaternion/quaternion_traits.h	/^namespace cml {$/;"	n
cml	hw5/cml/util.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/dynamic.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/external.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/fixed.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/vector_comparison.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/vector_expr.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/vector_functions.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/vector_ops.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/vector_print.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/vector_products.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/vector_promotions.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/vector_traits.h	/^namespace cml {$/;"	n
cml	hw5/cml/vector/vector_unroller.h	/^namespace cml {$/;"	n
cml_assert_h	hw5/cml/core/cml_assert.h	/^#define cml_assert_h$/;"	d
cml_constants_h	hw5/cml/constants.h	/^#define cml_constants_h$/;"	d
cml_h	hw5/cml/cml.h	/^#define cml_h$/;"	d
cml_matrix_h	hw5/cml/matrix.h	/^#define cml_matrix_h$/;"	d
cml_meta_h	hw5/cml/core/cml_meta.h	/^#define cml_meta_h$/;"	d
cml_quaternion_h	hw5/cml/quaternion.h	/^#define cml_quaternion_h$/;"	d
cml_util_h	hw5/cml/util.h	/^#define cml_util_h$/;"	d
cml_vector_h	hw5/cml/vector.h	/^#define cml_vector_h$/;"	d
col	hw5/cml/matrix/matrix_rowcol.h	/^col(const et::MatrixXpr<XprT>& expr, size_t i)$/;"	f	namespace:cml
col	hw5/cml/matrix/matrix_rowcol.h	/^col(const matrix<E,AT,BO,L>& expr, size_t i)$/;"	f	namespace:cml
col_array_type	hw5/cml/core/dynamic_2D.h	/^    typedef dynamic_1D<Element,Alloc> col_array_type;$/;"	t	class:cml::dynamic_2D
col_array_type	hw5/cml/core/external_2D.h	/^    typedef dynamic_1D<Element, CML_DEFAULT_ARRAY_ALLOC> col_array_type;$/;"	t	class:cml::external_2D
col_array_type	hw5/cml/core/external_2D.h	/^    typedef fixed_1D<Element,Cols> col_array_type;$/;"	t	class:cml::external_2D
col_array_type	hw5/cml/core/fixed_2D.h	/^    typedef fixed_1D<Element,Cols> col_array_type;$/;"	t	class:cml::fixed_2D
col_basis	hw5/cml/core/common.h	/^struct col_basis {};$/;"	s	namespace:cml
col_major	hw5/cml/core/common.h	/^struct col_major {};$/;"	s	namespace:cml
col_major_array	hw5/cml/core/fixed_2D.h	/^    typedef Element col_major_array[Cols][Rows];$/;"	t	class:cml::fixed_2D
col_vector_type	hw5/cml/matrix/dynamic.h	/^    > col_vector_type;$/;"	t	class:cml::matrix
col_vector_type	hw5/cml/matrix/external.h	/^    > col_vector_type;$/;"	t	class:cml::matrix
col_vector_type	hw5/cml/matrix/fixed.h	/^    > col_vector_type;$/;"	t	class:cml::matrix
colatitude	hw5/cml/mathlib/helper.h	/^enum SphericalType { latitude, colatitude };$/;"	e	enum:cml::SphericalType
cols	hw5/cml/core/dynamic_2D.h	/^    size_t cols() const { return m_cols; }$/;"	f	class:cml::dynamic_2D
cols	hw5/cml/core/external_2D.h	/^    size_t cols() const { return m_cols; }$/;"	f	class:cml::external_2D
cols	hw5/cml/core/external_2D.h	/^    size_t cols() const { return size_t(array_cols); }$/;"	f	class:cml::external_2D
cols	hw5/cml/core/fixed_2D.h	/^    size_t cols() const { return size_t(array_cols); }$/;"	f	class:cml::fixed_2D
cols	hw5/cml/et/traits.h	/^    size_t cols(double) const { return 1; }$/;"	f	struct:cml::et::ExprTraits
cols	hw5/cml/et/traits.h	/^    size_t cols(float) const { return 1; }$/;"	f	struct:cml::et::ExprTraits
cols	hw5/cml/matrix/matrix_expr.h	/^    size_t cols() const {$/;"	f	class:cml::et::BinaryMatrixOp
cols	hw5/cml/matrix/matrix_expr.h	/^    size_t cols() const {$/;"	f	class:cml::et::MatrixXpr
cols	hw5/cml/matrix/matrix_expr.h	/^    size_t cols() const {$/;"	f	class:cml::et::UnaryMatrixOp
cols	hw5/cml/matrix/matrix_expr.h	/^    size_t cols(const expr_type& e) const { return e.cols(); }$/;"	f	struct:cml::et::ExprTraits
cols	hw5/cml/matrix/matrix_traits.h	/^    size_t cols(const expr_type& m) const { return m.cols(); }$/;"	f	struct:cml::et::ExprTraits
cols	hw5/cml/matrix/matrix_transpose.h	/^    size_t cols() const {$/;"	f	class:cml::et::MatrixTransposeOp
cols	hw5/cml/matrix/matrix_transpose.h	/^    size_t cols(const expr_type& e) const { return e.cols(); }$/;"	f	struct:cml::et::ExprTraits
conjugate	hw5/cml/quaternion/conjugate.h	/^conjugate(QUATXPR_ARG_TYPE arg)$/;"	f	namespace:cml
conjugate	hw5/cml/quaternion/conjugate.h	/^conjugate(const quaternion<E,AT,OT,CT>& arg)$/;"	f	namespace:cml
conjugate	hw5/cml/quaternion/quaternion.h	/^    quaternion_type& conjugate() {$/;"	f	class:cml::quaternion
conjugate_h	hw5/cml/quaternion/conjugate.h	/^#define conjugate_h$/;"	d
const_pointer	hw5/cml/core/dynamic_1D.h	/^    typedef typename allocator_type::const_pointer const_pointer; $/;"	t	class:cml::dynamic_1D
const_pointer	hw5/cml/core/dynamic_2D.h	/^    typedef typename allocator_type::const_pointer const_pointer; $/;"	t	class:cml::dynamic_2D
const_pointer	hw5/cml/core/external_1D.h	/^    typedef const Element* const_pointer;$/;"	t	class:cml::external_1D
const_pointer	hw5/cml/core/external_2D.h	/^    typedef const Element* const_pointer;$/;"	t	class:cml::external_2D
const_pointer	hw5/cml/core/fixed_1D.h	/^    typedef const Element* const_pointer;$/;"	t	class:cml::fixed_1D
const_pointer	hw5/cml/core/fixed_2D.h	/^    typedef const Element* const_pointer;$/;"	t	class:cml::fixed_2D
const_reference	hw5/cml/core/dynamic_1D.h	/^    typedef typename allocator_type::const_reference const_reference; $/;"	t	class:cml::dynamic_1D
const_reference	hw5/cml/core/dynamic_2D.h	/^    typedef typename allocator_type::const_reference const_reference; $/;"	t	class:cml::dynamic_2D
const_reference	hw5/cml/core/external_1D.h	/^    typedef const Element& const_reference;$/;"	t	class:cml::external_1D
const_reference	hw5/cml/core/external_2D.h	/^    typedef const Element& const_reference;$/;"	t	class:cml::external_2D
const_reference	hw5/cml/core/fixed_1D.h	/^    typedef const Element& const_reference;$/;"	t	class:cml::fixed_1D
const_reference	hw5/cml/core/fixed_2D.h	/^    typedef const Element& const_reference;$/;"	t	class:cml::fixed_2D
const_reference	hw5/cml/et/traits.h	/^    typedef double const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/et/traits.h	/^    typedef float const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/matrix/dynamic.h	/^    typedef typename array_type::const_reference const_reference;$/;"	t	class:cml::matrix
const_reference	hw5/cml/matrix/external.h	/^    typedef typename array_type::const_reference const_reference;$/;"	t	class:cml::matrix
const_reference	hw5/cml/matrix/fixed.h	/^    typedef typename array_type::const_reference const_reference;$/;"	t	class:cml::matrix
const_reference	hw5/cml/matrix/matrix_expr.h	/^    typedef typename expr_type::expr_const_reference const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename expr_type::expr_const_reference const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/matrix/matrix_traits.h	/^    typedef typename expr_type::expr_const_reference const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename expr_type::expr_const_reference const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/quaternion/conjugate.h	/^    typedef typename expr_type::expr_const_reference const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/quaternion/inverse.h	/^    typedef typename expr_type::expr_const_reference const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/quaternion/quaternion.h	/^    typedef typename vector_type::const_reference const_reference;$/;"	t	class:cml::quaternion
const_reference	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_type::expr_const_reference const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/quaternion/quaternion_traits.h	/^    typedef typename expr_type::expr_const_reference const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/vector/dynamic.h	/^    typedef typename array_type::const_reference const_reference;$/;"	t	class:cml::vector
const_reference	hw5/cml/vector/external.h	/^    typedef typename array_type::const_reference const_reference;$/;"	t	class:cml::vector
const_reference	hw5/cml/vector/fixed.h	/^    typedef typename array_type::const_reference const_reference;$/;"	t	class:cml::vector
const_reference	hw5/cml/vector/vector_expr.h	/^    typedef typename expr_type::expr_const_reference const_reference;$/;"	t	struct:cml::et::ExprTraits
const_reference	hw5/cml/vector/vector_traits.h	/^    typedef typename expr_type::expr_const_reference const_reference;$/;"	t	struct:cml::et::ExprTraits
constants	hw5/cml/constants.h	/^struct constants {$/;"	s	namespace:cml
constantsd	hw5/cml/mathlib/typedef.h	/^typedef constants<double> constantsd;$/;"	t	namespace:cml
constantsf	hw5/cml/mathlib/typedef.h	/^typedef constants<float>  constantsf;$/;"	t	namespace:cml
coord_conversion_h	hw5/cml/mathlib/coord_conversion.h	/^#define coord_conversion_h$/;"	d
coordinate_type	hw5/cml/vector/dynamic.h	/^    typedef Element coordinate_type;$/;"	t	class:cml::vector
coordinate_type	hw5/cml/vector/external.h	/^    typedef Element coordinate_type;$/;"	t	class:cml::vector
coordinate_type	hw5/cml/vector/fixed.h	/^    typedef Element coordinate_type;$/;"	t	class:cml::vector
copy	hw5/cml/core/dynamic_1D.h	/^    void copy(const dynamic_1D& other) {$/;"	f	class:cml::dynamic_1D
copy	hw5/cml/core/dynamic_2D.h	/^    void copy(const dynamic_2D& other) {$/;"	f	class:cml::dynamic_2D
core_common_h	hw5/cml/core/common.h	/^#define core_common_h$/;"	d
core_fwd_h	hw5/cml/core/fwd.h	/^#define core_fwd_h$/;"	d
core_meta_common_h	hw5/cml/core/meta/common.h	/^#define core_meta_common_h$/;"	d
cross	hw5/cml/vector/vector_products.h	/^cross(const LeftT& left, const RightT& right)$/;"	f	namespace:cml
cross_cardinal	hw5/cml/mathlib/vector_misc.h	/^cross_cardinal(const VecT& v, size_t i)$/;"	f	namespace:cml
cross_cardinal	hw5/cml/mathlib/vector_misc.h	/^cross_cardinal(size_t i, const VecT& v)$/;"	f	namespace:cml
cross_type	hw5/cml/quaternion/quaternion.h	/^    typedef Cross cross_type;$/;"	t	class:cml::quaternion
cross_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::cross_type cross_type;$/;"	t	class:cml::et::QuaternionXpr
cub	hw5/cml/util.h	/^T cub(T value) {$/;"	f	namespace:cml
cube	hw5/triangle.h	/^        bool cube;      \/\/ cube polygon$/;"	m	class:triangle
cyclic_permutation	hw5/cml/util.h	/^inline void cyclic_permutation($/;"	f	namespace:cml
cyclic_permutation	hw5/cml/util.h	/^inline void cyclic_permutation(size_t first, size_t& i, size_t& j) {$/;"	f	namespace:cml
cyclic_permutation	hw5/cml/util.h	/^inline void cyclic_permutation(size_t first, size_t& i, size_t& j, size_t& k)$/;"	f	namespace:cml
cylindrical_to_cartesian	hw5/cml/mathlib/coord_conversion.h	/^cylindrical_to_cartesian($/;"	f	namespace:cml
data	hw5/cml/core/dynamic_1D.h	/^    const_pointer data() const { return &m_data[0]; }$/;"	f	class:cml::dynamic_1D
data	hw5/cml/core/dynamic_1D.h	/^    pointer data() { return &m_data[0]; }$/;"	f	class:cml::dynamic_1D
data	hw5/cml/core/dynamic_2D.h	/^    const_pointer data() const { return &m_data[0]; }$/;"	f	class:cml::dynamic_2D
data	hw5/cml/core/dynamic_2D.h	/^    pointer data() { return &m_data[0]; }$/;"	f	class:cml::dynamic_2D
data	hw5/cml/core/external_1D.h	/^    const_pointer data() const { return m_data; }$/;"	f	class:cml::external_1D
data	hw5/cml/core/external_1D.h	/^    pointer data() { return m_data; }$/;"	f	class:cml::external_1D
data	hw5/cml/core/external_2D.h	/^    const_pointer data() const { return m_data; }$/;"	f	class:cml::external_2D
data	hw5/cml/core/external_2D.h	/^    pointer data() { return m_data; }$/;"	f	class:cml::external_2D
data	hw5/cml/core/fixed_1D.h	/^    const_pointer data() const { return &m_data[0]; }$/;"	f	class:cml::fixed_1D
data	hw5/cml/core/fixed_1D.h	/^    pointer data() { return &m_data[0]; }$/;"	f	class:cml::fixed_1D
data	hw5/cml/core/fixed_2D.h	/^    const_pointer data() const { return &m_data[0][0]; }$/;"	f	class:cml::fixed_2D
data	hw5/cml/core/fixed_2D.h	/^    pointer data() { return &m_data[0][0]; }$/;"	f	class:cml::fixed_2D
data	hw5/cml/quaternion/quaternion.h	/^    const typename vector_type::pointer data() const { return m_q.data(); }$/;"	f	class:cml::quaternion
data	hw5/cml/quaternion/quaternion.h	/^    typename vector_type::pointer data() { return m_q.data(); }$/;"	f	class:cml::quaternion
deduce_layout	hw5/cml/et/array_promotions.h	/^template<typename LeftL, typename RightL> struct deduce_layout {$/;"	s	namespace:cml::et::detail
defaultPromotion	hw5/cml/et/scalar_promotions.h	/^      defaultPromotion = knowT1butNotT2 ? false :$/;"	e	enum:cml::et::detail::promote_trait::__anon23
defaults_h	hw5/cml/defaults.h	/^#define defaults_h$/;"	d
deg	hw5/cml/util.h	/^T deg(T theta) {$/;"	f	namespace:cml
deg_per_rad	hw5/cml/constants.h	/^    static Float deg_per_rad() { return Float(180.\/M_PI); }$/;"	f	struct:cml::constants
depth_range_from_viewport_matrix	hw5/cml/mathlib/picking.h	/^depth_range_from_viewport_matrix(const MatT& viewport, Real& n, Real& f)$/;"	f	namespace:cml::detail
dest_traits	hw5/cml/matrix/matrix_unroller.h	/^    typedef ExprTraits<matrix_type> dest_traits;$/;"	t	class:cml::et::detail::MatrixAssignmentUnroller
dest_traits	hw5/cml/vector/vector_unroller.h	/^    typedef ExprTraits<vector_type> dest_traits;$/;"	t	class:cml::et::detail::VectorAssignmentUnroller
destroy	hw5/cml/core/dynamic_1D.h	/^    void destroy() {$/;"	f	class:cml::dynamic_1D
destroy	hw5/cml/core/dynamic_2D.h	/^    void destroy() {$/;"	f	class:cml::dynamic_2D
detail	hw5/cml/et/array_promotions.h	/^namespace detail {$/;"	n	namespace:cml::et
detail	hw5/cml/et/scalar_promotions.h	/^namespace detail {$/;"	n	namespace:cml::et
detail	hw5/cml/et/size_checking.h	/^namespace detail {$/;"	n	namespace:cml::et
detail	hw5/cml/mathlib/checking.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/mathlib/frustum.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/mathlib/helper.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/mathlib/interpolation.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/mathlib/matrix_concat.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/mathlib/matrix_rotation.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/mathlib/picking.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/mathlib/projection.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/mathlib/quaternion_rotation.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/mathlib/vector_transform.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/matrix/determinant.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/matrix/inverse.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/matrix/lu.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/matrix/matrix_comparison.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/matrix/matrix_expr.h	/^namespace detail {$/;"	n	namespace:cml::et
detail	hw5/cml/matrix/matrix_mul.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/matrix/matrix_unroller.h	/^namespace detail {$/;"	n	namespace:cml::et
detail	hw5/cml/matvec/matvec_mul.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/quaternion/quaternion_comparison.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/quaternion/quaternion_dot.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/quaternion/quaternion_mul.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/vector/vector_comparison.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/vector/vector_expr.h	/^namespace detail {$/;"	n	namespace:cml::et
detail	hw5/cml/vector/vector_products.h	/^namespace detail {$/;"	n	namespace:cml
detail	hw5/cml/vector/vector_unroller.h	/^namespace detail {$/;"	n	namespace:cml::et
determinant	hw5/cml/matrix/determinant.h	/^determinant(const MatT& M, dynamic_size_tag)$/;"	f	namespace:cml::detail
determinant	hw5/cml/matrix/determinant.h	/^determinant(const MatT& M, fixed_size_tag)$/;"	f	namespace:cml::detail
determinant	hw5/cml/matrix/determinant.h	/^determinant(const et::MatrixXpr<XprT>& e)$/;"	f	namespace:cml
determinant	hw5/cml/matrix/determinant.h	/^determinant(const matrix<E,AT,BO,L>& M)$/;"	f	namespace:cml
determinant_f	hw5/cml/matrix/determinant.h	/^struct determinant_f$/;"	s	namespace:cml::detail
determinant_f	hw5/cml/matrix/determinant.h	/^struct determinant_f<MatT,2>$/;"	s	namespace:cml::detail
determinant_f	hw5/cml/matrix/determinant.h	/^struct determinant_f<MatT,3>$/;"	s	namespace:cml::detail
determinant_f	hw5/cml/matrix/determinant.h	/^struct determinant_f<MatT,4>$/;"	s	namespace:cml::detail
determinant_h	hw5/cml/matrix/determinant.h	/^#define determinant_h$/;"	d
diffuse	hw5/material.h	/^        vector3 diffuse;$/;"	m	class:material
dimension	hw5/cml/vector/external.h	/^    enum { dimension = Size };$/;"	e	enum:cml::vector::__anon60
dimension	hw5/cml/vector/fixed.h	/^    enum { dimension = Size };$/;"	e	enum:cml::vector::__anon61
dimension_tag	hw5/cml/core/dynamic_1D.h	/^    typedef oned_tag dimension_tag;$/;"	t	class:cml::dynamic_1D
dimension_tag	hw5/cml/core/dynamic_2D.h	/^    typedef twod_tag dimension_tag;$/;"	t	class:cml::dynamic_2D
dimension_tag	hw5/cml/core/external_1D.h	/^    typedef oned_tag dimension_tag;$/;"	t	class:cml::external_1D
dimension_tag	hw5/cml/core/external_2D.h	/^    typedef twod_tag dimension_tag;$/;"	t	class:cml::external_2D
dimension_tag	hw5/cml/core/fixed_1D.h	/^    typedef oned_tag dimension_tag;$/;"	t	class:cml::fixed_1D
dimension_tag	hw5/cml/core/fixed_2D.h	/^    typedef twod_tag dimension_tag;$/;"	t	class:cml::fixed_2D
dir	hw5/object.h	/^        vector3 dir;$/;"	m	class:light
dir	hw5/object.h	/^    vector3 dir;$/;"	m	class:ray
display	hw5/hw5.cpp	/^void display()$/;"	f
display	hw5/triangle.h	/^        void display() const$/;"	f	class:triangle
dist	hw5/object.h	/^    const float dist; \/\/ ray.org + dist*ray.dir$/;"	m	struct:intersect_info
divide_by_w	hw5/cml/mathlib/projection.h	/^divide_by_w(vector< E,fixed<4> >& v) {$/;"	f	namespace:cml::detail
dot	hw5/cml/quaternion/quaternion_dot.h	/^dot(QUATXPR_ARG_TYPE p, const quaternion<E,AT,OT,CT>& q)$/;"	f	namespace:cml
dot	hw5/cml/quaternion/quaternion_dot.h	/^dot(const quaternion<E,AT,OT,CT>& p, QUATXPR_ARG_TYPE q)$/;"	f	namespace:cml
dot	hw5/cml/quaternion/quaternion_dot.h	/^dot(const quaternion<E1,AT1,OT,CT>& p,$/;"	f	namespace:cml
dot	hw5/cml/vector/vector_products.h	/^dot(const LeftT& left, const RightT& right)$/;"	f	namespace:cml
dynamic_1D	hw5/cml/core/dynamic_1D.h	/^    dynamic_1D() : m_size(0), m_data(0), m_alloc() {}$/;"	f	class:cml::dynamic_1D
dynamic_1D	hw5/cml/core/dynamic_1D.h	/^    dynamic_1D(const dynamic_1D& other)$/;"	f	class:cml::dynamic_1D
dynamic_1D	hw5/cml/core/dynamic_1D.h	/^    explicit dynamic_1D(size_t size) : m_size(0), m_data(0), m_alloc() {$/;"	f	class:cml::dynamic_1D
dynamic_1D	hw5/cml/core/dynamic_1D.h	/^class dynamic_1D$/;"	c	namespace:cml
dynamic_1D_h	hw5/cml/core/dynamic_1D.h	/^#define dynamic_1D_h$/;"	d
dynamic_2D	hw5/cml/core/dynamic_2D.h	/^    dynamic_2D() : m_rows(0), m_cols(0), m_data(0), m_alloc() {}$/;"	f	class:cml::dynamic_2D
dynamic_2D	hw5/cml/core/dynamic_2D.h	/^    dynamic_2D(const dynamic_2D& other)$/;"	f	class:cml::dynamic_2D
dynamic_2D	hw5/cml/core/dynamic_2D.h	/^    explicit dynamic_2D(size_t rows, size_t cols) $/;"	f	class:cml::dynamic_2D
dynamic_2D	hw5/cml/core/dynamic_2D.h	/^class dynamic_2D$/;"	c	namespace:cml
dynamic_2D_h	hw5/cml/core/dynamic_2D.h	/^#define dynamic_2D_h$/;"	d
dynamic_h	hw5/cml/dynamic.h	/^#define dynamic_h$/;"	d
dynamic_matrix_h	hw5/cml/matrix/dynamic.h	/^#define dynamic_matrix_h$/;"	d
dynamic_memory_tag	hw5/cml/core/common.h	/^struct dynamic_memory_tag {};$/;"	s	namespace:cml
dynamic_size_tag	hw5/cml/core/common.h	/^struct dynamic_size_tag {};$/;"	s	namespace:cml
dynamic_vector_h	hw5/cml/vector/dynamic.h	/^#define dynamic_vector_h$/;"	d
e	hw5/cml/constants.h	/^    static Float e() { return Float(M_E); }$/;"	f	struct:cml::constants
epsilon	hw5/cml/mathlib/epsilon.h	/^struct epsilon$/;"	s	namespace:cml
epsilon_h	hw5/cml/mathlib/epsilon.h	/^#define epsilon_h$/;"	d
epsilond	hw5/cml/mathlib/typedef.h	/^typedef epsilon<double> epsilond;$/;"	t	namespace:cml
epsilonf	hw5/cml/mathlib/typedef.h	/^typedef epsilon<float>  epsilonf;$/;"	t	namespace:cml
equal_or_fail	hw5/cml/et/size_checking.h	/^    template<typename V> V equal_or_fail(V left, V right) const {$/;"	f	struct:cml::et::GetCheckedSize
et	hw5/cml/et/array_promotions.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/et/scalar_ops.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/et/scalar_promotions.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/et/size_checking.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/et/tags.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/et/traits.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/matrix/matrix_expr.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/matrix/matrix_promotions.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/matrix/matrix_rowcol.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/matrix/matrix_traits.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/matrix/matrix_transpose.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/matrix/matrix_unroller.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/matvec/matvec_promotions.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/quaternion/conjugate.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/quaternion/inverse.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/quaternion/quaternion_expr.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/quaternion/quaternion_promotions.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/quaternion/quaternion_traits.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/vector/vector_expr.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/vector/vector_promotions.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/vector/vector_traits.h	/^namespace et {$/;"	n	namespace:cml
et	hw5/cml/vector/vector_unroller.h	/^namespace et {$/;"	n	namespace:cml
et_tags_h	hw5/cml/et/tags.h	/^#define et_tags_h$/;"	d
euler_order_xyx	hw5/cml/mathlib/helper.h	/^    euler_order_xyx, \/\/ 0x01 [0001]$/;"	e	enum:cml::EulerOrder
euler_order_xyz	hw5/cml/mathlib/helper.h	/^    euler_order_xyz, \/\/ 0x00 [0000]$/;"	e	enum:cml::EulerOrder
euler_order_xzx	hw5/cml/mathlib/helper.h	/^    euler_order_xzx, \/\/ 0x03 [0011]$/;"	e	enum:cml::EulerOrder
euler_order_xzy	hw5/cml/mathlib/helper.h	/^    euler_order_xzy, \/\/ 0x02 [0010]$/;"	e	enum:cml::EulerOrder
euler_order_yxy	hw5/cml/mathlib/helper.h	/^    euler_order_yxy, \/\/ 0x07 [0111]$/;"	e	enum:cml::EulerOrder
euler_order_yxz	hw5/cml/mathlib/helper.h	/^    euler_order_yxz, \/\/ 0x06 [0110]$/;"	e	enum:cml::EulerOrder
euler_order_yzx	hw5/cml/mathlib/helper.h	/^    euler_order_yzx, \/\/ 0x04 [0100]$/;"	e	enum:cml::EulerOrder
euler_order_yzy	hw5/cml/mathlib/helper.h	/^    euler_order_yzy, \/\/ 0x05 [0101]$/;"	e	enum:cml::EulerOrder
euler_order_zxy	hw5/cml/mathlib/helper.h	/^    euler_order_zxy, \/\/ 0x08 [1000]$/;"	e	enum:cml::EulerOrder
euler_order_zxz	hw5/cml/mathlib/helper.h	/^    euler_order_zxz, \/\/ 0x09 [1001]$/;"	e	enum:cml::EulerOrder
euler_order_zyx	hw5/cml/mathlib/helper.h	/^    euler_order_zyx, \/\/ 0x0A [1010]$/;"	e	enum:cml::EulerOrder
euler_order_zyz	hw5/cml/mathlib/helper.h	/^    euler_order_zyz  \/\/ 0x0B [1011]$/;"	e	enum:cml::EulerOrder
exp	hw5/cml/quaternion/quaternion.h	/^    temporary_type exp($/;"	f	class:cml::quaternion
exp	hw5/cml/quaternion/quaternion_expr.h	/^    temporary_type exp($/;"	f	class:cml::et::BinaryQuaternionOp
exp	hw5/cml/quaternion/quaternion_expr.h	/^    temporary_type exp($/;"	f	class:cml::et::QuaternionXpr
exp	hw5/cml/quaternion/quaternion_expr.h	/^    temporary_type exp($/;"	f	class:cml::et::UnaryQuaternionOp
exp	hw5/cml/quaternion/quaternion_functions.h	/^typename QuatT::temporary_type exp($/;"	f	namespace:cml
expr_ary	hw5/cml/matrix/matrix_expr.h	/^    typedef unary_expression expr_ary;$/;"	t	class:cml::et::UnaryMatrixOp
expr_ary	hw5/cml/matrix/matrix_rowcol.h	/^    typedef unary_expression expr_ary;$/;"	t	class:cml::et::MatrixColOp
expr_ary	hw5/cml/matrix/matrix_rowcol.h	/^    typedef unary_expression expr_ary;$/;"	t	class:cml::et::MatrixRowOp
expr_ary	hw5/cml/matrix/matrix_transpose.h	/^    typedef unary_expression expr_ary;$/;"	t	class:cml::et::MatrixTransposeOp
expr_ary	hw5/cml/quaternion/conjugate.h	/^    typedef unary_expression expr_ary;$/;"	t	class:cml::et::ConjugateOp
expr_ary	hw5/cml/quaternion/inverse.h	/^    typedef unary_expression expr_ary;$/;"	t	class:cml::et::QuaternionInverseOp
expr_ary	hw5/cml/quaternion/quaternion_expr.h	/^    typedef binary_expression expr_ary;$/;"	t	class:cml::et::BinaryQuaternionOp
expr_ary	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename ExprT::expr_ary expr_ary;$/;"	t	class:cml::et::QuaternionXpr
expr_ary	hw5/cml/quaternion/quaternion_expr.h	/^    typedef unary_expression expr_ary;$/;"	t	class:cml::et::UnaryQuaternionOp
expr_ary	hw5/cml/vector/vector_expr.h	/^    typedef binary_expression expr_ary;$/;"	t	class:cml::et::BinaryVectorOp
expr_ary	hw5/cml/vector/vector_expr.h	/^    typedef typename ExprT::expr_ary expr_ary;$/;"	t	class:cml::et::VectorXpr
expr_ary	hw5/cml/vector/vector_expr.h	/^    typedef unary_expression expr_ary;$/;"	t	class:cml::et::UnaryVectorOp
expr_const_reference	hw5/cml/matrix/dynamic.h	/^    typedef const matrix_type& expr_const_reference;$/;"	t	class:cml::matrix
expr_const_reference	hw5/cml/matrix/external.h	/^    typedef const matrix_type& expr_const_reference;$/;"	t	class:cml::matrix
expr_const_reference	hw5/cml/matrix/fixed.h	/^    typedef const matrix_type& expr_const_reference;$/;"	t	class:cml::matrix
expr_const_reference	hw5/cml/matrix/matrix_expr.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::BinaryMatrixOp
expr_const_reference	hw5/cml/matrix/matrix_expr.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::MatrixXpr
expr_const_reference	hw5/cml/matrix/matrix_expr.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::UnaryMatrixOp
expr_const_reference	hw5/cml/matrix/matrix_rowcol.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::MatrixColOp
expr_const_reference	hw5/cml/matrix/matrix_rowcol.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::MatrixRowOp
expr_const_reference	hw5/cml/matrix/matrix_transpose.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::MatrixTransposeOp
expr_const_reference	hw5/cml/quaternion/conjugate.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::ConjugateOp
expr_const_reference	hw5/cml/quaternion/inverse.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::QuaternionInverseOp
expr_const_reference	hw5/cml/quaternion/quaternion.h	/^    typedef const quaternion_type& expr_const_reference;$/;"	t	class:cml::quaternion
expr_const_reference	hw5/cml/quaternion/quaternion_expr.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::BinaryQuaternionOp
expr_const_reference	hw5/cml/quaternion/quaternion_expr.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::QuaternionXpr
expr_const_reference	hw5/cml/quaternion/quaternion_expr.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::UnaryQuaternionOp
expr_const_reference	hw5/cml/vector/dynamic.h	/^    typedef const vector_type& expr_const_reference;$/;"	t	class:cml::vector
expr_const_reference	hw5/cml/vector/external.h	/^    typedef const vector_type& expr_const_reference;$/;"	t	class:cml::vector
expr_const_reference	hw5/cml/vector/fixed.h	/^    typedef const vector_type& expr_const_reference;$/;"	t	class:cml::vector
expr_const_reference	hw5/cml/vector/vector_expr.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::BinaryVectorOp
expr_const_reference	hw5/cml/vector/vector_expr.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::UnaryVectorOp
expr_const_reference	hw5/cml/vector/vector_expr.h	/^    typedef expr_type expr_const_reference;$/;"	t	class:cml::et::VectorXpr
expr_leaf_tag	hw5/cml/et/tags.h	/^struct expr_leaf_tag {};$/;"	s	namespace:cml::et
expr_node_tag	hw5/cml/et/tags.h	/^struct expr_node_tag {};$/;"	s	namespace:cml::et
expr_reference	hw5/cml/matrix/dynamic.h	/^    typedef matrix_type& expr_reference;$/;"	t	class:cml::matrix
expr_reference	hw5/cml/matrix/external.h	/^    typedef matrix_type& expr_reference;$/;"	t	class:cml::matrix
expr_reference	hw5/cml/matrix/fixed.h	/^    typedef matrix_type& expr_reference;$/;"	t	class:cml::matrix
expr_reference	hw5/cml/matrix/matrix_expr.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::MatrixXpr
expr_reference	hw5/cml/matrix/matrix_expr.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::UnaryMatrixOp
expr_reference	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::MatrixColOp
expr_reference	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::MatrixRowOp
expr_reference	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::MatrixTransposeOp
expr_reference	hw5/cml/quaternion/conjugate.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::ConjugateOp
expr_reference	hw5/cml/quaternion/inverse.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::QuaternionInverseOp
expr_reference	hw5/cml/quaternion/quaternion.h	/^    typedef quaternion_type& expr_reference;$/;"	t	class:cml::quaternion
expr_reference	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::QuaternionXpr
expr_reference	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::UnaryQuaternionOp
expr_reference	hw5/cml/vector/dynamic.h	/^    typedef vector_type& expr_reference;$/;"	t	class:cml::vector
expr_reference	hw5/cml/vector/external.h	/^    typedef vector_type& expr_reference;$/;"	t	class:cml::vector
expr_reference	hw5/cml/vector/fixed.h	/^    typedef vector_type& expr_reference;$/;"	t	class:cml::vector
expr_reference	hw5/cml/vector/vector_expr.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::UnaryVectorOp
expr_reference	hw5/cml/vector/vector_expr.h	/^    typedef typename expr_traits::const_reference expr_reference;$/;"	t	class:cml::et::VectorXpr
expr_traits	hw5/cml/matrix/matrix_expr.h	/^    typedef ExprTraits<ExprT> expr_traits;$/;"	t	class:cml::et::MatrixXpr
expr_traits	hw5/cml/matrix/matrix_expr.h	/^    typedef ExprTraits<ExprT> expr_traits;$/;"	t	class:cml::et::UnaryMatrixOp
expr_traits	hw5/cml/matrix/matrix_rowcol.h	/^    typedef ExprTraits<ExprT> expr_traits;$/;"	t	class:cml::et::MatrixColOp
expr_traits	hw5/cml/matrix/matrix_rowcol.h	/^    typedef ExprTraits<ExprT> expr_traits;$/;"	t	class:cml::et::MatrixRowOp
expr_traits	hw5/cml/matrix/matrix_transpose.h	/^    typedef ExprTraits<ExprT> expr_traits;$/;"	t	class:cml::et::MatrixTransposeOp
expr_traits	hw5/cml/quaternion/conjugate.h	/^    typedef ExprTraits<ExprT> expr_traits;$/;"	t	class:cml::et::ConjugateOp
expr_traits	hw5/cml/quaternion/inverse.h	/^    typedef ExprTraits<subexpression_type> expr_traits;$/;"	t	class:cml::et::QuaternionInverseOp
expr_traits	hw5/cml/quaternion/quaternion_expr.h	/^    typedef ExprTraits<ExprT> expr_traits;$/;"	t	class:cml::et::QuaternionXpr
expr_traits	hw5/cml/quaternion/quaternion_expr.h	/^    typedef ExprTraits<ExprT> expr_traits;$/;"	t	class:cml::et::UnaryQuaternionOp
expr_traits	hw5/cml/vector/vector_expr.h	/^    typedef ExprTraits<ExprT> expr_traits;$/;"	t	class:cml::et::UnaryVectorOp
expr_traits	hw5/cml/vector/vector_expr.h	/^    typedef ExprTraits<ExprT> expr_traits;$/;"	t	class:cml::et::VectorXpr
expr_type	hw5/cml/et/traits.h	/^    typedef double expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/et/traits.h	/^    typedef float expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/matrix/dynamic.h	/^    typedef matrix_type expr_type;$/;"	t	class:cml::matrix
expr_type	hw5/cml/matrix/external.h	/^    typedef matrix_type expr_type;$/;"	t	class:cml::matrix
expr_type	hw5/cml/matrix/fixed.h	/^    typedef matrix_type expr_type;$/;"	t	class:cml::matrix
expr_type	hw5/cml/matrix/matrix_expr.h	/^    typedef BinaryMatrixOp<LeftT,RightT,OpT> expr_type;$/;"	t	class:cml::et::BinaryMatrixOp
expr_type	hw5/cml/matrix/matrix_expr.h	/^    typedef BinaryMatrixOp<LeftT,RightT,OpT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/matrix/matrix_expr.h	/^    typedef MatrixXpr<ExprT> expr_type;$/;"	t	class:cml::et::MatrixXpr
expr_type	hw5/cml/matrix/matrix_expr.h	/^    typedef MatrixXpr<ExprT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/matrix/matrix_expr.h	/^    typedef UnaryMatrixOp<ExprT,OpT> expr_type;$/;"	t	class:cml::et::UnaryMatrixOp
expr_type	hw5/cml/matrix/matrix_expr.h	/^    typedef UnaryMatrixOp<ExprT,OpT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef MatrixColOp<ExprT> expr_type;$/;"	t	class:cml::et::MatrixColOp
expr_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef MatrixColOp<ExprT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef MatrixRowOp<ExprT> expr_type;$/;"	t	class:cml::et::MatrixRowOp
expr_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef MatrixRowOp<ExprT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/matrix/matrix_traits.h	/^    typedef typename cml::matrix<E,AT,BO,L> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/matrix/matrix_transpose.h	/^    typedef MatrixTransposeOp<ExprT> expr_type;$/;"	t	class:cml::et::MatrixTransposeOp
expr_type	hw5/cml/matrix/matrix_transpose.h	/^    typedef MatrixTransposeOp<ExprT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/quaternion/conjugate.h	/^    typedef ConjugateOp<ExprT> expr_type;$/;"	t	class:cml::et::ConjugateOp
expr_type	hw5/cml/quaternion/conjugate.h	/^    typedef ConjugateOp<ExprT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/quaternion/inverse.h	/^    typedef QuaternionInverseOp<ExprT> expr_type;$/;"	t	class:cml::et::QuaternionInverseOp
expr_type	hw5/cml/quaternion/inverse.h	/^    typedef QuaternionInverseOp<ExprT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/quaternion/quaternion.h	/^    typedef quaternion_type expr_type;$/;"	t	class:cml::quaternion
expr_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef BinaryQuaternionOp<LeftT,RightT,OpT> expr_type;$/;"	t	class:cml::et::BinaryQuaternionOp
expr_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef BinaryQuaternionOp<LeftT,RightT,OpT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef QuaternionXpr<ExprT> expr_type;$/;"	t	class:cml::et::QuaternionXpr
expr_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef QuaternionXpr<ExprT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef UnaryQuaternionOp<ExprT,OpT> expr_type;$/;"	t	class:cml::et::UnaryQuaternionOp
expr_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef UnaryQuaternionOp<ExprT,OpT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/quaternion/quaternion_traits.h	/^    typedef typename cml::quaternion<E,AT,OT,CT>::expr_type expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/vector/dynamic.h	/^    typedef vector_type expr_type;$/;"	t	class:cml::vector
expr_type	hw5/cml/vector/external.h	/^    typedef vector_type expr_type;$/;"	t	class:cml::vector
expr_type	hw5/cml/vector/fixed.h	/^    typedef vector_type expr_type;$/;"	t	class:cml::vector
expr_type	hw5/cml/vector/vector_expr.h	/^    typedef BinaryVectorOp<LeftT,RightT,OpT> expr_type;$/;"	t	class:cml::et::BinaryVectorOp
expr_type	hw5/cml/vector/vector_expr.h	/^    typedef BinaryVectorOp<LeftT,RightT,OpT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/vector/vector_expr.h	/^    typedef UnaryVectorOp<ExprT,OpT> expr_type;$/;"	t	class:cml::et::UnaryVectorOp
expr_type	hw5/cml/vector/vector_expr.h	/^    typedef UnaryVectorOp<ExprT,OpT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/vector/vector_expr.h	/^    typedef VectorXpr<ExprT> expr_type;$/;"	t	class:cml::et::VectorXpr
expr_type	hw5/cml/vector/vector_expr.h	/^    typedef VectorXpr<ExprT> expr_type;$/;"	t	struct:cml::et::ExprTraits
expr_type	hw5/cml/vector/vector_traits.h	/^    typedef typename cml::vector<E,AT>::expr_type expr_type;$/;"	t	struct:cml::et::ExprTraits
expression	hw5/cml/matrix/matrix_expr.h	/^    expr_reference expression() const { return m_expr; }$/;"	f	class:cml::et::MatrixXpr
expression	hw5/cml/matrix/matrix_rowcol.h	/^    expr_reference expression() const { return m_expr; }$/;"	f	class:cml::et::MatrixColOp
expression	hw5/cml/matrix/matrix_rowcol.h	/^    expr_reference expression() const { return m_expr; }$/;"	f	class:cml::et::MatrixRowOp
expression	hw5/cml/matrix/matrix_transpose.h	/^    expr_reference expression() const { return m_expr; }$/;"	f	class:cml::et::MatrixTransposeOp
expression	hw5/cml/quaternion/conjugate.h	/^    expr_reference expression() const { return m_expr; }$/;"	f	class:cml::et::ConjugateOp
expression	hw5/cml/quaternion/inverse.h	/^    expr_reference expression() const { return m_expr; }$/;"	f	class:cml::et::QuaternionInverseOp
expression	hw5/cml/quaternion/quaternion_expr.h	/^    expr_reference expression() const { return m_expr; }$/;"	f	class:cml::et::QuaternionXpr
expression	hw5/cml/quaternion/quaternion_expr.h	/^    expr_reference expression() const { return m_expr; }$/;"	f	class:cml::et::UnaryQuaternionOp
expression	hw5/cml/vector/vector_expr.h	/^    expr_reference expression() const { return m_expr; }$/;"	f	class:cml::et::UnaryVectorOp
expression	hw5/cml/vector/vector_expr.h	/^    expr_reference expression() const { return m_expr; }$/;"	f	class:cml::et::VectorXpr
external	hw5/cml/external.h	/^template<int Dim1 = -1, int Dim2 = -1> struct external {$/;"	s	namespace:cml
external_1D	hw5/cml/core/external_1D.h	/^    external_1D(pointer const ptr)$/;"	f	class:cml::external_1D
external_1D	hw5/cml/core/external_1D.h	/^    external_1D(pointer const ptr, size_t size)$/;"	f	class:cml::external_1D
external_1D	hw5/cml/core/external_1D.h	/^class external_1D$/;"	c	namespace:cml
external_1D	hw5/cml/core/external_1D.h	/^class external_1D<Element,-1>$/;"	c	namespace:cml
external_1D_h	hw5/cml/core/external_1D.h	/^#define external_1D_h$/;"	d
external_2D	hw5/cml/core/external_2D.h	/^    external_2D(pointer const ptr, size_t rows, size_t cols)$/;"	f	class:cml::external_2D
external_2D	hw5/cml/core/external_2D.h	/^    external_2D(value_type const ptr[Rows][Cols])$/;"	f	class:cml::external_2D
external_2D	hw5/cml/core/external_2D.h	/^    external_2D(value_type* const ptr) : m_data(ptr) {}$/;"	f	class:cml::external_2D
external_2D	hw5/cml/core/external_2D.h	/^class external_2D$/;"	c	namespace:cml
external_2D	hw5/cml/core/external_2D.h	/^class external_2D<Element,-1,-1,Layout>$/;"	c	namespace:cml
external_2D_h	hw5/cml/core/external_2D.h	/^#define external_2D_h$/;"	d
external_h	hw5/cml/external.h	/^#define external_h$/;"	d
external_matrix_h	hw5/cml/matrix/external.h	/^#define external_matrix_h$/;"	d
external_memory_tag	hw5/cml/core/common.h	/^struct external_memory_tag {};$/;"	s	namespace:cml
external_vector_h	hw5/cml/vector/external.h	/^#define external_vector_h$/;"	d
extract_frustum_planes	hw5/cml/mathlib/frustum.h	/^extract_frustum_planes($/;"	f	namespace:cml
extract_near_frustum_plane	hw5/cml/mathlib/frustum.h	/^extract_near_frustum_plane($/;"	f	namespace:cml
false_type	hw5/cml/core/meta/common.h	/^struct false_type {};$/;"	s	namespace:cml
first	hw5/cml/core/meta/common.h	/^    typedef T1 first;$/;"	t	struct:cml::type_pair
first	hw5/cml/core/meta/common.h	/^    typedef T1 first;$/;"	t	struct:cml::type_quad
fixed	hw5/cml/fixed.h	/^template<int Dim1 = -1, int Dim2 = -1> struct fixed {$/;"	s	namespace:cml
fixed_1D	hw5/cml/core/fixed_1D.h	/^    fixed_1D() {}$/;"	f	class:cml::fixed_1D
fixed_1D	hw5/cml/core/fixed_1D.h	/^class fixed_1D$/;"	c	namespace:cml
fixed_1D_h	hw5/cml/core/fixed_1D.h	/^#define fixed_1D_h$/;"	d
fixed_2D	hw5/cml/core/fixed_2D.h	/^    fixed_2D() {}$/;"	f	class:cml::fixed_2D
fixed_2D	hw5/cml/core/fixed_2D.h	/^class fixed_2D$/;"	c	namespace:cml
fixed_2D_h	hw5/cml/core/fixed_2D.h	/^#define fixed_2D_h$/;"	d
fixed_h	hw5/cml/fixed.h	/^#define fixed_h$/;"	d
fixed_matrix_h	hw5/cml/matrix/fixed.h	/^#define fixed_matrix_h$/;"	d
fixed_memory_tag	hw5/cml/core/common.h	/^struct fixed_memory_tag {};$/;"	s	namespace:cml
fixed_size_tag	hw5/cml/core/common.h	/^struct fixed_size_tag {};$/;"	s	namespace:cml
fixed_vector_h	hw5/cml/vector/fixed.h	/^#define fixed_vector_h$/;"	d
flag	hw5/object.h	/^    bool flag;$/;"	m	class:ray
fourth	hw5/cml/core/meta/common.h	/^    typedef T3 fourth;$/;"	t	struct:cml::type_quad
fov_to_zoom	hw5/cml/util.h	/^T fov_to_zoom(T fov) {$/;"	f	namespace:cml
frustum_h	hw5/cml/mathlib/frustum.h	/^#define frustum_h$/;"	d
g_amb_light	hw5/ray_tracer.h	/^        vector3 g_amb_light;$/;"	m	class:scene
generator_type	hw5/cml/core/dynamic_1D.h	/^    typedef dynamic<Alloc> generator_type;$/;"	t	class:cml::dynamic_1D
generator_type	hw5/cml/core/dynamic_2D.h	/^    typedef dynamic<Alloc> generator_type;$/;"	t	class:cml::dynamic_2D
generator_type	hw5/cml/core/external_1D.h	/^    typedef external<> generator_type;$/;"	t	class:cml::external_1D
generator_type	hw5/cml/core/external_1D.h	/^    typedef external<Size,-1> generator_type;$/;"	t	class:cml::external_1D
generator_type	hw5/cml/core/external_2D.h	/^    typedef external<> generator_type;$/;"	t	class:cml::external_2D
generator_type	hw5/cml/core/external_2D.h	/^    typedef external<Rows,Cols> generator_type;$/;"	t	class:cml::external_2D
generator_type	hw5/cml/core/fixed_1D.h	/^    typedef fixed<Size,-1> generator_type;$/;"	t	class:cml::fixed_1D
generator_type	hw5/cml/core/fixed_2D.h	/^    typedef fixed<Rows,Cols> generator_type;$/;"	t	class:cml::fixed_2D
generator_type	hw5/cml/matrix/dynamic.h	/^    typedef dynamic<Alloc> generator_type;$/;"	t	class:cml::matrix
generator_type	hw5/cml/matrix/external.h	/^    typedef external<> generator_type;$/;"	t	class:cml::matrix
generator_type	hw5/cml/matrix/external.h	/^    typedef external<Rows,Cols> generator_type;$/;"	t	class:cml::matrix
generator_type	hw5/cml/matrix/fixed.h	/^    typedef fixed<Rows,Cols> generator_type;$/;"	t	class:cml::matrix
generator_type	hw5/cml/quaternion/quaternion.h	/^    typedef typename ArrayType::template rebind<4>::other generator_type;$/;"	t	class:cml::quaternion
generator_type	hw5/cml/vector/dynamic.h	/^    typedef dynamic<Alloc> generator_type;$/;"	t	class:cml::vector
generator_type	hw5/cml/vector/external.h	/^    typedef external<> generator_type;$/;"	t	class:cml::vector
generator_type	hw5/cml/vector/external.h	/^    typedef external<Size> generator_type;$/;"	t	class:cml::vector
generator_type	hw5/cml/vector/fixed.h	/^    typedef fixed<Size> generator_type;$/;"	t	class:cml::vector
get	hw5/cml/et/traits.h	/^    value_type get(double v, size_t) const { return v; }$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/et/traits.h	/^    value_type get(double v, size_t, size_t) const { return v; }$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/et/traits.h	/^    value_type get(float v, size_t) const { return v; }$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/et/traits.h	/^    value_type get(float v, size_t, size_t) const { return v; }$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/matrix/matrix_expr.h	/^    value_type get(const expr_type& e, size_t i, size_t j) const {$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/matrix/matrix_rowcol.h	/^    value_type get(const expr_type& v, size_t i) const { return v[i]; }$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/matrix/matrix_traits.h	/^    value_type get(const expr_type& m, size_t i, size_t j) const {$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/matrix/matrix_transpose.h	/^    value_type get(const expr_type& m, size_t i, size_t j) const {$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/quaternion/conjugate.h	/^    value_type get(const expr_type& v, size_t i) const { return v[i]; }$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/quaternion/inverse.h	/^    value_type get(const expr_type& v, size_t i) const { return v[i]; }$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/quaternion/quaternion_expr.h	/^    value_type get(const expr_type& v, size_t i) const { return v[i]; }$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/quaternion/quaternion_traits.h	/^    value_type get(const expr_type& v, size_t i) const { return v[i]; }$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/vector/vector_expr.h	/^    value_type get(const expr_type& v, size_t i) const { return v[i]; }$/;"	f	struct:cml::et::ExprTraits
get	hw5/cml/vector/vector_traits.h	/^    value_type get(const expr_type& v, size_t i) const { return v[i]; }$/;"	f	struct:cml::et::ExprTraits
get_element	hw5/cml/core/dynamic_2D.h	/^    const_reference get_element(size_t row, size_t col, col_major) const {$/;"	f	class:cml::dynamic_2D
get_element	hw5/cml/core/dynamic_2D.h	/^    const_reference get_element(size_t row, size_t col, row_major) const {$/;"	f	class:cml::dynamic_2D
get_element	hw5/cml/core/dynamic_2D.h	/^    reference get_element(size_t row, size_t col, col_major) {$/;"	f	class:cml::dynamic_2D
get_element	hw5/cml/core/dynamic_2D.h	/^    reference get_element(size_t row, size_t col, row_major) {$/;"	f	class:cml::dynamic_2D
get_element	hw5/cml/core/external_2D.h	/^    const_reference get_element(size_t row, size_t col, col_major) const {$/;"	f	class:cml::external_2D
get_element	hw5/cml/core/external_2D.h	/^    const_reference get_element(size_t row, size_t col, row_major) const {$/;"	f	class:cml::external_2D
get_element	hw5/cml/core/external_2D.h	/^    reference get_element(size_t row, size_t col, col_major) {$/;"	f	class:cml::external_2D
get_element	hw5/cml/core/external_2D.h	/^    reference get_element(size_t row, size_t col, row_major) {$/;"	f	class:cml::external_2D
get_element	hw5/cml/core/fixed_2D.h	/^    const_reference get_element(size_t row, size_t col, col_major) const {$/;"	f	class:cml::fixed_2D
get_element	hw5/cml/core/fixed_2D.h	/^    const_reference get_element(size_t row, size_t col, row_major) const {$/;"	f	class:cml::fixed_2D
get_element	hw5/cml/core/fixed_2D.h	/^    reference get_element(size_t row, size_t col, col_major) {$/;"	f	class:cml::fixed_2D
get_element	hw5/cml/core/fixed_2D.h	/^    reference get_element(size_t row, size_t col, row_major) {$/;"	f	class:cml::fixed_2D
get_frustum_corners	hw5/cml/mathlib/frustum.h	/^get_frustum_corners(Real planes[6][4], vector<E,A> corners[8])$/;"	f	namespace:cml
get_hit_dist	hw5/object.h	/^        std::pair<float, float> get_hit_dist(const ray& ray) const$/;"	f	class:light
get_hit_dist	hw5/object.h	/^        std::pair<float, float> get_hit_dist(const ray& ray) const$/;"	f	class:sphere
get_normal	hw5/object.h	/^        vector3 get_normal(const point3& pt) const { return (pt - pos).normalize(); }$/;"	f	class:light
get_normal	hw5/object.h	/^        vector3 get_normal(const point3& pt) const { return (pt - pos).normalize(); }$/;"	f	class:sphere
get_normal	hw5/triangle.h	/^        vector3 get_normal() const$/;"	f	class:triangle
get_pos	hw5/object.h	/^        point3 get_pos() const { return pos; }$/;"	f	class:object
get_reflect	hw5/common.h	/^inline vector3 get_reflect(const vector3& n, const vector3& u)$/;"	f
get_refract	hw5/common.h	/^inline vector3 get_refract(const vector3& n, const vector3& u, const float refr_idx_in, const float refr_idx_refr)$/;"	f
hack_actual_size	hw5/cml/matrix/matrix_unroller.h	/^    matrix_size hack_actual_size($/;"	f	class:cml::et::detail::MatrixAssignmentUnroller
helper	hw5/cml/core/meta/common.h	/^    template<typename Q, typename Dummy> struct helper {$/;"	s	struct:cml::remove_const
helper	hw5/cml/core/meta/common.h	/^    template<typename Q, typename Dummy> struct helper {$/;"	s	struct:cml::remove_reference
helper	hw5/cml/core/meta/common.h	/^    template<typename Q> struct helper<Q&, void> {$/;"	s	struct:cml::remove_reference
helper	hw5/cml/core/meta/common.h	/^    template<typename Q> struct helper<const Q&, void> {$/;"	s	struct:cml::remove_reference
helper	hw5/cml/core/meta/common.h	/^    template<typename Q> struct helper<const Q, void> {$/;"	s	struct:cml::remove_const
helper_h	hw5/cml/mathlib/helper.h	/^#define helper_h$/;"	d
identity	hw5/cml/mathlib/misc.h	/^matrix< double, fixed<N,N>, row_basis, row_major > identity()$/;"	f	namespace:cml
identity	hw5/cml/matrix/dynamic.h	/^    matrix_type& identity() {$/;"	f	class:cml::matrix
identity	hw5/cml/matrix/external.h	/^    matrix_type& identity() {$/;"	f	class:cml::matrix
identity	hw5/cml/matrix/fixed.h	/^    matrix_type& identity() {$/;"	f	class:cml::matrix
identity	hw5/cml/matrix/matrix_functions.h	/^identity(const matrix<E,AT,BO,L>& m)$/;"	f	namespace:cml
identity	hw5/cml/quaternion/quaternion.h	/^    quaternion_type& identity() {$/;"	f	class:cml::quaternion
identity	hw5/cml/quaternion/quaternion_functions.h	/^identity(const quaternion<E,AT,OT,CT>& arg)$/;"	f	namespace:cml
identity_2x2	hw5/cml/mathlib/misc.h	/^inline matrix< double, fixed<2,2>, row_basis, row_major > identity_2x2() {$/;"	f	namespace:cml
identity_3x3	hw5/cml/mathlib/misc.h	/^inline matrix< double, fixed<3,3>, row_basis, row_major > identity_3x3() {$/;"	f	namespace:cml
identity_4x4	hw5/cml/mathlib/misc.h	/^inline matrix< double, fixed<4,4>, row_basis, row_major > identity_4x4() {$/;"	f	namespace:cml
identity_transform	hw5/cml/mathlib/matrix_misc.h	/^identity_transform(matrix<E,A,B,L>& m)$/;"	f	namespace:cml
identity_transform	hw5/cml/mathlib/misc.h	/^matrix< double, fixed<N,M>, row_basis, row_major > identity_transform()$/;"	f	namespace:cml
identity_transform_2x3	hw5/cml/mathlib/misc.h	/^inline matrix< double,fixed<2,3>,col_basis,col_major > identity_transform_2x3() {$/;"	f	namespace:cml
identity_transform_3x2	hw5/cml/mathlib/misc.h	/^inline matrix< double,fixed<3,2>,row_basis,row_major > identity_transform_3x2() {$/;"	f	namespace:cml
identity_transform_3x4	hw5/cml/mathlib/misc.h	/^inline matrix< double,fixed<3,4>,col_basis,col_major > identity_transform_3x4() {$/;"	f	namespace:cml
identity_transform_4x3	hw5/cml/mathlib/misc.h	/^inline matrix< double,fixed<4,3>,row_basis,row_major > identity_transform_4x3() {$/;"	f	namespace:cml
image	hw5/ray_tracer.h	/^        vector3 image[IMG_WIDTH][IMG_HEIGHT];$/;"	m	class:ray_tracer
imaginary	hw5/cml/quaternion/conjugate.h	/^    imaginary_type imaginary() const {$/;"	f	class:cml::et::ConjugateOp
imaginary	hw5/cml/quaternion/inverse.h	/^    imaginary_type imaginary() const {$/;"	f	class:cml::et::QuaternionInverseOp
imaginary	hw5/cml/quaternion/quaternion.h	/^    imaginary_type imaginary() const {$/;"	f	class:cml::quaternion
imaginary	hw5/cml/quaternion/quaternion_expr.h	/^    imaginary_type imaginary() const {$/;"	f	class:cml::et::BinaryQuaternionOp
imaginary	hw5/cml/quaternion/quaternion_expr.h	/^    imaginary_type imaginary() const {$/;"	f	class:cml::et::QuaternionXpr
imaginary	hw5/cml/quaternion/quaternion_expr.h	/^    imaginary_type imaginary() const {$/;"	f	class:cml::et::UnaryQuaternionOp
imaginary	hw5/cml/quaternion/quaternion_functions.h	/^imaginary(const et::QuaternionXpr<XprT>& e)$/;"	f	namespace:cml
imaginary	hw5/cml/quaternion/quaternion_functions.h	/^imaginary(const quaternion<E,AT,OT,CT>& q)$/;"	f	namespace:cml
imaginary_type	hw5/cml/quaternion/conjugate.h	/^    typedef typename vector_type::subvector_type imaginary_type;$/;"	t	class:cml::et::ConjugateOp
imaginary_type	hw5/cml/quaternion/inverse.h	/^    typedef typename vector_type::subvector_type imaginary_type;$/;"	t	class:cml::et::QuaternionInverseOp
imaginary_type	hw5/cml/quaternion/quaternion.h	/^    typedef typename vector_temporary::subvector_type imaginary_type;$/;"	t	class:cml::quaternion
imaginary_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_type::imaginary_type imaginary_type;$/;"	t	struct:cml::et::ExprTraits
imaginary_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename vector_type::subvector_type imaginary_type;$/;"	t	class:cml::et::BinaryQuaternionOp
imaginary_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename vector_type::subvector_type imaginary_type;$/;"	t	class:cml::et::QuaternionXpr
imaginary_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename vector_type::subvector_type imaginary_type;$/;"	t	class:cml::et::UnaryQuaternionOp
impl	hw5/cml/et/size_checking.h	/^    struct impl<quaternion_result_tag,quaternion_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<matrix_result_tag,matrix_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<matrix_result_tag,scalar_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<matrix_result_tag,vector_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<quaternion_result_tag,scalar_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<quaternion_result_tag,vector_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<scalar_result_tag,matrix_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<scalar_result_tag,quaternion_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<scalar_result_tag,vector_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<vector_result_tag,matrix_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<vector_result_tag,quaternion_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<vector_result_tag,scalar_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
impl	hw5/cml/et/size_checking.h	/^    template<class X> struct impl<vector_result_tag,vector_result_tag,X> {$/;"	s	struct:cml::et::GetCheckedSize
in_range	hw5/cml/util.h	/^bool in_range(T value, T min, T max) {$/;"	f	namespace:cml
in_ray	hw5/ray_tracer.h	/^    ray in_ray;$/;"	m	class:ray_tree_node
index_of_max	hw5/cml/util.h	/^size_t index_of_max(T a, T b) {$/;"	f	namespace:cml
index_of_max	hw5/cml/util.h	/^size_t index_of_max(T a, T b, T c) {$/;"	f	namespace:cml
index_of_max_abs	hw5/cml/util.h	/^size_t index_of_max_abs(T a, T b) {$/;"	f	namespace:cml
index_of_max_abs	hw5/cml/util.h	/^size_t index_of_max_abs(T a, T b, T c) {$/;"	f	namespace:cml
index_of_min	hw5/cml/util.h	/^size_t index_of_min(T a, T b) {$/;"	f	namespace:cml
index_of_min	hw5/cml/util.h	/^size_t index_of_min(T a, T b, T c) {$/;"	f	namespace:cml
index_of_min_abs	hw5/cml/util.h	/^size_t index_of_min_abs(T a, T b) {$/;"	f	namespace:cml
index_of_min_abs	hw5/cml/util.h	/^size_t index_of_min_abs(T a, T b, T c) {$/;"	f	namespace:cml
init	hw5/hw5.cpp	/^void init(void)$/;"	f
intensity	hw5/object.h	/^        vector3 intensity;$/;"	m	class:light
interpolation_h	hw5/cml/mathlib/interpolation.h	/^#define interpolation_h$/;"	d
intersect_info	hw5/object.h	/^    intersect_info(const float dist, const point3& pt, const vector3& refl, const vector3& refr)$/;"	f	struct:intersect_info
intersect_info	hw5/object.h	/^struct intersect_info$/;"	s
intersect_planes	hw5/cml/mathlib/frustum.h	/^intersect_planes(Real p1[4], Real p2[4], Real p3[4])$/;"	f	namespace:cml::detail
inv_pi	hw5/cml/constants.h	/^    static Float inv_pi()      { return Float(1.\/M_PI); }$/;"	f	struct:cml::constants
inv_sqrt	hw5/cml/util.h	/^T inv_sqrt(T value) {$/;"	f	namespace:cml
inv_two_pi	hw5/cml/constants.h	/^    static Float inv_two_pi()  { return Float(1.\/(2.*M_PI)); }$/;"	f	struct:cml::constants
inverse	hw5/cml/matrix/dynamic.h	/^    matrix_type& inverse() {$/;"	f	class:cml::matrix
inverse	hw5/cml/matrix/external.h	/^    matrix_type& inverse() {$/;"	f	class:cml::matrix
inverse	hw5/cml/matrix/fixed.h	/^    matrix_type& inverse() {$/;"	f	class:cml::matrix
inverse	hw5/cml/matrix/inverse.h	/^inverse(const MatT& M, dynamic_size_tag\/*, bool force_NxN*\/)$/;"	f	namespace:cml::detail
inverse	hw5/cml/matrix/inverse.h	/^inverse(const MatT& M, fixed_size_tag\/*, bool force_NxN*\/)$/;"	f	namespace:cml::detail
inverse	hw5/cml/matrix/inverse.h	/^inverse(const et::MatrixXpr<XprT>& e\/*, bool force_NxN = false*\/)$/;"	f	namespace:cml
inverse	hw5/cml/matrix/inverse.h	/^inverse(const matrix<E,AT,BO,L>& M\/*, bool force_NxN = false*\/)$/;"	f	namespace:cml
inverse	hw5/cml/quaternion/inverse.h	/^inverse(QUATXPR_ARG_TYPE arg)$/;"	f	namespace:cml
inverse	hw5/cml/quaternion/inverse.h	/^inverse(const quaternion<E,AT,OrderT,CrossT>& arg)$/;"	f	namespace:cml
inverse	hw5/cml/quaternion/quaternion.h	/^    quaternion_type& inverse() {$/;"	f	class:cml::quaternion
inverse_f	hw5/cml/matrix/inverse.h	/^struct inverse_f$/;"	s	namespace:cml::detail
inverse_f	hw5/cml/matrix/inverse.h	/^struct inverse_f<MatT,2>$/;"	s	namespace:cml::detail
inverse_f	hw5/cml/matrix/inverse.h	/^struct inverse_f<MatT,3>$/;"	s	namespace:cml::detail
inverse_f	hw5/cml/matrix/inverse.h	/^struct inverse_f<MatT,4>$/;"	s	namespace:cml::detail
is_false	hw5/cml/core/meta/common.h	/^    enum { is_true = false, is_false = true };$/;"	e	enum:cml::same_type::__anon11
is_false	hw5/cml/core/meta/common.h	/^    enum { is_true = true, is_false = false };$/;"	e	enum:cml::same_type::__anon12
is_false	hw5/cml/core/meta/common.h	/^    enum { is_true = true, is_false = false };$/;"	e	enum:cml::same_type::__anon13
is_false	hw5/cml/core/meta/common.h	/^    enum { is_true = true, is_false = false };$/;"	e	enum:cml::same_type::__anon14
is_false	hw5/cml/core/meta/common.h	/^    enum { is_true = true, is_false = false };$/;"	e	enum:cml::same_type::__anon15
is_true	hw5/cml/core/meta/common.h	/^    enum { is_true = false, is_false = true };$/;"	e	enum:cml::same_type::__anon11
is_true	hw5/cml/core/meta/common.h	/^    enum { is_true = true, is_false = false };$/;"	e	enum:cml::same_type::__anon12
is_true	hw5/cml/core/meta/common.h	/^    enum { is_true = true, is_false = false };$/;"	e	enum:cml::same_type::__anon13
is_true	hw5/cml/core/meta/common.h	/^    enum { is_true = true, is_false = false };$/;"	e	enum:cml::same_type::__anon14
is_true	hw5/cml/core/meta/common.h	/^    enum { is_true = true, is_false = false };$/;"	e	enum:cml::same_type::__anon15
is_true	hw5/cml/core/meta/common.h	/^template<> struct is_true<true> {$/;"	s	namespace:cml
is_true	hw5/cml/core/meta/common.h	/^template<bool B> struct is_true {$/;"	s	namespace:cml
is_true	hw5/cml/core/meta/if.h	/^    enum { is_true = false };$/;"	e	enum:cml::select_if::__anon17
is_true	hw5/cml/core/meta/if.h	/^    enum { is_true = true };$/;"	e	enum:cml::select_if::__anon16
is_true	hw5/cml/matrix/matrix_expr.h	/^    enum { is_true = (same_type<left_result,et::matrix_result_tag>::is_true$/;"	e	enum:cml::et::MatrixExpressions::__anon41
is_true	hw5/cml/quaternion/quaternion_expr.h	/^    enum { is_true = (same_type<left_result,et::quaternion_result_tag>::is_true$/;"	e	enum:cml::et::QuaternionExpressions::__anon57
is_true	hw5/cml/vector/vector_expr.h	/^    enum { is_true = (same_type<left_result,et::vector_result_tag>::is_true$/;"	e	enum:cml::et::VectorExpressions::__anon65
knowBothRanks	hw5/cml/et/scalar_promotions.h	/^      knowBothRanks =$/;"	e	enum:cml::et::detail::promote_trait::__anon23
knowPrecisionRank	hw5/cml/et/scalar_promotions.h	/^           knowPrecisionRank = 0 };$/;"	e	enum:cml::et::detail::precision_trait::__anon22
knowT1butNotT2	hw5/cml/et/scalar_promotions.h	/^      knowT1butNotT2 =  precision_trait<T1>::knowPrecisionRank$/;"	e	enum:cml::et::detail::promote_trait::__anon23
knowT2butNotT1	hw5/cml/et/scalar_promotions.h	/^      knowT2butNotT1 =  precision_trait<T2>::knowPrecisionRank$/;"	e	enum:cml::et::detail::promote_trait::__anon23
latitude	hw5/cml/mathlib/helper.h	/^enum SphericalType { latitude, colatitude };$/;"	e	enum:cml::SphericalType
layout	hw5/cml/core/dynamic_2D.h	/^    typedef Layout layout;$/;"	t	class:cml::dynamic_2D
layout	hw5/cml/core/external_2D.h	/^    typedef Layout layout;$/;"	t	class:cml::external_2D
layout	hw5/cml/core/fixed_2D.h	/^    typedef Layout layout;$/;"	t	class:cml::fixed_2D
layout	hw5/cml/matrix/dynamic.h	/^    typedef typename array_type::layout layout;$/;"	t	class:cml::matrix
layout	hw5/cml/matrix/external.h	/^    typedef typename array_type::layout layout;$/;"	t	class:cml::matrix
layout	hw5/cml/matrix/fixed.h	/^    typedef typename array_type::layout layout;$/;"	t	class:cml::matrix
layout	hw5/cml/matrix/matrix_promotions.h	/^        typedef CML_DEFAULT_ARRAY_LAYOUT layout;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
left	hw5/cml/quaternion/quaternion_mul.h	/^    QUATXPR_ARG_TYPE_N(1) left,$/;"	m	namespace:cml
left_dtag	hw5/cml/et/array_promotions.h	/^    typedef typename A1::dimension_tag left_dtag;$/;"	t	struct:cml::et::ArrayPromote
left_expression	hw5/cml/quaternion/quaternion_expr.h	/^    left_reference left_expression() const { return m_left; }$/;"	f	class:cml::et::BinaryQuaternionOp
left_expression	hw5/cml/vector/vector_expr.h	/^    left_reference left_expression() const { return m_left; }$/;"	f	class:cml::et::BinaryVectorOp
left_handed	hw5/cml/mathlib/helper.h	/^enum Handedness { left_handed, right_handed };$/;"	e	enum:cml::Handedness
left_layout	hw5/cml/et/array_promotions.h	/^    typedef typename A1::layout left_layout;$/;"	t	struct:cml::et::detail::promote
left_matrix	hw5/cml/matrix/matrix_promotions.h	/^        typedef cml::matrix<E1,left_storage,basis_orient,layout> left_matrix;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
left_reference	hw5/cml/matrix/matrix_expr.h	/^    typedef typename left_traits::const_reference left_reference;$/;"	t	class:cml::et::BinaryMatrixOp
left_reference	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename left_traits::const_reference left_reference;$/;"	t	class:cml::et::BinaryQuaternionOp
left_reference	hw5/cml/vector/vector_expr.h	/^    typedef typename left_traits::const_reference left_reference;$/;"	t	class:cml::et::BinaryVectorOp
left_result	hw5/cml/et/size_checking.h	/^    typedef typename left_traits::result_tag left_result;$/;"	t	struct:cml::et::GetCheckedSize
left_result	hw5/cml/matrix/matrix_expr.h	/^    typedef typename LeftTraits::result_tag left_result;$/;"	t	struct:cml::et::MatrixExpressions
left_result	hw5/cml/matrix/matrix_expr.h	/^    typedef typename left_traits::result_type left_result;$/;"	t	class:cml::et::BinaryMatrixOp
left_result	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename LeftTraits::result_tag left_result;$/;"	t	struct:cml::et::QuaternionExpressions
left_result	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename left_traits::result_type left_result;$/;"	t	class:cml::et::BinaryQuaternionOp
left_result	hw5/cml/vector/vector_expr.h	/^    typedef typename LeftTraits::result_tag left_result;$/;"	t	struct:cml::et::VectorExpressions
left_result	hw5/cml/vector/vector_expr.h	/^    typedef typename left_traits::result_type left_result;$/;"	t	class:cml::et::BinaryVectorOp
left_scalar	hw5/cml/et/array_promotions.h	/^    typedef typename A1::value_type left_scalar;$/;"	t	struct:cml::et::detail::promote
left_storage	hw5/cml/matrix/matrix_promotions.h	/^            >::result left_storage;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
left_traits	hw5/cml/et/size_checking.h	/^    typedef ExprTraits<LeftT> left_traits;$/;"	t	struct:cml::et::GetCheckedSize
left_traits	hw5/cml/matrix/matrix_expr.h	/^    typedef ExprTraits<LeftT> left_traits;$/;"	t	class:cml::et::BinaryMatrixOp
left_traits	hw5/cml/quaternion/quaternion_expr.h	/^    typedef ExprTraits<LeftT> left_traits;$/;"	t	class:cml::et::BinaryQuaternionOp
left_traits	hw5/cml/vector/vector_expr.h	/^    typedef ExprTraits<LeftT> left_traits;$/;"	t	class:cml::et::BinaryVectorOp
left_traits	hw5/cml/vector/vector_products.h	/^    typedef et::ExprTraits<LeftT> left_traits;$/;"	t	struct:cml::detail::CrossPromote
left_traits	hw5/cml/vector/vector_products.h	/^    typedef et::ExprTraits<LeftT> left_traits;$/;"	t	struct:cml::detail::DotPromote
left_traits	hw5/cml/vector/vector_products.h	/^    typedef et::ExprTraits<LeftT> left_traits;$/;"	t	struct:cml::detail::OuterPromote
left_traits	hw5/cml/vector/vector_unroller.h	/^    typedef ExprTraits<LeftT> left_traits;$/;"	t	struct:cml::et::detail::VectorAccumulateUnroller
left_type	hw5/cml/matrix/matrix_expr.h	/^    typedef LeftT left_type;$/;"	t	struct:cml::et::ExprTraits
left_type	hw5/cml/matrix/matrix_promotions.h	/^        typedef cml::vector<E1,AT1> left_type;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
left_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef LeftT left_type;$/;"	t	struct:cml::et::ExprTraits
left_type	hw5/cml/vector/vector_expr.h	/^    typedef LeftT left_type;$/;"	t	struct:cml::et::ExprTraits
left_type	hw5/cml/vector/vector_products.h	/^    typedef typename left_traits::result_type left_type;$/;"	t	struct:cml::detail::CrossPromote
left_type	hw5/cml/vector/vector_products.h	/^    typedef typename left_traits::result_type left_type;$/;"	t	struct:cml::detail::OuterPromote
left_value	hw5/cml/vector/vector_products.h	/^    typedef typename left_traits::value_type left_value;$/;"	t	struct:cml::detail::DotPromote
length	hw5/cml/quaternion/conjugate.h	/^    value_type length() const {$/;"	f	class:cml::et::ConjugateOp
length	hw5/cml/quaternion/inverse.h	/^    value_type length() const {$/;"	f	class:cml::et::QuaternionInverseOp
length	hw5/cml/quaternion/quaternion.h	/^    value_type length() const {$/;"	f	class:cml::quaternion
length	hw5/cml/quaternion/quaternion_expr.h	/^    value_type length() const {$/;"	f	class:cml::et::BinaryQuaternionOp
length	hw5/cml/quaternion/quaternion_expr.h	/^    value_type length() const {$/;"	f	class:cml::et::QuaternionXpr
length	hw5/cml/quaternion/quaternion_expr.h	/^    value_type length() const {$/;"	f	class:cml::et::UnaryQuaternionOp
length	hw5/cml/quaternion/quaternion_functions.h	/^length(QUATXPR_ARG_TYPE arg)$/;"	f	namespace:cml
length	hw5/cml/quaternion/quaternion_functions.h	/^length(const quaternion<E,AT,OT,CT>& arg)$/;"	f	namespace:cml
length	hw5/cml/util.h	/^T length(T x, T y) {$/;"	f	namespace:cml
length	hw5/cml/util.h	/^T length(T x, T y, T z) {$/;"	f	namespace:cml
length	hw5/cml/vector/dynamic.h	/^    value_type length() const {$/;"	f	class:cml::vector
length	hw5/cml/vector/external.h	/^    value_type length() const {$/;"	f	class:cml::vector
length	hw5/cml/vector/fixed.h	/^    value_type length() const {$/;"	f	class:cml::vector
length	hw5/cml/vector/vector_expr.h	/^    value_type length() const {$/;"	f	class:cml::et::BinaryVectorOp
length	hw5/cml/vector/vector_expr.h	/^    value_type length() const {$/;"	f	class:cml::et::UnaryVectorOp
length	hw5/cml/vector/vector_expr.h	/^    value_type length() const {$/;"	f	class:cml::et::VectorXpr
length	hw5/cml/vector/vector_functions.h	/^length(VECXPR_ARG_TYPE arg)$/;"	f	namespace:cml
length	hw5/cml/vector/vector_functions.h	/^length(const vector<E,AT>& arg)$/;"	f	namespace:cml
length_squared	hw5/cml/quaternion/conjugate.h	/^    value_type length_squared() const {$/;"	f	class:cml::et::ConjugateOp
length_squared	hw5/cml/quaternion/inverse.h	/^    value_type length_squared() const {$/;"	f	class:cml::et::QuaternionInverseOp
length_squared	hw5/cml/quaternion/quaternion.h	/^    value_type length_squared() const {$/;"	f	class:cml::quaternion
length_squared	hw5/cml/quaternion/quaternion_expr.h	/^    value_type length_squared() const {$/;"	f	class:cml::et::BinaryQuaternionOp
length_squared	hw5/cml/quaternion/quaternion_expr.h	/^    value_type length_squared() const {$/;"	f	class:cml::et::QuaternionXpr
length_squared	hw5/cml/quaternion/quaternion_expr.h	/^    value_type length_squared() const {$/;"	f	class:cml::et::UnaryQuaternionOp
length_squared	hw5/cml/quaternion/quaternion_functions.h	/^length_squared(QUATXPR_ARG_TYPE arg)$/;"	f	namespace:cml
length_squared	hw5/cml/quaternion/quaternion_functions.h	/^length_squared(const quaternion<E,AT,OT,CT>& arg)$/;"	f	namespace:cml
length_squared	hw5/cml/util.h	/^T length_squared(T x, T y) {$/;"	f	namespace:cml
length_squared	hw5/cml/util.h	/^T length_squared(T x, T y, T z) {$/;"	f	namespace:cml
length_squared	hw5/cml/vector/dynamic.h	/^    value_type length_squared() const {$/;"	f	class:cml::vector
length_squared	hw5/cml/vector/external.h	/^    value_type length_squared() const {$/;"	f	class:cml::vector
length_squared	hw5/cml/vector/fixed.h	/^    value_type length_squared() const {$/;"	f	class:cml::vector
length_squared	hw5/cml/vector/vector_expr.h	/^    value_type length_squared() const {$/;"	f	class:cml::et::BinaryVectorOp
length_squared	hw5/cml/vector/vector_expr.h	/^    value_type length_squared() const {$/;"	f	class:cml::et::UnaryVectorOp
length_squared	hw5/cml/vector/vector_expr.h	/^    value_type length_squared() const {$/;"	f	class:cml::et::VectorXpr
length_squared	hw5/cml/vector/vector_functions.h	/^length_squared(VECXPR_ARG_TYPE arg)$/;"	f	namespace:cml
length_squared	hw5/cml/vector/vector_functions.h	/^length_squared(const vector<E,AT>& arg)$/;"	f	namespace:cml
lerp	hw5/cml/mathlib/interpolation.h	/^lerp(const T1& val0, const T2& val1, Scalar u)$/;"	f	namespace:cml
light	hw5/object.h	/^        light()$/;"	f	class:light
light	hw5/object.h	/^        light(const vector3& pos)$/;"	f	class:light
light	hw5/object.h	/^class light : public object \/\/ point, directional, area$/;"	c
lights	hw5/ray_tracer.h	/^        vector<light> lights;$/;"	m	class:scene
lights	hw5/ray_tracer.h	/^    vector<light> lights; \/\/ shadow rays (light vector)$/;"	m	class:ray_tree_node
local_illu	hw5/ray_tracer.h	/^    vector3 local_illu;$/;"	m	class:ray_tree_node
log	hw5/cml/quaternion/quaternion.h	/^    temporary_type log($/;"	f	class:cml::quaternion
log	hw5/cml/quaternion/quaternion_expr.h	/^    temporary_type log($/;"	f	class:cml::et::BinaryQuaternionOp
log	hw5/cml/quaternion/quaternion_expr.h	/^    temporary_type log($/;"	f	class:cml::et::QuaternionXpr
log	hw5/cml/quaternion/quaternion_expr.h	/^    temporary_type log($/;"	f	class:cml::et::UnaryQuaternionOp
log	hw5/cml/quaternion/quaternion_functions.h	/^typename QuatT::temporary_type log($/;"	f	namespace:cml
lu	hw5/cml/matrix/lu.h	/^lu(const et::MatrixXpr<XprT>& e)$/;"	f	namespace:cml
lu	hw5/cml/matrix/lu.h	/^lu(const matrix<E,AT,BO,L>& m)$/;"	f	namespace:cml
lu_copy	hw5/cml/matrix/lu.h	/^lu_copy(const MatT& M)$/;"	f	namespace:cml::detail
lu_h	hw5/cml/matrix/lu.h	/^#define lu_h$/;"	d
lu_inplace	hw5/cml/matrix/lu.h	/^void lu_inplace(MatT& A)$/;"	f	namespace:cml::detail
lu_solve	hw5/cml/matrix/lu.h	/^lu_solve(const MatT& LU, const VecT& b)$/;"	f	namespace:cml
m_alloc	hw5/cml/core/dynamic_1D.h	/^    allocator_type		m_alloc;$/;"	m	class:cml::dynamic_1D
m_alloc	hw5/cml/core/dynamic_2D.h	/^    allocator_type		m_alloc;$/;"	m	class:cml::dynamic_2D
m_col	hw5/cml/matrix/matrix_rowcol.h	/^    const size_t m_col;$/;"	m	class:cml::et::MatrixColOp
m_cols	hw5/cml/core/dynamic_2D.h	/^    size_t                      m_rows, m_cols;$/;"	m	class:cml::dynamic_2D
m_cols	hw5/cml/core/external_2D.h	/^    const size_t                m_cols;$/;"	m	class:cml::external_2D
m_data	hw5/cml/core/dynamic_1D.h	/^    value_type*			m_data;$/;"	m	class:cml::dynamic_1D
m_data	hw5/cml/core/dynamic_2D.h	/^    value_type*			m_data;$/;"	m	class:cml::dynamic_2D
m_data	hw5/cml/core/external_1D.h	/^    pointer const               m_data;$/;"	m	class:cml::external_1D
m_data	hw5/cml/core/external_2D.h	/^    pointer const               m_data;$/;"	m	class:cml::external_2D
m_data	hw5/cml/core/external_2D.h	/^    value_type* const           m_data;$/;"	m	class:cml::external_2D
m_data	hw5/cml/core/fixed_1D.h	/^    array_impl                  m_data;$/;"	m	class:cml::fixed_1D
m_data	hw5/cml/core/fixed_2D.h	/^    array_data                  m_data;$/;"	m	class:cml::fixed_2D
m_expr	hw5/cml/matrix/matrix_expr.h	/^    expr_reference m_expr;$/;"	m	class:cml::et::MatrixXpr
m_expr	hw5/cml/matrix/matrix_expr.h	/^    expr_reference m_expr;$/;"	m	class:cml::et::UnaryMatrixOp
m_expr	hw5/cml/matrix/matrix_rowcol.h	/^    expr_reference m_expr;$/;"	m	class:cml::et::MatrixColOp
m_expr	hw5/cml/matrix/matrix_rowcol.h	/^    expr_reference m_expr;$/;"	m	class:cml::et::MatrixRowOp
m_expr	hw5/cml/matrix/matrix_transpose.h	/^    expr_reference m_expr;$/;"	m	class:cml::et::MatrixTransposeOp
m_expr	hw5/cml/quaternion/conjugate.h	/^    expr_reference m_expr;$/;"	m	class:cml::et::ConjugateOp
m_expr	hw5/cml/quaternion/inverse.h	/^    subexpression_type m_expr;$/;"	m	class:cml::et::QuaternionInverseOp
m_expr	hw5/cml/quaternion/quaternion_expr.h	/^    expr_reference m_expr;$/;"	m	class:cml::et::QuaternionXpr
m_expr	hw5/cml/quaternion/quaternion_expr.h	/^    expr_reference m_expr;$/;"	m	class:cml::et::UnaryQuaternionOp
m_expr	hw5/cml/vector/vector_expr.h	/^    expr_reference m_expr;$/;"	m	class:cml::et::UnaryVectorOp
m_expr	hw5/cml/vector/vector_expr.h	/^    expr_reference m_expr;$/;"	m	class:cml::et::VectorXpr
m_left	hw5/cml/matrix/matrix_expr.h	/^    left_reference m_left;$/;"	m	class:cml::et::BinaryMatrixOp
m_left	hw5/cml/quaternion/quaternion_expr.h	/^    left_reference m_left;$/;"	m	class:cml::et::BinaryQuaternionOp
m_left	hw5/cml/vector/vector_expr.h	/^    left_reference m_left;$/;"	m	class:cml::et::BinaryVectorOp
m_norm	hw5/cml/quaternion/inverse.h	/^    value_type m_norm;$/;"	m	class:cml::et::QuaternionInverseOp
m_q	hw5/cml/quaternion/quaternion.h	/^    vector_type                 m_q;$/;"	m	class:cml::quaternion
m_right	hw5/cml/matrix/matrix_expr.h	/^    right_reference m_right;$/;"	m	class:cml::et::BinaryMatrixOp
m_right	hw5/cml/quaternion/quaternion_expr.h	/^    right_reference m_right;$/;"	m	class:cml::et::BinaryQuaternionOp
m_right	hw5/cml/vector/vector_expr.h	/^    right_reference m_right;$/;"	m	class:cml::et::BinaryVectorOp
m_row	hw5/cml/matrix/matrix_rowcol.h	/^    const size_t m_row;$/;"	m	class:cml::et::MatrixRowOp
m_rows	hw5/cml/core/dynamic_2D.h	/^    size_t                      m_rows, m_cols;$/;"	m	class:cml::dynamic_2D
m_rows	hw5/cml/core/external_2D.h	/^    const size_t                m_rows;$/;"	m	class:cml::external_2D
m_size	hw5/cml/core/dynamic_1D.h	/^    size_t			m_size;$/;"	m	class:cml::dynamic_1D
m_size	hw5/cml/core/external_1D.h	/^    const size_t                m_size;$/;"	m	class:cml::external_1D
main	hw5/hw5.cpp	/^int main(int argc, char** argv)$/;"	f
make_pick_drag_volume	hw5/cml/mathlib/picking.h	/^void make_pick_drag_volume($/;"	f	namespace:cml
make_pick_ray	hw5/cml/mathlib/picking.h	/^void make_pick_ray($/;"	f	namespace:cml
make_pick_volume	hw5/cml/mathlib/picking.h	/^void make_pick_volume($/;"	f	namespace:cml
manhattan_distance	hw5/cml/mathlib/vector_misc.h	/^manhattan_distance(const VecT_1& v1, const VecT_2& v2) {$/;"	f	namespace:cml
map_range	hw5/cml/util.h	/^T map_range(T value, T min1, T max1, T min2, T max2) {$/;"	f	namespace:cml
mat	hw5/object.h	/^        material mat;$/;"	m	class:object
match	hw5/cml/core/meta/switch.h	/^    template<typename Find> struct match {$/;"	s	struct:cml::meta::select_case
material	hw5/material.h	/^        material()$/;"	f	class:material
material	hw5/material.h	/^        material(vector3 diffuse, vector3 specular, vector3 ambient, float shininess, float transparency)$/;"	f	class:material
material	hw5/material.h	/^class material$/;"	c
material_name	hw5/triangle.h	/^        string material_name;$/;"	m	class:triangle
mathlib_h	hw5/cml/mathlib/mathlib.h	/^#define mathlib_h$/;"	d
matop_macros_h	hw5/cml/matrix/matop_macros.h	/^#define matop_macros_h$/;"	d
matrix	hw5/cml/matrix/dynamic.h	/^    explicit matrix(size_t rows, size_t cols)$/;"	f	class:cml::matrix
matrix	hw5/cml/matrix/dynamic.h	/^    matrix() {}$/;"	f	class:cml::matrix
matrix	hw5/cml/matrix/dynamic.h	/^class matrix<Element,dynamic<Alloc>,BasisOrient,Layout>$/;"	c	namespace:cml
matrix	hw5/cml/matrix/external.h	/^    explicit matrix(value_type ptr[Rows][Cols]) : array_type(ptr) {}$/;"	f	class:cml::matrix
matrix	hw5/cml/matrix/external.h	/^    explicit matrix(value_type* const ptr, size_t rows, size_t cols)$/;"	f	class:cml::matrix
matrix	hw5/cml/matrix/external.h	/^    explicit matrix(value_type* ptr) : array_type(ptr) {}$/;"	f	class:cml::matrix
matrix	hw5/cml/matrix/external.h	/^class matrix<Element,external<-1,-1>,BasisOrient,Layout>$/;"	c	namespace:cml
matrix	hw5/cml/matrix/external.h	/^class matrix<Element,external<Rows,Cols>,BasisOrient,Layout>$/;"	c	namespace:cml
matrix	hw5/cml/matrix/fixed.h	/^    matrix() {}$/;"	f	class:cml::matrix
matrix	hw5/cml/matrix/fixed.h	/^class matrix<Element,fixed<Rows,Cols>,BasisOrient,Layout>$/;"	c	namespace:cml
matrix	hw5/common.h	/^typedef cml::matrix44f_c matrix;$/;"	t
matrix22d	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<2,2> > matrix22d;$/;"	t	namespace:cml
matrix22d_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<2,2>, col_basis, col_major > matrix22d_c;$/;"	t	namespace:cml
matrix22d_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<2,2>, row_basis, row_major > matrix22d_r;$/;"	t	namespace:cml
matrix22f	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<2,2> > matrix22f;$/;"	t	namespace:cml
matrix22f_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<2,2>, col_basis, col_major > matrix22f_c;$/;"	t	namespace:cml
matrix22f_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<2,2>, row_basis, row_major > matrix22f_r;$/;"	t	namespace:cml
matrix22i	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<2,2> > matrix22i;$/;"	t	namespace:cml
matrix22i_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<2,2>, col_basis, col_major > matrix22i_c;$/;"	t	namespace:cml
matrix22i_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<2,2>, row_basis, row_major > matrix22i_r;$/;"	t	namespace:cml
matrix23d_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<2,3>, col_basis, col_major > matrix23d_c;$/;"	t	namespace:cml
matrix23f_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<2,3>, col_basis, col_major > matrix23f_c;$/;"	t	namespace:cml
matrix23i_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<2,3>, col_basis, col_major > matrix23i_c;$/;"	t	namespace:cml
matrix32d_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<3,2>, row_basis, row_major > matrix32d_r;$/;"	t	namespace:cml
matrix32f_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<3,2>, row_basis, row_major > matrix32f_r;$/;"	t	namespace:cml
matrix32i_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<3,2>, row_basis, row_major > matrix32i_r;$/;"	t	namespace:cml
matrix33d	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<3,3> > matrix33d;$/;"	t	namespace:cml
matrix33d_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<3,3>, col_basis, col_major > matrix33d_c;$/;"	t	namespace:cml
matrix33d_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<3,3>, row_basis, row_major > matrix33d_r;$/;"	t	namespace:cml
matrix33f	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<3,3> > matrix33f;$/;"	t	namespace:cml
matrix33f_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<3,3>, col_basis, col_major > matrix33f_c;$/;"	t	namespace:cml
matrix33f_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<3,3>, row_basis, row_major > matrix33f_r;$/;"	t	namespace:cml
matrix33i	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<3,3> > matrix33i;$/;"	t	namespace:cml
matrix33i_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<3,3>, col_basis, col_major > matrix33i_c;$/;"	t	namespace:cml
matrix33i_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<3,3>, row_basis, row_major > matrix33i_r;$/;"	t	namespace:cml
matrix34d_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<3,4>, col_basis, col_major > matrix34d_c;$/;"	t	namespace:cml
matrix34f_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<3,4>, col_basis, col_major > matrix34f_c;$/;"	t	namespace:cml
matrix34i_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<3,4>, col_basis, col_major > matrix34i_c;$/;"	t	namespace:cml
matrix43d_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<4,3>, row_basis, row_major > matrix43d_r;$/;"	t	namespace:cml
matrix43f_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<4,3>, row_basis, row_major > matrix43f_r;$/;"	t	namespace:cml
matrix43i_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<4,3>, row_basis, row_major > matrix43i_r;$/;"	t	namespace:cml
matrix44d	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<4,4> > matrix44d;$/;"	t	namespace:cml
matrix44d_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<4,4>, col_basis, col_major > matrix44d_c;$/;"	t	namespace:cml
matrix44d_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, fixed<4,4>, row_basis, row_major > matrix44d_r;$/;"	t	namespace:cml
matrix44f	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<4,4> > matrix44f;$/;"	t	namespace:cml
matrix44f_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<4,4>, col_basis, col_major > matrix44f_c;$/;"	t	namespace:cml
matrix44f_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  fixed<4,4>, row_basis, row_major > matrix44f_r;$/;"	t	namespace:cml
matrix44i	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<4,4> > matrix44i;$/;"	t	namespace:cml
matrix44i_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<4,4>, col_basis, col_major > matrix44i_c;$/;"	t	namespace:cml
matrix44i_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    fixed<4,4>, row_basis, row_major > matrix44i_r;$/;"	t	namespace:cml
matrix_3D_affine_from_2D_affine	hw5/cml/mathlib/matrix_transform.h	/^matrix_3D_affine_from_2D_affine(matrix<E,A,B,L>& m, const MatT& affine_2D)$/;"	f	namespace:cml
matrix_3D_affine_from_3D_affine	hw5/cml/mathlib/matrix_transform.h	/^matrix_3D_affine_from_3D_affine(matrix<E,A,B,L>& m, const MatT& affine_3D)$/;"	f	namespace:cml
matrix_affine_transform	hw5/cml/mathlib/matrix_transform.h	/^matrix_affine_transform($/;"	f	namespace:cml
matrix_affine_transform	hw5/cml/mathlib/matrix_transform.h	/^matrix_affine_transform(matrix<E,A,B,L>& m, E angle_0, E angle_1,$/;"	f	namespace:cml
matrix_affine_transform	hw5/cml/mathlib/matrix_transform.h	/^matrix_affine_transform(matrix<E,A,B,L>& m, const VecT_1& x, const VecT_2& y,$/;"	f	namespace:cml
matrix_affine_transform	hw5/cml/mathlib/matrix_transform.h	/^matrix_affine_transform(matrix<E,A,B,L>& m,$/;"	f	namespace:cml
matrix_affine_transform_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_affine_transform_2D($/;"	f	namespace:cml
matrix_affine_transform_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_affine_transform_2D(matrix<E,A,B,L>& m, const VecT_1& x,$/;"	f	namespace:cml
matrix_affine_transform_2D	hw5/cml/mathlib/matrix_transform.h	/^void matrix_affine_transform_2D(matrix<E,A,B,L>& m, E angle,$/;"	f	namespace:cml
matrix_aim_at	hw5/cml/mathlib/matrix_transform.h	/^matrix_aim_at(matrix<E,A,B,L>& m, const VecT_1& pos, const VecT_2& target,$/;"	f	namespace:cml
matrix_aim_at_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_aim_at_2D($/;"	f	namespace:cml
matrix_aim_at_axial	hw5/cml/mathlib/matrix_transform.h	/^matrix_aim_at_axial($/;"	f	namespace:cml
matrix_aim_at_viewplane	hw5/cml/mathlib/matrix_transform.h	/^matrix_aim_at_viewplane($/;"	f	namespace:cml
matrix_basis_h	hw5/cml/mathlib/matrix_basis.h	/^#define matrix_basis_h$/;"	d
matrix_class_ops_h	hw5/cml/matrix/class_ops.h	/^#define matrix_class_ops_h$/;"	d
matrix_comparison_h	hw5/cml/matrix/matrix_comparison.h	/^#define matrix_comparison_h$/;"	d
matrix_concat_h	hw5/cml/mathlib/matrix_concat.h	/^#define matrix_concat_h$/;"	d
matrix_concat_rotations	hw5/cml/mathlib/matrix_rotation.h	/^matrix_concat_rotations(const MatT_1& m1, const MatT_2& m2) {$/;"	f	namespace:cml::detail
matrix_concat_rotations	hw5/cml/mathlib/matrix_rotation.h	/^matrix_concat_rotations(const MatT_1& m1, const MatT_2& m2, col_basis) {$/;"	f	namespace:cml::detail
matrix_concat_rotations	hw5/cml/mathlib/matrix_rotation.h	/^matrix_concat_rotations(const MatT_1& m1, const MatT_2& m2, row_basis) {$/;"	f	namespace:cml::detail
matrix_concat_rotations_2D	hw5/cml/mathlib/matrix_rotation.h	/^matrix_concat_rotations_2D(const MatT_1& m1, const MatT_2& m2) {$/;"	f	namespace:cml::detail
matrix_concat_rotations_2D	hw5/cml/mathlib/matrix_rotation.h	/^matrix_concat_rotations_2D(const MatT_1& m1, const MatT_2& m2, col_basis) {$/;"	f	namespace:cml::detail
matrix_concat_rotations_2D	hw5/cml/mathlib/matrix_rotation.h	/^matrix_concat_rotations_2D(const MatT_1& m1, const MatT_2& m2, row_basis) {$/;"	f	namespace:cml::detail
matrix_concat_transforms_4x4	hw5/cml/mathlib/matrix_concat.h	/^matrix_concat_transforms_4x4(const MatT_1& m1, const MatT_2& m2) {$/;"	f	namespace:cml::detail
matrix_concat_transforms_4x4	hw5/cml/mathlib/matrix_concat.h	/^matrix_concat_transforms_4x4(const MatT_1& m1, const MatT_2& m2, col_basis) {$/;"	f	namespace:cml::detail
matrix_concat_transforms_4x4	hw5/cml/mathlib/matrix_concat.h	/^matrix_concat_transforms_4x4(const MatT_1& m1, const MatT_2& m2, row_basis) {$/;"	f	namespace:cml::detail
matrix_d	hw5/common.h	/^typedef cml::matrixf_c matrix_d;$/;"	t
matrix_decompose_SRT	hw5/cml/mathlib/matrix_transform.h	/^void matrix_decompose_SRT($/;"	f	namespace:cml
matrix_decompose_SRT_2D	hw5/cml/mathlib/matrix_transform.h	/^void matrix_decompose_SRT_2D($/;"	f	namespace:cml
matrix_expr_h	hw5/cml/matrix/matrix_expr.h	/^#define matrix_expr_h$/;"	d
matrix_functions_h	hw5/cml/matrix/matrix_functions.h	/^#define matrix_functions_h$/;"	d
matrix_get_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_basis_vector(const MatT& m, size_t i)$/;"	f	namespace:cml
matrix_get_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_basis_vector_2D(const MatT& m, size_t i)$/;"	f	namespace:cml
matrix_get_basis_vectors	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_basis_vectors($/;"	f	namespace:cml
matrix_get_basis_vectors_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_basis_vectors_2D(const MatT& m,vector<E,A>& x,vector<E,A>& y)$/;"	f	namespace:cml
matrix_get_translation	hw5/cml/mathlib/matrix_translation.h	/^matrix_get_translation($/;"	f	namespace:cml
matrix_get_translation	hw5/cml/mathlib/matrix_translation.h	/^matrix_get_translation(const MatT& m)$/;"	f	namespace:cml
matrix_get_translation_2D	hw5/cml/mathlib/matrix_translation.h	/^matrix_get_translation_2D($/;"	f	namespace:cml
matrix_get_translation_2D	hw5/cml/mathlib/matrix_translation.h	/^matrix_get_translation_2D(const MatT& m)$/;"	f	namespace:cml
matrix_get_transposed_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_transposed_basis_vector(const MatT& m, size_t i)$/;"	f	namespace:cml
matrix_get_transposed_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_transposed_basis_vector_2D(const MatT& m, size_t i)$/;"	f	namespace:cml
matrix_get_transposed_basis_vectors	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_transposed_basis_vectors($/;"	f	namespace:cml
matrix_get_transposed_basis_vectors_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_transposed_basis_vectors_2D($/;"	f	namespace:cml
matrix_get_transposed_x_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_transposed_x_basis_vector(const MatT& m) {$/;"	f	namespace:cml
matrix_get_transposed_x_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_transposed_x_basis_vector_2D(const MatT& m) {$/;"	f	namespace:cml
matrix_get_transposed_y_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_transposed_y_basis_vector(const MatT& m) {$/;"	f	namespace:cml
matrix_get_transposed_y_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_transposed_y_basis_vector_2D(const MatT& m) {$/;"	f	namespace:cml
matrix_get_transposed_z_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_transposed_z_basis_vector(const MatT& m) {$/;"	f	namespace:cml
matrix_get_view_translation	hw5/cml/mathlib/matrix_translation.h	/^matrix_get_view_translation(const MatT& m)$/;"	f	namespace:cml
matrix_get_x_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_x_basis_vector(const MatT& m) {$/;"	f	namespace:cml
matrix_get_x_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_x_basis_vector_2D(const MatT& m) {$/;"	f	namespace:cml
matrix_get_y_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_y_basis_vector(const MatT& m) {$/;"	f	namespace:cml
matrix_get_y_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_y_basis_vector_2D(const MatT& m) {$/;"	f	namespace:cml
matrix_get_z_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_get_z_basis_vector(const MatT& m) {$/;"	f	namespace:cml
matrix_inverse_h	hw5/cml/matrix/inverse.h	/^#define matrix_inverse_h$/;"	d
matrix_invert_RT_only	hw5/cml/mathlib/matrix_misc.h	/^matrix_invert_RT_only(matrix<E,A,B,L>& m)$/;"	f	namespace:cml
matrix_invert_RT_only_2D	hw5/cml/mathlib/matrix_misc.h	/^matrix_invert_RT_only_2D(matrix<E,A,B,L>& m)$/;"	f	namespace:cml
matrix_linear_transform	hw5/cml/mathlib/matrix_transform.h	/^matrix_linear_transform(matrix<E,A,B,L>& m, const MatT& linear)$/;"	f	namespace:cml
matrix_linear_transform_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_linear_transform_2D(matrix<E,A,B,L>& m, const MatT& linear)$/;"	f	namespace:cml
matrix_look_at	hw5/cml/mathlib/matrix_transform.h	/^matrix_look_at($/;"	f	namespace:cml
matrix_look_at	hw5/cml/mathlib/matrix_transform.h	/^matrix_look_at(matrix<E,A,B,L>& m, E eye_x, E eye_y, E eye_z, E target_x,$/;"	f	namespace:cml
matrix_look_at_LH	hw5/cml/mathlib/matrix_transform.h	/^matrix_look_at_LH(matrix<E,A,B,L>& m, E eye_x, E eye_y, E eye_z,$/;"	f	namespace:cml
matrix_look_at_LH	hw5/cml/mathlib/matrix_transform.h	/^matrix_look_at_LH(matrix<E,A,B,L>& m, const VecT_1& eye,$/;"	f	namespace:cml
matrix_look_at_RH	hw5/cml/mathlib/matrix_transform.h	/^matrix_look_at_RH(matrix<E,A,B,L>& m, E eye_x, E eye_y, E eye_z,$/;"	f	namespace:cml
matrix_look_at_RH	hw5/cml/mathlib/matrix_transform.h	/^matrix_look_at_RH(matrix<E,A,B,L>& m, const VecT_1& eye,$/;"	f	namespace:cml
matrix_misc_h	hw5/cml/mathlib/matrix_misc.h	/^#define matrix_misc_h$/;"	d
matrix_mul_h	hw5/cml/matrix/matrix_mul.h	/^#define	matrix_mul_h$/;"	d
matrix_ops_h	hw5/cml/matrix/matrix_ops.h	/^#define matrix_ops_h$/;"	d
matrix_ortho_h	hw5/cml/mathlib/matrix_ortho.h	/^#define matrix_ortho_h$/;"	d
matrix_ortho_project	hw5/cml/mathlib/matrix_transform.h	/^matrix_ortho_project(matrix<E,A,B,L>& m, size_t axis)$/;"	f	namespace:cml
matrix_ortho_project_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_ortho_project_2D(matrix<E,A,B,L>& m, size_t axis)$/;"	f	namespace:cml
matrix_ortho_project_to_hplane	hw5/cml/mathlib/matrix_transform.h	/^matrix_ortho_project_to_hplane(matrix<E,A,B,L>& m, const VecT& normal)$/;"	f	namespace:cml
matrix_ortho_project_to_hplane_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_ortho_project_to_hplane_2D(matrix<E,A,B,L>& m, const VecT& normal)$/;"	f	namespace:cml
matrix_ortho_project_x_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_ortho_project_x_2D(matrix<E,A,B,L>& m) {$/;"	f	namespace:cml
matrix_ortho_project_xy	hw5/cml/mathlib/matrix_transform.h	/^matrix_ortho_project_xy(matrix<E,A,B,L>& m) {$/;"	f	namespace:cml
matrix_ortho_project_y_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_ortho_project_y_2D(matrix<E,A,B,L>& m) {$/;"	f	namespace:cml
matrix_ortho_project_yz	hw5/cml/mathlib/matrix_transform.h	/^matrix_ortho_project_yz(matrix<E,A,B,L>& m) {$/;"	f	namespace:cml
matrix_ortho_project_zx	hw5/cml/mathlib/matrix_transform.h	/^matrix_ortho_project_zx(matrix<E,A,B,L>& m) {$/;"	f	namespace:cml
matrix_orthogonalize_2x2	hw5/cml/mathlib/matrix_ortho.h	/^matrix_orthogonalize_2x2(matrix<E,A,B,L>& m, size_t stable_axis = 0,$/;"	f	namespace:cml
matrix_orthogonalize_3x3	hw5/cml/mathlib/matrix_ortho.h	/^matrix_orthogonalize_3x3(matrix<E,A,B,L>& m, size_t stable_axis = 2,$/;"	f	namespace:cml
matrix_orthographic	hw5/cml/mathlib/matrix_projection.h	/^matrix_orthographic(matrix<E,A,B,L>& m, E left, E right, E bottom, E top,$/;"	f	namespace:cml
matrix_orthographic	hw5/cml/mathlib/matrix_projection.h	/^matrix_orthographic(matrix<E,A,B,L>& m, E width, E height, E n, E f,$/;"	f	namespace:cml
matrix_orthographic_LH	hw5/cml/mathlib/matrix_projection.h	/^matrix_orthographic_LH(matrix<E,A,B,L>& m, E left, E right, E bottom,$/;"	f	namespace:cml
matrix_orthographic_LH	hw5/cml/mathlib/matrix_projection.h	/^matrix_orthographic_LH(matrix<E,A,B,L>& m, E width, E height, E n,$/;"	f	namespace:cml
matrix_orthographic_RH	hw5/cml/mathlib/matrix_projection.h	/^matrix_orthographic_RH(matrix<E,A,B,L>& m, E left, E right, E bottom,$/;"	f	namespace:cml
matrix_orthographic_RH	hw5/cml/mathlib/matrix_projection.h	/^matrix_orthographic_RH(matrix<E,A,B,L>& m, E width, E height, E n,$/;"	f	namespace:cml
matrix_perspective	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective(matrix<E,A,B,L>& m, E left, E right, E bottom, E top,$/;"	f	namespace:cml
matrix_perspective	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective(matrix<E,A,B,L>& m, E width, E height, E n, E f,$/;"	f	namespace:cml
matrix_perspective_LH	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective_LH(matrix<E,A,B,L>& m, E left, E right, E bottom,$/;"	f	namespace:cml
matrix_perspective_LH	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective_LH(matrix<E,A,B,L>& m, E width, E height, E n,$/;"	f	namespace:cml
matrix_perspective_RH	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective_RH(matrix<E,A,B,L>& m, E left, E right, E bottom,$/;"	f	namespace:cml
matrix_perspective_RH	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective_RH(matrix<E,A,B,L>& m, E width, E height, E n,$/;"	f	namespace:cml
matrix_perspective_xfov	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective_xfov(matrix<E,A,B,L>& m, E xfov, E aspect, E n,$/;"	f	namespace:cml
matrix_perspective_xfov_LH	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective_xfov_LH(matrix<E,A,B,L>& m, E xfov, E aspect, E n,$/;"	f	namespace:cml
matrix_perspective_xfov_RH	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective_xfov_RH(matrix<E,A,B,L>& m, E xfov, E aspect, E n,$/;"	f	namespace:cml
matrix_perspective_yfov	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective_yfov(matrix<E,A,B,L>& m, E yfov, E aspect, E n,$/;"	f	namespace:cml
matrix_perspective_yfov_LH	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective_yfov_LH(matrix<E,A,B,L>& m, E yfov, E aspect, E n,$/;"	f	namespace:cml
matrix_perspective_yfov_RH	hw5/cml/mathlib/matrix_projection.h	/^matrix_perspective_yfov_RH(matrix<E,A,B,L>& m, E yfov, E aspect, E n,$/;"	f	namespace:cml
matrix_pick	hw5/cml/mathlib/matrix_projection.h	/^matrix_pick($/;"	f	namespace:cml
matrix_print_h	hw5/cml/matrix/matrix_print.h	/^#define matrix_print_h$/;"	d
matrix_projection_h	hw5/cml/mathlib/matrix_projection.h	/^#define matrix_projection_h$/;"	d
matrix_promotions_h	hw5/cml/matrix/matrix_promotions.h	/^#define matrix_promotions_h$/;"	d
matrix_reflect	hw5/cml/mathlib/matrix_transform.h	/^matrix_reflect(matrix<E,A,B,L>& m, size_t axis)$/;"	f	namespace:cml
matrix_reflect_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_reflect_2D(matrix<E,A,B,L>& m, size_t axis)$/;"	f	namespace:cml
matrix_reflect_about_hplane	hw5/cml/mathlib/matrix_transform.h	/^matrix_reflect_about_hplane(matrix<E,A,B,L>& m, const VecT& normal)$/;"	f	namespace:cml
matrix_reflect_about_hplane_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_reflect_about_hplane_2D(matrix<E,A,B,L>&m, const VecT& normal)$/;"	f	namespace:cml
matrix_reflect_x	hw5/cml/mathlib/matrix_transform.h	/^matrix_reflect_x(matrix<E,A,B,L>& m) {$/;"	f	namespace:cml
matrix_reflect_x_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_reflect_x_2D(matrix<E,A,B,L>& m) {$/;"	f	namespace:cml
matrix_reflect_y	hw5/cml/mathlib/matrix_transform.h	/^matrix_reflect_y(matrix<E,A,B,L>& m) {$/;"	f	namespace:cml
matrix_reflect_y_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_reflect_y_2D(matrix<E,A,B,L>& m) {$/;"	f	namespace:cml
matrix_reflect_z	hw5/cml/mathlib/matrix_transform.h	/^matrix_reflect_z(matrix<E,A,B,L>& m) {$/;"	f	namespace:cml
matrix_result_tag	hw5/cml/et/tags.h	/^struct matrix_result_tag {};$/;"	s	namespace:cml::et
matrix_rotate_2D	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotate_2D(matrix<E,A,B,L>& m, E angle)$/;"	f	namespace:cml
matrix_rotate_about_local_axis	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotate_about_local_axis(matrix<E,A,B,L>& m, size_t axis, E angle)$/;"	f	namespace:cml
matrix_rotate_about_local_x	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotate_about_local_x(matrix<E,A,B,L>& m, E angle) {$/;"	f	namespace:cml
matrix_rotate_about_local_y	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotate_about_local_y(matrix<E,A,B,L>& m, E angle) {$/;"	f	namespace:cml
matrix_rotate_about_local_z	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotate_about_local_z(matrix<E,A,B,L>& m, E angle) {$/;"	f	namespace:cml
matrix_rotate_about_world_axis	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotate_about_world_axis(matrix<E,A,B,L>& m, size_t axis, E angle)$/;"	f	namespace:cml
matrix_rotate_about_world_x	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotate_about_world_x(matrix<E,A,B,L>& m, E angle) {$/;"	f	namespace:cml
matrix_rotate_about_world_y	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotate_about_world_y(matrix<E,A,B,L>& m, E angle) {$/;"	f	namespace:cml
matrix_rotate_about_world_z	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotate_about_world_z(matrix<E,A,B,L>& m, E angle) {$/;"	f	namespace:cml
matrix_rotation_2D	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_2D( matrix<E,A,B,L>& m, E angle)$/;"	f	namespace:cml
matrix_rotation_aim_at	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_aim_at($/;"	f	namespace:cml
matrix_rotation_aim_at_axial	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_aim_at_axial($/;"	f	namespace:cml
matrix_rotation_align	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_align($/;"	f	namespace:cml
matrix_rotation_align	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_align(matrix<E,A,B,L>& m, const VecT& align,$/;"	f	namespace:cml
matrix_rotation_align_2D	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_align_2D(matrix<E,A,B,L>& m, const VecT& align,$/;"	f	namespace:cml
matrix_rotation_align_axial	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_align_axial(matrix<E,A,B,L>& m, const VecT_1& align,$/;"	f	namespace:cml
matrix_rotation_align_viewplane	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_align_viewplane($/;"	f	namespace:cml
matrix_rotation_align_viewplane_LH	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_align_viewplane_LH($/;"	f	namespace:cml
matrix_rotation_align_viewplane_RH	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_align_viewplane_RH($/;"	f	namespace:cml
matrix_rotation_axis_angle	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_axis_angle(matrix<E,A,B,L>& m, const VecT& axis, E angle)$/;"	f	namespace:cml
matrix_rotation_difference	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_difference(const MatT_1& m1, const MatT_2& m2) {$/;"	f	namespace:cml
matrix_rotation_difference_2D	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_difference_2D(const MatT_1& m1, const MatT_2& m2) {$/;"	f	namespace:cml
matrix_rotation_euler	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_euler(matrix<E,A,B,L>& m, E angle_0, E angle_1, E angle_2,$/;"	f	namespace:cml
matrix_rotation_euler_derivatives	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_euler_derivatives($/;"	f	namespace:cml
matrix_rotation_h	hw5/cml/mathlib/matrix_rotation.h	/^#define matrix_rotation_h$/;"	d
matrix_rotation_quaternion	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_quaternion(matrix<E,A,B,L>& m, const QuatT& q)$/;"	f	namespace:cml
matrix_rotation_vec_to_vec	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_vec_to_vec($/;"	f	namespace:cml
matrix_rotation_world_axis	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_world_axis( matrix<E,A,B,L>& m, size_t axis, E angle)$/;"	f	namespace:cml
matrix_rotation_world_x	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_world_x(matrix<E,A,B,L>& m, E angle) {$/;"	f	namespace:cml
matrix_rotation_world_y	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_world_y(matrix<E,A,B,L>& m, E angle) {$/;"	f	namespace:cml
matrix_rotation_world_z	hw5/cml/mathlib/matrix_rotation.h	/^matrix_rotation_world_z(matrix<E,A,B,L>& m, E angle) {$/;"	f	namespace:cml
matrix_rowcol_h	hw5/cml/matrix/matrix_rowcol.h	/^#define matrix_rowcol_h$/;"	d
matrix_scale	hw5/cml/mathlib/matrix_transform.h	/^matrix_scale(matrix<E,A,B,L>& m, E scale_x, E scale_y, E scale_z)$/;"	f	namespace:cml
matrix_scale	hw5/cml/mathlib/matrix_transform.h	/^matrix_scale(matrix<E,A,B,L>& m, const VecT& scale)$/;"	f	namespace:cml
matrix_scale_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_scale_2D(matrix<E,A,B,L>& m, E scale_x, E scale_y)$/;"	f	namespace:cml
matrix_scale_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_scale_2D(matrix<E,A,B,L>& m, const VecT& scale)$/;"	f	namespace:cml
matrix_scale_along_axis	hw5/cml/mathlib/matrix_transform.h	/^matrix_scale_along_axis(matrix<E,A,B,L>&m, const VecT& axis, E scale)$/;"	f	namespace:cml
matrix_scale_along_axis_2D	hw5/cml/mathlib/matrix_transform.h	/^void matrix_scale_along_axis_2D(matrix<E,A,B,L>&  m, const VecT& axis,$/;"	f	namespace:cml
matrix_scale_rotation_angle	hw5/cml/mathlib/matrix_rotation.h	/^matrix_scale_rotation_angle(matrix<E,A,B,L>& m, E t,$/;"	f	namespace:cml
matrix_scale_rotation_angle_2D	hw5/cml/mathlib/matrix_rotation.h	/^matrix_scale_rotation_angle_2D($/;"	f	namespace:cml
matrix_set_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_basis_vector(matrix<E,A,B,L>& m, size_t i, const VecT& v)$/;"	f	namespace:cml
matrix_set_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_basis_vector_2D(matrix<E,A,B,L>& m, size_t i, const VecT& v)$/;"	f	namespace:cml
matrix_set_basis_vectors	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_basis_vectors($/;"	f	namespace:cml
matrix_set_basis_vectors_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_basis_vectors_2D($/;"	f	namespace:cml
matrix_set_translation	hw5/cml/mathlib/matrix_translation.h	/^matrix_set_translation(matrix<E,A,B,L>& m, E x, E y)$/;"	f	namespace:cml
matrix_set_translation	hw5/cml/mathlib/matrix_translation.h	/^matrix_set_translation(matrix<E,A,B,L>& m, E x, E y, E z)$/;"	f	namespace:cml
matrix_set_translation	hw5/cml/mathlib/matrix_translation.h	/^matrix_set_translation(matrix<E,A,B,L>& m, const VecT& translation)$/;"	f	namespace:cml
matrix_set_translation_2D	hw5/cml/mathlib/matrix_translation.h	/^matrix_set_translation_2D(matrix<E,A,B,L>& m, E x, E y)$/;"	f	namespace:cml
matrix_set_translation_2D	hw5/cml/mathlib/matrix_translation.h	/^matrix_set_translation_2D(matrix<E,A,B,L>& m, const VecT& translation)$/;"	f	namespace:cml
matrix_set_transposed_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_transposed_basis_vector(matrix<E,A,B,L>& m,size_t i,const VecT& v)$/;"	f	namespace:cml
matrix_set_transposed_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_transposed_basis_vector_2D($/;"	f	namespace:cml
matrix_set_transposed_basis_vectors	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_transposed_basis_vectors($/;"	f	namespace:cml
matrix_set_transposed_basis_vectors_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_transposed_basis_vectors_2D($/;"	f	namespace:cml
matrix_set_transposed_x_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_transposed_x_basis_vector(matrix<E,A,B,L>& m, const VecT& x) {$/;"	f	namespace:cml
matrix_set_transposed_x_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_transposed_x_basis_vector_2D(matrix<E,A,B,L>& m,const VecT& x) {$/;"	f	namespace:cml
matrix_set_transposed_y_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_transposed_y_basis_vector(matrix<E,A,B,L>& m, const VecT& y) {$/;"	f	namespace:cml
matrix_set_transposed_y_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_transposed_y_basis_vector_2D(matrix<E,A,B,L>& m,const VecT& y) {$/;"	f	namespace:cml
matrix_set_transposed_z_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_transposed_z_basis_vector(matrix<E,A,B,L>& m, const VecT& z) {$/;"	f	namespace:cml
matrix_set_x_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_x_basis_vector(matrix<E,A,B,L>& m, const VecT& x) {$/;"	f	namespace:cml
matrix_set_x_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_x_basis_vector_2D(matrix<E,A,B,L>& m, const VecT& x) {$/;"	f	namespace:cml
matrix_set_y_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_y_basis_vector(matrix<E,A,B,L>& m, const VecT& y) {$/;"	f	namespace:cml
matrix_set_y_basis_vector_2D	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_y_basis_vector_2D(matrix<E,A,B,L>& m, const VecT& y) {$/;"	f	namespace:cml
matrix_set_z_basis_vector	hw5/cml/mathlib/matrix_basis.h	/^matrix_set_z_basis_vector(matrix<E,A,B,L>& m, const VecT& z) {$/;"	f	namespace:cml
matrix_shear	hw5/cml/mathlib/matrix_transform.h	/^matrix_shear(matrix<E,A,B,L>& m, size_t axis, E shear_s, E shear_t)$/;"	f	namespace:cml
matrix_shear_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_shear_2D(matrix<E,A,B,L>& m, size_t axis, E shear)$/;"	f	namespace:cml
matrix_shear_x	hw5/cml/mathlib/matrix_transform.h	/^matrix_shear_x(matrix<E,A,B,L>& m, E shear_s, E shear_t) {$/;"	f	namespace:cml
matrix_shear_x_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_shear_x_2D(matrix<E,A,B,L>& m, E shear) {$/;"	f	namespace:cml
matrix_shear_y	hw5/cml/mathlib/matrix_transform.h	/^matrix_shear_y(matrix<E,A,B,L>& m, E shear_s, E shear_t) {$/;"	f	namespace:cml
matrix_shear_y_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_shear_y_2D(matrix<E,A,B,L>& m, E shear) {$/;"	f	namespace:cml
matrix_shear_z	hw5/cml/mathlib/matrix_transform.h	/^matrix_shear_z(matrix<E,A,B,L>& m, E shear_s, E shear_t) {$/;"	f	namespace:cml
matrix_size	hw5/cml/core/common.h	/^typedef std::pair<size_t,size_t> matrix_size;$/;"	t	namespace:cml
matrix_skew_symmetric	hw5/cml/mathlib/matrix_misc.h	/^matrix_skew_symmetric(matrix<E,A,B,L>& m, const VecT& v)$/;"	f	namespace:cml
matrix_skew_symmetric_2D	hw5/cml/mathlib/matrix_misc.h	/^matrix_skew_symmetric_2D(matrix<E,A,B,L>& m, E s)$/;"	f	namespace:cml
matrix_slerp	hw5/cml/mathlib/matrix_rotation.h	/^matrix_slerp(const MatT_1& m1, const MatT_2& m2, E t,$/;"	f	namespace:cml
matrix_slerp_2D	hw5/cml/mathlib/matrix_rotation.h	/^matrix_slerp_2D(const MatT_1& m1, const MatT_2& m2, E t,$/;"	f	namespace:cml
matrix_to_axis_angle	hw5/cml/mathlib/matrix_rotation.h	/^matrix_to_axis_angle($/;"	f	namespace:cml
matrix_to_euler	hw5/cml/mathlib/matrix_rotation.h	/^matrix_to_euler($/;"	f	namespace:cml
matrix_to_euler	hw5/cml/mathlib/matrix_rotation.h	/^void matrix_to_euler($/;"	f	namespace:cml
matrix_to_rotation_2D	hw5/cml/mathlib/matrix_rotation.h	/^matrix_to_rotation_2D(const MatT& m)$/;"	f	namespace:cml
matrix_total_order	hw5/cml/matrix/matrix_comparison.h	/^matrix_total_order(const LeftT& left, const RightT& right, OpT)$/;"	f	namespace:cml::detail
matrix_traits_h	hw5/cml/matrix/matrix_traits.h	/^#define matrix_traits_h$/;"	d
matrix_transform_h	hw5/cml/mathlib/matrix_transform.h	/^#define matrix_transform_h$/;"	d
matrix_translation	hw5/cml/mathlib/matrix_transform.h	/^matrix_translation(matrix<E,A,B,L>& m, E x, E y)$/;"	f	namespace:cml
matrix_translation	hw5/cml/mathlib/matrix_transform.h	/^matrix_translation(matrix<E,A,B,L>& m, E x, E y, E z)$/;"	f	namespace:cml
matrix_translation	hw5/cml/mathlib/matrix_transform.h	/^matrix_translation(matrix<E,A,B,L>& m, const VecT& translation)$/;"	f	namespace:cml
matrix_translation_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_translation_2D(matrix<E,A,B,L>& m, E x, E y)$/;"	f	namespace:cml
matrix_translation_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_translation_2D(matrix<E,A,B,L>& m, const VecT& translation)$/;"	f	namespace:cml
matrix_translation_h	hw5/cml/mathlib/matrix_translation.h	/^#define matrix_translation_h$/;"	d
matrix_transpose_h	hw5/cml/matrix/matrix_transpose.h	/^#define matrix_transpose_h$/;"	d
matrix_type	hw5/cml/matrix/dynamic.h	/^    typedef matrix<Element,generator_type,BasisOrient,Layout> matrix_type;$/;"	t	class:cml::matrix
matrix_type	hw5/cml/matrix/external.h	/^    typedef matrix<Element,generator_type,BasisOrient,Layout> matrix_type;$/;"	t	class:cml::matrix
matrix_type	hw5/cml/matrix/fixed.h	/^    typedef matrix<Element,generator_type,BasisOrient,Layout> matrix_type;$/;"	t	class:cml::matrix
matrix_type	hw5/cml/matrix/matrix_unroller.h	/^    typedef cml::matrix<E,AT,BO,L> matrix_type;$/;"	t	class:cml::et::detail::MatrixAssignmentUnroller
matrix_type	hw5/cml/matvec/matvec_promotions.h	/^    typedef cml::matrix<E1,AT1,BO,L> matrix_type;$/;"	t	struct:cml::et::MatVecPromote
matrix_type	hw5/cml/matvec/matvec_promotions.h	/^    typedef cml::matrix<E2,AT2,BO,L> matrix_type;$/;"	t	struct:cml::et::MatVecPromote
matrix_uniform_scale	hw5/cml/mathlib/matrix_transform.h	/^matrix_uniform_scale(matrix<E,A,B,L>& m, E scale) {$/;"	f	namespace:cml
matrix_uniform_scale_2D	hw5/cml/mathlib/matrix_transform.h	/^matrix_uniform_scale_2D(matrix<E,A,B,L>& m, E scale) {$/;"	f	namespace:cml
matrix_unroller_h	hw5/cml/matrix/matrix_unroller.h	/^#define matrix_unroller_h$/;"	d
matrix_viewport	hw5/cml/mathlib/matrix_projection.h	/^matrix_viewport(matrix<E,A,B,L>& m, E left, E right, E bottom,$/;"	f	namespace:cml
matrix_weak_order	hw5/cml/matrix/matrix_comparison.h	/^matrix_weak_order(const LeftT& left, const RightT& right, OpT)$/;"	f	namespace:cml::detail
matrixd	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, dynamic<> > matrixd;$/;"	t	namespace:cml
matrixd_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, dynamic<>, col_basis, col_major > matrixd_c;$/;"	t	namespace:cml
matrixd_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< double, dynamic<>, row_basis, row_major > matrixd_r;$/;"	t	namespace:cml
matrixf	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  dynamic<> > matrixf;$/;"	t	namespace:cml
matrixf_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  dynamic<>, col_basis, col_major > matrixf_c;$/;"	t	namespace:cml
matrixf_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< float,  dynamic<>, row_basis, row_major > matrixf_r;$/;"	t	namespace:cml
matrixi	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    dynamic<> > matrixi;$/;"	t	namespace:cml
matrixi_c	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    dynamic<>, col_basis, col_major > matrixi_c;$/;"	t	namespace:cml
matrixi_r	hw5/cml/mathlib/typedef.h	/^typedef matrix< int,    dynamic<>, row_basis, row_major > matrixi_r;$/;"	t	namespace:cml
matvec_mul_h	hw5/cml/matvec/matvec_mul.h	/^#define	matvec_mul_h$/;"	d
matvec_promotions_h	hw5/cml/matvec/matvec_promotions.h	/^#define matvec_promotions_h$/;"	d
max	hw5/cml/util.h	/^#undef max$/;"	d
maximize	hw5/cml/matrix/external.h	/^    void maximize(const matrix<E,AT,basis_orient,L>& v) {$/;"	f	class:cml::matrix
maximize	hw5/cml/vector/dynamic.h	/^    void maximize(const vector<E,AT>& v) {$/;"	f	class:cml::vector
maximize	hw5/cml/vector/external.h	/^    void maximize(const vector<E,AT>& v) {$/;"	f	class:cml::vector
maximize	hw5/cml/vector/fixed.h	/^    void maximize(const vector<E,AT>& v) {$/;"	f	class:cml::vector
memory_tag	hw5/cml/core/dynamic_1D.h	/^    typedef dynamic_memory_tag memory_tag;$/;"	t	class:cml::dynamic_1D
memory_tag	hw5/cml/core/dynamic_2D.h	/^    typedef dynamic_memory_tag memory_tag;$/;"	t	class:cml::dynamic_2D
memory_tag	hw5/cml/core/external_1D.h	/^    typedef external_memory_tag memory_tag;$/;"	t	class:cml::external_1D
memory_tag	hw5/cml/core/external_2D.h	/^    typedef external_memory_tag memory_tag;$/;"	t	class:cml::external_2D
memory_tag	hw5/cml/core/fixed_1D.h	/^    typedef fixed_memory_tag memory_tag;$/;"	t	class:cml::fixed_1D
memory_tag	hw5/cml/core/fixed_2D.h	/^    typedef fixed_memory_tag memory_tag;$/;"	t	class:cml::fixed_2D
memory_tag	hw5/cml/et/traits.h	/^    typedef fixed_memory_tag memory_tag;$/;"	t	struct:cml::et::ExprTraits
memory_tag	hw5/cml/matrix/dynamic.h	/^    typedef typename array_type::memory_tag memory_tag;$/;"	t	class:cml::matrix
memory_tag	hw5/cml/matrix/external.h	/^    typedef typename array_type::memory_tag memory_tag;$/;"	t	class:cml::matrix
memory_tag	hw5/cml/matrix/fixed.h	/^    typedef typename array_type::memory_tag memory_tag;$/;"	t	class:cml::matrix
memory_tag	hw5/cml/quaternion/quaternion.h	/^    typedef typename vector_type::memory_tag memory_tag;$/;"	t	class:cml::quaternion
memory_tag	hw5/cml/vector/dynamic.h	/^    typedef typename array_type::memory_tag memory_tag;$/;"	t	class:cml::vector
memory_tag	hw5/cml/vector/external.h	/^    typedef typename array_type::memory_tag memory_tag;$/;"	t	class:cml::vector
memory_tag	hw5/cml/vector/fixed.h	/^    typedef typename array_type::memory_tag memory_tag;$/;"	t	class:cml::vector
meta	hw5/cml/core/meta/switch.h	/^namespace meta {$/;"	n	namespace:cml
meta_if_h	hw5/cml/core/meta/if.h	/^#define meta_if_h$/;"	d
meta_switch_h	hw5/cml/core/meta/switch.h	/^#define meta_switch_h$/;"	d
min	hw5/cml/util.h	/^#undef min$/;"	d
minimize	hw5/cml/matrix/external.h	/^    void minimize(const matrix<E,AT,basis_orient,L>& v) {$/;"	f	class:cml::matrix
minimize	hw5/cml/vector/dynamic.h	/^    void minimize(const vector<E,AT>& v) {$/;"	f	class:cml::vector
minimize	hw5/cml/vector/external.h	/^    void minimize(const vector<E,AT>& v) {$/;"	f	class:cml::vector
minimize	hw5/cml/vector/fixed.h	/^    void minimize(const vector<E,AT>& v) {$/;"	f	class:cml::vector
misc_h	hw5/cml/mathlib/misc.h	/^#define misc_h$/;"	d
mul	hw5/cml/matrix/matrix_mul.h	/^mul(const LeftT& left, const RightT& right)$/;"	f	namespace:cml::detail
mul	hw5/cml/matvec/matvec_mul.h	/^mul(const LeftT& A, const RightT& x, mul_Ax)$/;"	f	namespace:cml::detail
mul	hw5/cml/matvec/matvec_mul.h	/^mul(const LeftT& x, const RightT& A, mul_xA)$/;"	f	namespace:cml::detail
mul_Ax	hw5/cml/matvec/matvec_mul.h	/^typedef true_type mul_Ax;$/;"	t	namespace:cml::detail
mul_xA	hw5/cml/matvec/matvec_mul.h	/^typedef false_type mul_xA;$/;"	t	namespace:cml::detail
n	hw5/triangle.h	/^        vector3 n[3];   \/\/ normal vector$/;"	m	class:triangle
negative_cross	hw5/cml/quaternion.h	/^struct negative_cross {$/;"	s	namespace:cml
next	hw5/cml/util.h	/^inline size_t next(size_t i, size_t N) {$/;"	f	namespace:cml
nlerp	hw5/cml/mathlib/interpolation.h	/^nlerp($/;"	f	namespace:cml::detail
nlerp	hw5/cml/mathlib/interpolation.h	/^nlerp(const T1& t1, const T2& t2, Real t)$/;"	f	namespace:cml
nlerp_f	hw5/cml/mathlib/interpolation.h	/^template< class MatT_1, class MatT_2 > struct nlerp_f<MatT_1,MatT_2,2>$/;"	s	namespace:cml::detail
nlerp_f	hw5/cml/mathlib/interpolation.h	/^template< class MatT_1, class MatT_2 > struct nlerp_f<MatT_1,MatT_2,3>$/;"	s	namespace:cml::detail
node_tag	hw5/cml/et/traits.h	/^    typedef expr_leaf_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
node_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef expr_node_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
node_tag	hw5/cml/matrix/matrix_rowcol.h	/^    typedef expr_node_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
node_tag	hw5/cml/matrix/matrix_traits.h	/^    typedef expr_leaf_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
node_tag	hw5/cml/matrix/matrix_transpose.h	/^    typedef expr_node_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
node_tag	hw5/cml/quaternion/conjugate.h	/^    typedef expr_node_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
node_tag	hw5/cml/quaternion/inverse.h	/^    typedef expr_node_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
node_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef expr_node_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
node_tag	hw5/cml/quaternion/quaternion_traits.h	/^    typedef expr_leaf_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
node_tag	hw5/cml/vector/vector_expr.h	/^    typedef expr_node_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
node_tag	hw5/cml/vector/vector_traits.h	/^    typedef expr_leaf_tag node_tag;$/;"	t	struct:cml::et::ExprTraits
norm	hw5/cml/quaternion/conjugate.h	/^    value_type norm() const {$/;"	f	class:cml::et::ConjugateOp
norm	hw5/cml/quaternion/inverse.h	/^    value_type norm() const {$/;"	f	class:cml::et::QuaternionInverseOp
norm	hw5/cml/quaternion/quaternion.h	/^    value_type norm() const {$/;"	f	class:cml::quaternion
norm	hw5/cml/quaternion/quaternion_expr.h	/^    value_type norm() const {$/;"	f	class:cml::et::BinaryQuaternionOp
norm	hw5/cml/quaternion/quaternion_expr.h	/^    value_type norm() const {$/;"	f	class:cml::et::QuaternionXpr
norm	hw5/cml/quaternion/quaternion_expr.h	/^    value_type norm() const {$/;"	f	class:cml::et::UnaryQuaternionOp
norm	hw5/cml/quaternion/quaternion_functions.h	/^norm(QUATXPR_ARG_TYPE arg)$/;"	f	namespace:cml
norm	hw5/cml/quaternion/quaternion_functions.h	/^norm(const quaternion<E,AT,OT,CT>& arg)$/;"	f	namespace:cml
normalize	hw5/cml/quaternion/conjugate.h	/^    temporary_type normalize() const {$/;"	f	class:cml::et::ConjugateOp
normalize	hw5/cml/quaternion/inverse.h	/^    temporary_type normalize() const {$/;"	f	class:cml::et::QuaternionInverseOp
normalize	hw5/cml/quaternion/quaternion.h	/^    quaternion_type& normalize() {$/;"	f	class:cml::quaternion
normalize	hw5/cml/quaternion/quaternion_expr.h	/^    temporary_type normalize() const {$/;"	f	class:cml::et::BinaryQuaternionOp
normalize	hw5/cml/quaternion/quaternion_expr.h	/^    temporary_type normalize() const {$/;"	f	class:cml::et::QuaternionXpr
normalize	hw5/cml/quaternion/quaternion_expr.h	/^    temporary_type normalize() const {$/;"	f	class:cml::et::UnaryQuaternionOp
normalize	hw5/cml/quaternion/quaternion_functions.h	/^normalize(QUATXPR_ARG_TYPE arg)$/;"	f	namespace:cml
normalize	hw5/cml/quaternion/quaternion_functions.h	/^normalize(const quaternion<E,AT,OT,CT>& arg)$/;"	f	namespace:cml
normalize	hw5/cml/vector/dynamic.h	/^    vector_type& normalize() {$/;"	f	class:cml::vector
normalize	hw5/cml/vector/external.h	/^    vector_type& normalize() {$/;"	f	class:cml::vector
normalize	hw5/cml/vector/fixed.h	/^    vector_type& normalize() {$/;"	f	class:cml::vector
normalize	hw5/cml/vector/vector_expr.h	/^    result_type normalize() const {$/;"	f	class:cml::et::BinaryVectorOp
normalize	hw5/cml/vector/vector_expr.h	/^    result_type normalize() const {$/;"	f	class:cml::et::UnaryVectorOp
normalize	hw5/cml/vector/vector_expr.h	/^    result_type normalize() const {$/;"	f	class:cml::et::VectorXpr
normalize	hw5/cml/vector/vector_functions.h	/^normalize(VECXPR_ARG_TYPE arg)$/;"	f	namespace:cml
normalize	hw5/cml/vector/vector_functions.h	/^normalize(const vector<E,AT>& arg)$/;"	f	namespace:cml
not_assignable_tag	hw5/cml/et/tags.h	/^struct not_assignable_tag {};$/;"	s	namespace:cml::et
not_assignable_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_type::assignable_tag not_assignable_tag;$/;"	t	struct:cml::et::ExprTraits
not_resizable_tag	hw5/cml/core/common.h	/^struct not_resizable_tag {};$/;"	s	namespace:cml
object	hw5/object.h	/^        object(const vector3& pos = vector3(0, 0, -1))$/;"	f	class:object
object	hw5/object.h	/^class object$/;"	c
objs	hw5/ray_tracer.h	/^        vector<shared_ptr<object> > objs;$/;"	m	class:scene
oned_tag	hw5/cml/core/common.h	/^struct oned_tag {};$/;"	s	namespace:cml
op_add	hw5/cml/vector/vector_products.h	/^                 typename op_mul::value_type> op_add;$/;"	t	struct:cml::detail::DotPromote
op_mul	hw5/cml/vector/vector_products.h	/^    typedef et::OpMul<left_value, right_value> op_mul;$/;"	t	struct:cml::detail::DotPromote
operator ()	hw5/cml/core/dynamic_2D.h	/^    const_reference operator()(size_t row, size_t col) const {$/;"	f	class:cml::dynamic_2D
operator ()	hw5/cml/core/dynamic_2D.h	/^    reference operator()(size_t row, size_t col) {$/;"	f	class:cml::dynamic_2D
operator ()	hw5/cml/core/external_2D.h	/^    const_reference operator()(size_t row, size_t col) const {$/;"	f	class:cml::external_2D
operator ()	hw5/cml/core/external_2D.h	/^    reference operator()(size_t row, size_t col) {$/;"	f	class:cml::external_2D
operator ()	hw5/cml/core/fixed_2D.h	/^    const_reference operator()(size_t row, size_t col) const {$/;"	f	class:cml::fixed_2D
operator ()	hw5/cml/core/fixed_2D.h	/^    reference operator()(size_t row, size_t col) {$/;"	f	class:cml::fixed_2D
operator ()	hw5/cml/et/size_checking.h	/^    size_type operator()(const LeftT& left, const RightT& right) const {$/;"	f	struct:cml::et::GetCheckedSize
operator ()	hw5/cml/et/size_checking.h	/^    size_type operator()(const LeftT&, const RightT&) const {$/;"	f	struct:cml::et::GetCheckedSize
operator ()	hw5/cml/mathlib/interpolation.h	/^    operator()($/;"	f	struct:cml::detail::nlerp_f
operator ()	hw5/cml/mathlib/interpolation.h	/^    operator()($/;"	f	struct:cml::detail::slerp_f
operator ()	hw5/cml/matrix/determinant.h	/^    typename MatT::value_type operator()(const MatT& M) const$/;"	f	struct:cml::detail::determinant_f
operator ()	hw5/cml/matrix/inverse.h	/^    typename MatT::temporary_type operator()(const MatT& M) const$/;"	f	struct:cml::detail::inverse_f
operator ()	hw5/cml/matrix/matrix_expr.h	/^    value_type operator()(size_t i, size_t j) const {$/;"	f	class:cml::et::BinaryMatrixOp
operator ()	hw5/cml/matrix/matrix_expr.h	/^    value_type operator()(size_t i, size_t j) const {$/;"	f	class:cml::et::MatrixXpr
operator ()	hw5/cml/matrix/matrix_expr.h	/^    value_type operator()(size_t i, size_t j) const {$/;"	f	class:cml::et::UnaryMatrixOp
operator ()	hw5/cml/matrix/matrix_transpose.h	/^    value_type operator()(size_t i, size_t j) const {$/;"	f	class:cml::et::MatrixTransposeOp
operator ()	hw5/cml/matrix/matrix_unroller.h	/^            void operator()(matrix_type& dest, const SrcT& src) const {$/;"	f	struct:cml::et::detail::MatrixAssignmentUnroller::Eval
operator ()	hw5/cml/matrix/matrix_unroller.h	/^        void operator()(matrix_type& dest, const SrcT& src) const {$/;"	f	struct:cml::et::detail::MatrixAssignmentUnroller::Eval
operator ()	hw5/cml/matrix/matrix_unroller.h	/^    void operator()($/;"	f	class:cml::et::detail::MatrixAssignmentUnroller
operator ()	hw5/cml/matrix/matrix_unroller.h	/^    void operator()(matrix_type& dest, const SrcT& src, cml::dynamic_size_tag)$/;"	f	class:cml::et::detail::MatrixAssignmentUnroller
operator ()	hw5/cml/quaternion/quaternion_mul.h	/^    Real operator()(Real a, Real b) const {$/;"	f	struct:cml::detail::SumOp
operator ()	hw5/cml/vector/vector_unroller.h	/^        result_type operator()($/;"	f	struct:cml::et::detail::VectorAccumulateUnroller::Eval
operator ()	hw5/cml/vector/vector_unroller.h	/^        void operator()(vector_type& dest, const SrcT& src) const {$/;"	f	struct:cml::et::detail::VectorAssignmentUnroller::Eval
operator ()	hw5/cml/vector/vector_unroller.h	/^    void operator()(vector_type& dest, const SrcT& src, cml::dynamic_size_tag)$/;"	f	class:cml::et::detail::VectorAssignmentUnroller
operator ()	hw5/cml/vector/vector_unroller.h	/^    void operator()(vector_type& dest, const SrcT& src, cml::fixed_size_tag)$/;"	f	class:cml::et::detail::VectorAssignmentUnroller
operator *	hw5/cml/matrix/matrix_mul.h	/^operator*(const et::MatrixXpr<XprT1>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matrix/matrix_mul.h	/^operator*(const et::MatrixXpr<XprT>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matrix/matrix_mul.h	/^operator*(const matrix<E,AT,BO,L>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matrix/matrix_mul.h	/^operator*(const matrix<E1,AT1,BO,L1>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matvec/matvec_mul.h	/^operator*(const et::MatrixXpr<XprT1>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matvec/matvec_mul.h	/^operator*(const et::MatrixXpr<XprT>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matvec/matvec_mul.h	/^operator*(const et::VectorXpr<XprT1>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matvec/matvec_mul.h	/^operator*(const et::VectorXpr<XprT>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matvec/matvec_mul.h	/^operator*(const matrix<E,AT,BO,L>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matvec/matvec_mul.h	/^operator*(const matrix<E1,AT1,BO,L>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matvec/matvec_mul.h	/^operator*(const vector<E,AT>& left,$/;"	f	namespace:cml
operator *	hw5/cml/matvec/matvec_mul.h	/^operator*(const vector<E1,AT1>& left,$/;"	f	namespace:cml
operator *	hw5/cml/quaternion/quaternion_mul.h	/^>::temporary_type operator*($/;"	f	namespace:cml
operator *	hw5/common.h	/^inline vector3 operator*(const vector3& lhs, const vector3& rhs)$/;"	f
operator *	hw5/object.h	/^        point3 operator*(const float s) const { return org + s*dir; }$/;"	f	class:ray
operator *=	hw5/cml/matrix/dynamic.h	/^    matrix_type& operator*=(const matrix_type& m) {$/;"	f	class:cml::matrix
operator *=	hw5/cml/matrix/dynamic.h	/^    operator*=(MATXPR_ARG_TYPE e) {$/;"	f	class:cml::matrix
operator *=	hw5/cml/matrix/dynamic.h	/^    operator*=(const matrix<E,AT,BO,L>& m) {$/;"	f	class:cml::matrix
operator *=	hw5/cml/quaternion/quaternion.h	/^    quaternion_type& operator*=(const quaternion_type& q) {$/;"	f	class:cml::quaternion
operator *=	hw5/cml/quaternion/quaternion.h	/^    template<typename XprT> quaternion_type& operator*=(QUATXPR_ARG_TYPE e) {$/;"	f	class:cml::quaternion
operator <	hw5/triangle.h	/^        bool operator<(const triangle& rhs) const$/;"	f	class:triangle
operator <<	hw5/cml/matrix/matrix_print.h	/^operator<<(std::ostream& os, const et::MatrixXpr<XprT>& m)$/;"	f	namespace:cml
operator <<	hw5/cml/matrix/matrix_print.h	/^operator<<(std::ostream& os, const matrix<E,AT,BO,L>& m)$/;"	f	namespace:cml
operator <<	hw5/cml/quaternion/quaternion_print.h	/^operator<<(std::ostream& os, const cml::quaternion<E,AT,scalar_first,CT>& q)$/;"	f	namespace:cml
operator <<	hw5/cml/quaternion/quaternion_print.h	/^operator<<(std::ostream& os, const cml::quaternion<E,AT,vector_first,CT>& q)$/;"	f	namespace:cml
operator <<	hw5/cml/quaternion/quaternion_print.h	/^operator<<(std::ostream& os, const et::QuaternionXpr<XprT>& q)$/;"	f	namespace:cml
operator <<	hw5/cml/vector/vector_print.h	/^operator<<(std::ostream& os, const et::VectorXpr<XprT>& v)$/;"	f	namespace:cml
operator <<	hw5/cml/vector/vector_print.h	/^operator<<(std::ostream& os, const vector<E,AT>& v)$/;"	f	namespace:cml
operator <<	hw5/object.h	/^inline std::ostream& operator<<(std::ostream& os, const ray& r)$/;"	f
operator <<	hw5/triangle.h	/^ostream& operator<<(ostream& os, const triangle& t)$/;"	f
operator []	hw5/cml/core/dynamic_1D.h	/^    const_reference operator[](size_t i) const { return m_data[i]; }$/;"	f	class:cml::dynamic_1D
operator []	hw5/cml/core/dynamic_1D.h	/^    reference operator[](size_t i) { return m_data[i]; }$/;"	f	class:cml::dynamic_1D
operator []	hw5/cml/core/external_1D.h	/^    const_reference operator[](size_t i) const { return m_data[i]; }$/;"	f	class:cml::external_1D
operator []	hw5/cml/core/external_1D.h	/^    reference operator[](size_t i) { return m_data[i]; }$/;"	f	class:cml::external_1D
operator []	hw5/cml/core/fixed_1D.h	/^    const_reference operator[](size_t i) const { return m_data[i]; }$/;"	f	class:cml::fixed_1D
operator []	hw5/cml/core/fixed_1D.h	/^    reference operator[](size_t i) { return m_data[i]; }$/;"	f	class:cml::fixed_1D
operator []	hw5/cml/matrix/matrix_rowcol.h	/^    value_type operator[](size_t i) const {$/;"	f	class:cml::et::MatrixColOp
operator []	hw5/cml/matrix/matrix_rowcol.h	/^    value_type operator[](size_t i) const {$/;"	f	class:cml::et::MatrixRowOp
operator []	hw5/cml/quaternion/conjugate.h	/^    value_type operator[](size_t i) const {$/;"	f	class:cml::et::ConjugateOp
operator []	hw5/cml/quaternion/inverse.h	/^    value_type operator[](size_t i) const {$/;"	f	class:cml::et::QuaternionInverseOp
operator []	hw5/cml/quaternion/quaternion.h	/^    const_reference operator[](size_t i) const { return m_q[i]; }$/;"	f	class:cml::quaternion
operator []	hw5/cml/quaternion/quaternion.h	/^    reference operator[](size_t i) { return m_q[i]; }$/;"	f	class:cml::quaternion
operator []	hw5/cml/quaternion/quaternion_expr.h	/^    value_type operator[](size_t i) const {$/;"	f	class:cml::et::BinaryQuaternionOp
operator []	hw5/cml/quaternion/quaternion_expr.h	/^    value_type operator[](size_t i) const {$/;"	f	class:cml::et::QuaternionXpr
operator []	hw5/cml/quaternion/quaternion_expr.h	/^    value_type operator[](size_t i) const {$/;"	f	class:cml::et::UnaryQuaternionOp
operator []	hw5/cml/vector/vector_expr.h	/^    value_type operator[](size_t i) const {$/;"	f	class:cml::et::BinaryVectorOp
operator []	hw5/cml/vector/vector_expr.h	/^    value_type operator[](size_t i) const {$/;"	f	class:cml::et::UnaryVectorOp
operator []	hw5/cml/vector/vector_expr.h	/^    value_type operator[](size_t i) const {$/;"	f	class:cml::et::VectorXpr
operator []	hw5/triangle.h	/^        const vector3& operator[](int idx) const    { return v[idx]; }$/;"	f	class:triangle
operator []	hw5/triangle.h	/^        vector3& operator[](int idx)                { return v[idx]; }$/;"	f	class:triangle
ops_h	hw5/cml/et/scalar_ops.h	/^#define ops_h$/;"	d
order_type	hw5/cml/quaternion/conjugate.h	/^    typedef typename result_type::order_type order_type;$/;"	t	class:cml::et::ConjugateOp
order_type	hw5/cml/quaternion/inverse.h	/^    typedef typename result_type::order_type order_type;$/;"	t	class:cml::et::QuaternionInverseOp
order_type	hw5/cml/quaternion/quaternion.h	/^    typedef Order order_type;$/;"	t	class:cml::quaternion
order_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::order_type order_type;$/;"	t	class:cml::et::BinaryQuaternionOp
order_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::order_type order_type;$/;"	t	class:cml::et::QuaternionXpr
order_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::order_type order_type;$/;"	t	class:cml::et::UnaryQuaternionOp
org	hw5/object.h	/^    vector3 org;$/;"	m	class:ray
orthonormal_basis	hw5/cml/mathlib/vector_ortho.h	/^orthonormal_basis($/;"	f	namespace:cml
orthonormal_basis	hw5/cml/mathlib/vector_ortho.h	/^void orthonormal_basis($/;"	f	namespace:cml
orthonormal_basis_2D	hw5/cml/mathlib/vector_ortho.h	/^void orthonormal_basis_2D($/;"	f	namespace:cml
orthonormal_basis_axial	hw5/cml/mathlib/vector_ortho.h	/^void orthonormal_basis_axial($/;"	f	namespace:cml
orthonormal_basis_viewplane	hw5/cml/mathlib/vector_ortho.h	/^void orthonormal_basis_viewplane($/;"	f	namespace:cml
orthonormal_basis_viewplane_LH	hw5/cml/mathlib/vector_ortho.h	/^void orthonormal_basis_viewplane_LH($/;"	f	namespace:cml
orthonormal_basis_viewplane_RH	hw5/cml/mathlib/vector_ortho.h	/^void orthonormal_basis_viewplane_RH($/;"	f	namespace:cml
orthonormalize	hw5/cml/mathlib/vector_ortho.h	/^orthonormalize(vector<E,A>& v0, vector<E,A>& v1, vector<E,A>& v2,$/;"	f	namespace:cml
orthonormalize	hw5/cml/mathlib/vector_ortho.h	/^orthonormalize(vector<E,A>& v0, vector<E,A>& v1,$/;"	f	namespace:cml
other	hw5/cml/external.h	/^    template<int D> struct rebind { typedef external<D> other; };$/;"	t	struct:cml::external::rebind
other	hw5/cml/fixed.h	/^    template<int D> struct rebind { typedef fixed<D> other; };$/;"	t	struct:cml::fixed::rebind
outer	hw5/cml/vector/vector_products.h	/^outer(const LeftT& left, const RightT& right)$/;"	f	namespace:cml
p	hw5/cml/quaternion/quaternion_dot.h	/^dot(QUATXPR_ARG_TYPE_N(1) p, QUATXPR_ARG_TYPE_N(2) q)$/;"	m	namespace:cml
pack_axis_order	hw5/cml/mathlib/helper.h	/^inline AxisOrder pack_axis_order(size_t i, bool odd) {$/;"	f	namespace:cml::detail
perp	hw5/cml/mathlib/vector_misc.h	/^perp(const VecT& v)$/;"	f	namespace:cml
perp_dot	hw5/cml/vector/vector_products.h	/^perp_dot(const LeftT& left, const RightT& right)$/;"	f	namespace:cml
pi	hw5/cml/constants.h	/^    static Float pi()          { return Float(M_PI); }$/;"	f	struct:cml::constants
pi_over_2	hw5/cml/constants.h	/^    static Float pi_over_2()   { return Float(M_PI\/2.); }$/;"	f	struct:cml::constants
pi_over_4	hw5/cml/constants.h	/^    static Float pi_over_4()   { return Float(M_PI\/4.); }$/;"	f	struct:cml::constants
picking_h	hw5/cml/mathlib/picking.h	/^#define picking_h$/;"	d
placeholder	hw5/cml/mathlib/epsilon.h	/^    static T placeholder() {$/;"	f	struct:cml::epsilon
point3	hw5/common.h	/^typedef vector3 point3;$/;"	t
pointer	hw5/cml/core/dynamic_1D.h	/^    typedef typename allocator_type::pointer pointer; $/;"	t	class:cml::dynamic_1D
pointer	hw5/cml/core/dynamic_2D.h	/^    typedef typename allocator_type::pointer pointer; $/;"	t	class:cml::dynamic_2D
pointer	hw5/cml/core/external_1D.h	/^    typedef Element* pointer;$/;"	t	class:cml::external_1D
pointer	hw5/cml/core/external_2D.h	/^    typedef Element* pointer;$/;"	t	class:cml::external_2D
pointer	hw5/cml/core/fixed_1D.h	/^    typedef Element* pointer;$/;"	t	class:cml::fixed_1D
pointer	hw5/cml/core/fixed_2D.h	/^    typedef Element* pointer;$/;"	t	class:cml::fixed_2D
polar_to_cartesian	hw5/cml/mathlib/coord_conversion.h	/^polar_to_cartesian(E radius, E theta, vector<E,A>& v)$/;"	f	namespace:cml
pos	hw5/object.h	/^        point3 pos;$/;"	m	class:object
positive_cross	hw5/cml/quaternion.h	/^struct positive_cross {$/;"	s	namespace:cml
precisionRank	hw5/cml/et/scalar_promotions.h	/^    enum { precisionRank = 0,$/;"	e	enum:cml::et::detail::precision_trait::__anon22
precision_trait	hw5/cml/et/scalar_promotions.h	/^struct precision_trait {$/;"	s	namespace:cml::et::detail
prev	hw5/cml/util.h	/^inline size_t prev(size_t i, size_t N) {$/;"	f	namespace:cml
process	hw5/ray_tracer.h	/^    void process(const scene& s, const ray& in_ray, int depth)$/;"	f	class:ray_tree_node
project_point	hw5/cml/mathlib/projection.h	/^vector< typename VecT::value_type, fixed<3> > project_point($/;"	f	namespace:cml
project_to_hplane	hw5/cml/mathlib/vector_misc.h	/^project_to_hplane(const VecT_1& v, const VecT_2& n)$/;"	f	namespace:cml
projection_h	hw5/cml/mathlib/projection.h	/^#define projection_h$/;"	d
promote	hw5/cml/et/array_promotions.h	/^struct promote<A1,A2,oned_tag,oned_tag,dynamic_size_tag>$/;"	s	namespace:cml::et::detail
promote	hw5/cml/et/array_promotions.h	/^struct promote<A1,A2,oned_tag,oned_tag,fixed_size_tag>$/;"	s	namespace:cml::et::detail
promote	hw5/cml/et/array_promotions.h	/^struct promote<A1,A2,oned_tag,twod_tag,dynamic_size_tag>$/;"	s	namespace:cml::et::detail
promote	hw5/cml/et/array_promotions.h	/^struct promote<A1,A2,oned_tag,twod_tag,fixed_size_tag>$/;"	s	namespace:cml::et::detail
promote	hw5/cml/et/array_promotions.h	/^struct promote<A1,A2,twod_tag,oned_tag,dynamic_size_tag>$/;"	s	namespace:cml::et::detail
promote	hw5/cml/et/array_promotions.h	/^struct promote<A1,A2,twod_tag,oned_tag,fixed_size_tag>$/;"	s	namespace:cml::et::detail
promote	hw5/cml/et/array_promotions.h	/^struct promote<A1,A2,twod_tag,twod_tag,dynamic_size_tag>$/;"	s	namespace:cml::et::detail
promote	hw5/cml/et/array_promotions.h	/^struct promote<A1,A2,twod_tag,twod_tag,fixed_size_tag>$/;"	s	namespace:cml::et::detail
promote2	hw5/cml/et/scalar_promotions.h	/^struct promote2 {$/;"	s	namespace:cml::et::detail
promote2	hw5/cml/et/scalar_promotions.h	/^struct promote2<T1,T2,0> {$/;"	s	namespace:cml::et::detail
promoteToT1	hw5/cml/et/scalar_promotions.h	/^      promoteToT1 = (knowBothRanks ? T1IsBetter : defaultPromotion) $/;"	e	enum:cml::et::detail::promote_trait::__anon24
promote_trait	hw5/cml/et/scalar_promotions.h	/^struct promote_trait {$/;"	s	namespace:cml::et::detail
promoted_array	hw5/cml/matrix/matrix_promotions.h	/^            >::type promoted_array;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
promoted_array	hw5/cml/matvec/matvec_promotions.h	/^    >::type promoted_array;$/;"	t	struct:cml::et::MatVecPromote
promoted_array	hw5/cml/vector/vector_promotions.h	/^    >::type promoted_array;$/;"	t	struct:cml::et::VectorPromote
promoted_layout	hw5/cml/et/array_promotions.h	/^        ::promoted_layout promoted_layout;$/;"	t	struct:cml::et::detail::promote
promoted_layout	hw5/cml/et/array_promotions.h	/^    typedef CML_DEFAULT_ARRAY_LAYOUT promoted_layout;$/;"	t	struct:cml::et::detail::deduce_layout
promoted_matrix	hw5/cml/vector/vector_products.h	/^        left_type,right_type>::temporary_type promoted_matrix;$/;"	t	struct:cml::detail::OuterPromote
promoted_scalar	hw5/cml/et/array_promotions.h	/^        left_scalar,right_scalar>::type promoted_scalar;$/;"	t	struct:cml::et::detail::promote
promoted_scalar	hw5/cml/vector/vector_products.h	/^    typedef typename op_add::value_type promoted_scalar;$/;"	t	struct:cml::detail::DotPromote
promoted_size_tag	hw5/cml/et/array_promotions.h	/^    >::result promoted_size_tag;$/;"	t	struct:cml::et::ArrayPromote
promoted_vector	hw5/cml/quaternion/quaternion_promotions.h	/^        >::type promoted_vector;$/;"	t	struct:cml::et::QuaternionPromote
promoted_vector	hw5/cml/vector/vector_products.h	/^        left_type,right_type>::temporary_type promoted_vector;$/;"	t	struct:cml::detail::CrossPromote
pt	hw5/object.h	/^    const point3 pt;$/;"	m	struct:intersect_info
quaternion	hw5/cml/quaternion/quaternion.h	/^        quaternion(VECXPR_ARG_TYPE e) : m_q(e) {}$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^        quaternion(const value_type& s, VECXPR_ARG_TYPE e) {$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    quaternion($/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    quaternion() {}$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    quaternion(Element* const array) : m_q(array) {}$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    quaternion(const imaginary_type& v, const value_type& s) {$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    quaternion(const quaternion_type& q) : m_q(q.m_q) {}$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    quaternion(const value_type v[3], const value_type& s) {$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    quaternion(const value_type v[4]) : m_q(v) {}$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    quaternion(const value_type& s, const imaginary_type& v) {$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    quaternion(const value_type& s, const value_type v[3]) {$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    quaternion(const vector_type& v) : m_q(v) {}$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    template<typename E, class AT> quaternion($/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^    template<typename XprT> quaternion(QUATXPR_ARG_TYPE e) {$/;"	f	class:cml::quaternion
quaternion	hw5/cml/quaternion/quaternion.h	/^class quaternion$/;"	c	namespace:cml
quaternion_basis_h	hw5/cml/mathlib/quaternion_basis.h	/^#define quaternion_basis_h$/;"	d
quaternion_comparison_h	hw5/cml/quaternion/quaternion_comparison.h	/^#define quaternion_comparison_h$/;"	d
quaternion_dot	hw5/cml/quaternion/quaternion_dot.h	/^quaternion_dot(const LeftT& p, const RightT& q)$/;"	f	namespace:cml::detail
quaternion_dot_h	hw5/cml/quaternion/quaternion_dot.h	/^#define quaternion_dot_h$/;"	d
quaternion_expr_h	hw5/cml/quaternion/quaternion_expr.h	/^#define quaternion_expr_h$/;"	d
quaternion_functions_h	hw5/cml/quaternion/quaternion_functions.h	/^#define quaternion_functions_h$/;"	d
quaternion_get_basis_vector	hw5/cml/mathlib/quaternion_basis.h	/^quaternion_get_basis_vector(const QuatT& q, size_t i)$/;"	f	namespace:cml
quaternion_get_basis_vectors	hw5/cml/mathlib/quaternion_basis.h	/^quaternion_get_basis_vectors($/;"	f	namespace:cml
quaternion_get_x_basis_vector	hw5/cml/mathlib/quaternion_basis.h	/^quaternion_get_x_basis_vector(const QuatT& q) {$/;"	f	namespace:cml
quaternion_get_y_basis_vector	hw5/cml/mathlib/quaternion_basis.h	/^quaternion_get_y_basis_vector(const QuatT& q) {$/;"	f	namespace:cml
quaternion_get_z_basis_vector	hw5/cml/mathlib/quaternion_basis.h	/^quaternion_get_z_basis_vector(const QuatT& q) {$/;"	f	namespace:cml
quaternion_h	hw5/cml/quaternion/quaternion.h	/^#define quaternion_h$/;"	d
quaternion_inverse_h	hw5/cml/quaternion/inverse.h	/^#define quaternion_inverse_h$/;"	d
quaternion_mul_h	hw5/cml/quaternion/quaternion_mul.h	/^#define quaternion_mul_h$/;"	d
quaternion_ops_h	hw5/cml/quaternion/quaternion_ops.h	/^#define quaternion_ops_h$/;"	d
quaternion_print_h	hw5/cml/quaternion/quaternion_print.h	/^#define quaternion_print_h$/;"	d
quaternion_promotions_h	hw5/cml/quaternion/quaternion_promotions.h	/^#define quaternion_promotions_h$/;"	d
quaternion_result_tag	hw5/cml/et/tags.h	/^struct quaternion_result_tag {};$/;"	s	namespace:cml::et
quaternion_rotate_about_local_axis	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotate_about_local_axis(quaternion<E,A,O,C>& q,size_t axis,E angle)$/;"	f	namespace:cml
quaternion_rotate_about_local_x	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotate_about_local_x(quaternion<E,A,O,C>& q, E angle) {$/;"	f	namespace:cml
quaternion_rotate_about_local_y	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotate_about_local_y(quaternion<E,A,O,C>& q, E angle) {$/;"	f	namespace:cml
quaternion_rotate_about_local_z	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotate_about_local_z(quaternion<E,A,O,C>& q, E angle) {$/;"	f	namespace:cml
quaternion_rotate_about_world_axis	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotate_about_world_axis(quaternion<E,A,O,C>& q,size_t axis,E angle)$/;"	f	namespace:cml
quaternion_rotate_about_world_x	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotate_about_world_x(quaternion<E,A,O,C>& q, E angle) {$/;"	f	namespace:cml
quaternion_rotate_about_world_y	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotate_about_world_y(quaternion<E,A,O,C>& q, E angle) {$/;"	f	namespace:cml
quaternion_rotate_about_world_z	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotate_about_world_z(quaternion<E,A,O,C>& q, E angle) {$/;"	f	namespace:cml
quaternion_rotation_aim_at	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_aim_at($/;"	f	namespace:cml
quaternion_rotation_aim_at_axial	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_aim_at_axial($/;"	f	namespace:cml
quaternion_rotation_align	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_align($/;"	f	namespace:cml
quaternion_rotation_align	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_align(quaternion<E,A,O,C>& q, const VecT& align,$/;"	f	namespace:cml
quaternion_rotation_align_axial	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_align_axial(quaternion<E,A,O,C>& q, const VecT_1& align,$/;"	f	namespace:cml
quaternion_rotation_align_viewplane	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_align_viewplane($/;"	f	namespace:cml
quaternion_rotation_align_viewplane_LH	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_align_viewplane_LH($/;"	f	namespace:cml
quaternion_rotation_align_viewplane_RH	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_align_viewplane_RH($/;"	f	namespace:cml
quaternion_rotation_axis_angle	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_axis_angle($/;"	f	namespace:cml
quaternion_rotation_difference	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_difference($/;"	f	namespace:cml::detail
quaternion_rotation_difference	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_difference(const QuatT_1& q1, const QuatT_2& q2) {$/;"	f	namespace:cml
quaternion_rotation_euler	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_euler($/;"	f	namespace:cml
quaternion_rotation_h	hw5/cml/mathlib/quaternion_rotation.h	/^#define quaternion_rotation_h$/;"	d
quaternion_rotation_matrix	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_matrix(quaternion<E,A,O,C>& q, const MatT& m)$/;"	f	namespace:cml
quaternion_rotation_vec_to_vec	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_vec_to_vec($/;"	f	namespace:cml
quaternion_rotation_world_axis	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_world_axis(quaternion<E,A,O,C>& q, size_t axis, E angle)$/;"	f	namespace:cml
quaternion_rotation_world_x	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_world_x(quaternion<E,A,O,C>& q, E angle) {$/;"	f	namespace:cml
quaternion_rotation_world_y	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_world_y(quaternion<E,A,O,C>& q, E angle) {$/;"	f	namespace:cml
quaternion_rotation_world_z	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_rotation_world_z(quaternion<E,A,O,C>& q, E angle) {$/;"	f	namespace:cml
quaternion_scale_angle	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_scale_angle(quaternion<E,A,O,C>& q, E t,$/;"	f	namespace:cml
quaternion_to_axis_angle	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_to_axis_angle($/;"	f	namespace:cml
quaternion_to_euler	hw5/cml/mathlib/quaternion_rotation.h	/^quaternion_to_euler($/;"	f	namespace:cml
quaternion_total_order	hw5/cml/quaternion/quaternion_comparison.h	/^quaternion_total_order(const LeftT& left, const RightT& right, OpT)$/;"	f	namespace:cml::detail
quaternion_traits_h	hw5/cml/quaternion/quaternion_traits.h	/^#define quaternion_traits_h$/;"	d
quaternion_type	hw5/cml/quaternion/quaternion.h	/^        quaternion_type;$/;"	t	class:cml::quaternion
quaternion_weak_order	hw5/cml/quaternion/quaternion_comparison.h	/^quaternion_weak_order(const LeftT& left, const RightT& right, OpT)$/;"	f	namespace:cml::detail
quaterniond	hw5/cml/mathlib/typedef.h	/^typedef quaternion<double> quaterniond;$/;"	t	namespace:cml
quaterniond_n	hw5/cml/mathlib/typedef.h	/^    quaterniond_n;$/;"	t	namespace:cml
quaterniond_p	hw5/cml/mathlib/typedef.h	/^    quaterniond_p;$/;"	t	namespace:cml
quaternionf	hw5/cml/mathlib/typedef.h	/^typedef quaternion<float> quaternionf;$/;"	t	namespace:cml
quaternionf_n	hw5/cml/mathlib/typedef.h	/^    quaternionf_n;$/;"	t	namespace:cml
quaternionf_p	hw5/cml/mathlib/typedef.h	/^    quaternionf_p;$/;"	t	namespace:cml
quaternionf_p	hw5/common.h	/^typedef cml::quaternionf_p quaternionf_p;$/;"	t
quatop_macros_h	hw5/cml/quaternion/quatop_macros.h	/^#define quatop_macros_h$/;"	d
r	hw5/object.h	/^        float r; \/\/ radius$/;"	m	class:sphere
r	hw5/ray_tracer.h	/^    shared_ptr<ray_tree_node> r;$/;"	m	class:ray_tree_node
rad	hw5/cml/util.h	/^T rad(T theta) {$/;"	f	namespace:cml
rad_per_deg	hw5/cml/constants.h	/^    static Float rad_per_deg() { return Float(M_PI\/180.); }$/;"	f	struct:cml::constants
random	hw5/cml/matrix/dynamic.h	/^    void random(ELEMENT_ARG_TYPE min, ELEMENT_ARG_TYPE max) {$/;"	f	class:cml::matrix
random	hw5/cml/matrix/external.h	/^    void random(ELEMENT_ARG_TYPE min, ELEMENT_ARG_TYPE max) {$/;"	f	class:cml::matrix
random	hw5/cml/matrix/fixed.h	/^    void random(ELEMENT_ARG_TYPE min, ELEMENT_ARG_TYPE max) {$/;"	f	class:cml::matrix
random	hw5/cml/quaternion/quaternion.h	/^    void random(value_type min, value_type max) {$/;"	f	class:cml::quaternion
random	hw5/cml/vector/dynamic.h	/^    void random(value_type min, value_type max) {$/;"	f	class:cml::vector
random	hw5/cml/vector/external.h	/^    void random(value_type min, value_type max) {$/;"	f	class:cml::vector
random	hw5/cml/vector/fixed.h	/^    void random(value_type min, value_type max) {$/;"	f	class:cml::vector
random_binary	hw5/cml/util.h	/^inline size_t random_binary() {$/;"	f	namespace:cml
random_integer	hw5/cml/util.h	/^inline long random_integer(long min, long max) {$/;"	f	namespace:cml
random_polar	hw5/cml/util.h	/^inline int random_polar() {$/;"	f	namespace:cml
random_real	hw5/cml/util.h	/^T random_real(T min, T max) {$/;"	f	namespace:cml
random_unit	hw5/cml/mathlib/vector_misc.h	/^random_unit(vector<E,A>& v)$/;"	f	namespace:cml
random_unit	hw5/cml/mathlib/vector_misc.h	/^random_unit(vector<E,A>& v, const VecT& axis, E theta)$/;"	f	namespace:cml
random_unit	hw5/cml/util.h	/^inline double random_unit() {$/;"	f	namespace:cml
ray	hw5/object.h	/^        ray(const point3& org, const vector3& dir = -Z, float refr_idx = REFR_AIR)$/;"	f	class:ray
ray	hw5/object.h	/^class ray$/;"	c
ray_tracer	hw5/ray_tracer.h	/^class ray_tracer$/;"	c
ray_tree_node	hw5/ray_tracer.h	/^    ray_tree_node(const scene& s, const ray& in_ray, int depth = 0)$/;"	f	class:ray_tree_node
ray_tree_node	hw5/ray_tracer.h	/^class ray_tree_node$/;"	c
real	hw5/cml/quaternion/conjugate.h	/^    value_type real() const {$/;"	f	class:cml::et::ConjugateOp
real	hw5/cml/quaternion/inverse.h	/^    value_type real() const {$/;"	f	class:cml::et::QuaternionInverseOp
real	hw5/cml/quaternion/quaternion.h	/^    value_type real() const { return m_q[W]; }$/;"	f	class:cml::quaternion
real	hw5/cml/quaternion/quaternion_expr.h	/^    value_type real() const {$/;"	f	class:cml::et::BinaryQuaternionOp
real	hw5/cml/quaternion/quaternion_expr.h	/^    value_type real() const {$/;"	f	class:cml::et::QuaternionXpr
real	hw5/cml/quaternion/quaternion_expr.h	/^    value_type real() const {$/;"	f	class:cml::et::UnaryQuaternionOp
real	hw5/cml/quaternion/quaternion_functions.h	/^real(const et::QuaternionXpr<XprT>& e)$/;"	f	namespace:cml
real	hw5/cml/quaternion/quaternion_functions.h	/^real(const quaternion<E,AT,OT,CT>& q)$/;"	f	namespace:cml
rebind	hw5/cml/external.h	/^    template<int D> struct rebind { typedef external<D> other; };$/;"	s	struct:cml::external
rebind	hw5/cml/fixed.h	/^    template<int D> struct rebind { typedef fixed<D> other; };$/;"	s	struct:cml::fixed
reference	hw5/cml/core/dynamic_1D.h	/^    typedef typename allocator_type::reference reference; $/;"	t	class:cml::dynamic_1D
reference	hw5/cml/core/dynamic_2D.h	/^    typedef typename allocator_type::reference reference; $/;"	t	class:cml::dynamic_2D
reference	hw5/cml/core/external_1D.h	/^    typedef Element& reference;$/;"	t	class:cml::external_1D
reference	hw5/cml/core/external_2D.h	/^    typedef Element& reference;$/;"	t	class:cml::external_2D
reference	hw5/cml/core/fixed_1D.h	/^    typedef Element& reference;$/;"	t	class:cml::fixed_1D
reference	hw5/cml/core/fixed_2D.h	/^    typedef Element& reference;$/;"	t	class:cml::fixed_2D
reference	hw5/cml/et/traits.h	/^    typedef double& reference;$/;"	t	struct:cml::et::ExprTraits
reference	hw5/cml/et/traits.h	/^    typedef float& reference;$/;"	t	struct:cml::et::ExprTraits
reference	hw5/cml/matrix/dynamic.h	/^    typedef typename array_type::reference reference;$/;"	t	class:cml::matrix
reference	hw5/cml/matrix/external.h	/^    typedef typename array_type::reference reference;$/;"	t	class:cml::matrix
reference	hw5/cml/matrix/fixed.h	/^    typedef typename array_type::reference reference;$/;"	t	class:cml::matrix
reference	hw5/cml/matrix/matrix_traits.h	/^    typedef typename expr_type::expr_reference reference;$/;"	t	struct:cml::et::ExprTraits
reference	hw5/cml/quaternion/quaternion.h	/^    typedef typename vector_type::reference reference;$/;"	t	class:cml::quaternion
reference	hw5/cml/quaternion/quaternion_traits.h	/^    typedef typename expr_type::expr_reference reference;$/;"	t	struct:cml::et::ExprTraits
reference	hw5/cml/vector/dynamic.h	/^    typedef typename array_type::reference reference;$/;"	t	class:cml::vector
reference	hw5/cml/vector/external.h	/^    typedef typename array_type::reference reference;$/;"	t	class:cml::vector
reference	hw5/cml/vector/fixed.h	/^    typedef typename array_type::reference reference;$/;"	t	class:cml::vector
reference	hw5/cml/vector/vector_traits.h	/^    typedef typename expr_type::expr_reference reference;$/;"	t	struct:cml::et::ExprTraits
refl	hw5/object.h	/^    const vector3 refl;$/;"	m	struct:intersect_info
refr	hw5/object.h	/^    const vector3 refr;$/;"	m	struct:intersect_info
refr_idx	hw5/object.h	/^        float refr_idx;$/;"	m	class:object
refr_idx	hw5/object.h	/^    float refr_idx;$/;"	m	class:ray
remove_const	hw5/cml/core/meta/common.h	/^template<typename T> struct remove_const {$/;"	s	namespace:cml
remove_reference	hw5/cml/core/meta/common.h	/^template<typename T> struct remove_reference {$/;"	s	namespace:cml
res	hw5/ray_tracer.h	/^    static const int res = 100; \/\/ 0.01$/;"	m	class:ray_tracer
reshape	hw5/hw5.cpp	/^void reshape(int w, int h)$/;"	f
resizable_tag	hw5/cml/core/common.h	/^struct resizable_tag {};$/;"	s	namespace:cml
resize	hw5/cml/core/dynamic_1D.h	/^    void resize(size_t s) {$/;"	f	class:cml::dynamic_1D
resize	hw5/cml/core/dynamic_2D.h	/^    void resize(size_t rows, size_t cols) {$/;"	f	class:cml::dynamic_2D
resizing_tag	hw5/cml/core/dynamic_1D.h	/^    typedef resizable_tag resizing_tag;$/;"	t	class:cml::dynamic_1D
resizing_tag	hw5/cml/core/dynamic_2D.h	/^    typedef resizable_tag resizing_tag;$/;"	t	class:cml::dynamic_2D
resizing_tag	hw5/cml/core/external_1D.h	/^    typedef not_resizable_tag resizing_tag;$/;"	t	class:cml::external_1D
resizing_tag	hw5/cml/core/external_2D.h	/^    typedef not_resizable_tag resizing_tag;$/;"	t	class:cml::external_2D
resizing_tag	hw5/cml/core/fixed_1D.h	/^    typedef not_resizable_tag resizing_tag;$/;"	t	class:cml::fixed_1D
resizing_tag	hw5/cml/core/fixed_2D.h	/^    typedef not_resizable_tag resizing_tag;$/;"	t	class:cml::fixed_2D
resizing_tag	hw5/cml/matrix/dynamic.h	/^    typedef typename array_type::resizing_tag resizing_tag;$/;"	t	class:cml::matrix
resizing_tag	hw5/cml/matrix/external.h	/^    typedef typename array_type::resizing_tag resizing_tag;$/;"	t	class:cml::matrix
resizing_tag	hw5/cml/vector/dynamic.h	/^    typedef typename array_type::resizing_tag resizing_tag;$/;"	t	class:cml::vector
resizing_tag	hw5/cml/vector/external.h	/^    typedef typename array_type::resizing_tag resizing_tag;$/;"	t	class:cml::vector
resizing_tag	hw5/cml/vector/vector_traits.h	/^    typedef typename expr_type::resizing_tag resizing_tag;$/;"	t	struct:cml::et::ExprTraits
result	hw5/cml/core/cml_assert.h	/^    typedef true_type result;$/;"	t	struct:cml::STATIC_ASSERTION_FAILURE
result	hw5/cml/core/cml_assert.h	/^    typedef true_type result;$/;"	t	struct:cml::STATIC_ASSERTION_FAILURE_M
result	hw5/cml/core/cml_assert.h	/^    typename M::bogus result;$/;"	m	struct:cml::STATIC_ASSERTION_FAILURE_M
result	hw5/cml/core/meta/common.h	/^    typedef false_type result;$/;"	t	struct:cml::is_true
result	hw5/cml/core/meta/common.h	/^    typedef false_type result;$/;"	t	struct:cml::same_type
result	hw5/cml/core/meta/common.h	/^    typedef true_type result;$/;"	t	struct:cml::is_true
result	hw5/cml/core/meta/common.h	/^    typedef true_type result;$/;"	t	struct:cml::same_type
result	hw5/cml/core/meta/if.h	/^    typedef FalseT result;$/;"	t	struct:cml::select_if
result	hw5/cml/core/meta/if.h	/^    typedef TrueT result;$/;"	t	struct:cml::select_if
result	hw5/cml/core/meta/switch.h	/^        ::template match<Find>::result result;$/;"	t	struct:cml::select_switch
result	hw5/cml/core/meta/switch.h	/^        >::result result;$/;"	t	struct:cml::meta::select_case::match
result	hw5/cml/core/meta/switch.h	/^        typedef Result result;$/;"	t	struct:cml::meta::select_case::match
result_tag	hw5/cml/et/traits.h	/^    typedef scalar_result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_tag	hw5/cml/matrix/dynamic.h	/^    typedef cml::et::matrix_result_tag result_tag;$/;"	t	class:cml::matrix
result_tag	hw5/cml/matrix/external.h	/^    typedef cml::et::matrix_result_tag result_tag;$/;"	t	class:cml::matrix
result_tag	hw5/cml/matrix/fixed.h	/^    typedef cml::et::matrix_result_tag result_tag;$/;"	t	class:cml::matrix
result_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef matrix_result_tag result_tag;$/;"	t	class:cml::et::BinaryMatrixOp
result_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef matrix_result_tag result_tag;$/;"	t	class:cml::et::MatrixXpr
result_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef matrix_result_tag result_tag;$/;"	t	class:cml::et::UnaryMatrixOp
result_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef typename expr_type::result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_tag	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename expr_type::result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_tag	hw5/cml/matrix/matrix_rowcol.h	/^    typedef vector_result_tag result_tag;$/;"	t	class:cml::et::MatrixColOp
result_tag	hw5/cml/matrix/matrix_rowcol.h	/^    typedef vector_result_tag result_tag;$/;"	t	class:cml::et::MatrixRowOp
result_tag	hw5/cml/matrix/matrix_traits.h	/^    typedef typename expr_type::result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_tag	hw5/cml/matrix/matrix_transpose.h	/^    typedef matrix_result_tag result_tag;$/;"	t	class:cml::et::MatrixTransposeOp
result_tag	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename expr_type::result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_tag	hw5/cml/quaternion/conjugate.h	/^    typedef quaternion_result_tag result_tag;$/;"	t	class:cml::et::ConjugateOp
result_tag	hw5/cml/quaternion/conjugate.h	/^    typedef typename expr_type::result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_tag	hw5/cml/quaternion/inverse.h	/^    typedef quaternion_result_tag result_tag;$/;"	t	class:cml::et::QuaternionInverseOp
result_tag	hw5/cml/quaternion/inverse.h	/^    typedef typename expr_type::result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_tag	hw5/cml/quaternion/quaternion.h	/^    typedef cml::et::quaternion_result_tag result_tag;$/;"	t	class:cml::quaternion
result_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef quaternion_result_tag result_tag;$/;"	t	class:cml::et::BinaryQuaternionOp
result_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef quaternion_result_tag result_tag;$/;"	t	class:cml::et::QuaternionXpr
result_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef quaternion_result_tag result_tag;$/;"	t	class:cml::et::UnaryQuaternionOp
result_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_type::result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_tag	hw5/cml/quaternion/quaternion_traits.h	/^    typedef typename expr_type::result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_tag	hw5/cml/vector/dynamic.h	/^    typedef cml::et::vector_result_tag result_tag;$/;"	t	class:cml::vector
result_tag	hw5/cml/vector/external.h	/^    typedef cml::et::vector_result_tag result_tag;$/;"	t	class:cml::vector
result_tag	hw5/cml/vector/fixed.h	/^    typedef cml::et::vector_result_tag result_tag;$/;"	t	class:cml::vector
result_tag	hw5/cml/vector/vector_expr.h	/^    typedef typename expr_type::result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_tag	hw5/cml/vector/vector_expr.h	/^    typedef vector_result_tag result_tag;$/;"	t	class:cml::et::BinaryVectorOp
result_tag	hw5/cml/vector/vector_expr.h	/^    typedef vector_result_tag result_tag;$/;"	t	class:cml::et::UnaryVectorOp
result_tag	hw5/cml/vector/vector_expr.h	/^    typedef vector_result_tag result_tag;$/;"	t	class:cml::et::VectorXpr
result_tag	hw5/cml/vector/vector_traits.h	/^    typedef typename expr_type::result_tag result_tag;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/et/traits.h	/^    typedef double result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/et/traits.h	/^    typedef float result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename MatrixPromote<left_result,right_result>::type result_type;$/;"	t	class:cml::et::BinaryMatrixOp
result_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename expr_traits::result_type result_type;$/;"	t	class:cml::et::MatrixXpr
result_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename expr_traits::result_type result_type;$/;"	t	class:cml::et::UnaryMatrixOp
result_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename expr_type::result_type result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename expr_traits::result_type::col_vector_type result_type;$/;"	t	class:cml::et::MatrixColOp
result_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename expr_traits::result_type::row_vector_type result_type;$/;"	t	class:cml::et::MatrixRowOp
result_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename expr_type::result_type result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/matrix/matrix_traits.h	/^    typedef expr_type result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename expr_traits::result_type::transposed_type result_type;$/;"	t	class:cml::et::MatrixTransposeOp
result_type	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename expr_type::result_type result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/quaternion/conjugate.h	/^    typedef typename expr_traits::result_type result_type;$/;"	t	class:cml::et::ConjugateOp
result_type	hw5/cml/quaternion/conjugate.h	/^    typedef typename expr_type::result_type result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/quaternion/inverse.h	/^    typedef typename expr_traits::result_type result_type;$/;"	t	class:cml::et::QuaternionInverseOp
result_type	hw5/cml/quaternion/inverse.h	/^    typedef typename expr_type::result_type result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/quaternion/quaternion_expr.h	/^        result_type;$/;"	t	class:cml::et::BinaryQuaternionOp
result_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_traits::result_type result_type;$/;"	t	class:cml::et::QuaternionXpr
result_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_traits::result_type result_type;$/;"	t	class:cml::et::UnaryQuaternionOp
result_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_type::result_type result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/quaternion/quaternion_traits.h	/^    typedef expr_type result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/vector/vector_expr.h	/^    typedef typename VectorPromote<left_result,right_result>::type result_type;$/;"	t	class:cml::et::BinaryVectorOp
result_type	hw5/cml/vector/vector_expr.h	/^    typedef typename expr_traits::result_type result_type;$/;"	t	class:cml::et::UnaryVectorOp
result_type	hw5/cml/vector/vector_expr.h	/^    typedef typename expr_traits::result_type result_type;$/;"	t	class:cml::et::VectorXpr
result_type	hw5/cml/vector/vector_expr.h	/^    typedef typename expr_type::result_type result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/vector/vector_traits.h	/^    typedef expr_type result_type;$/;"	t	struct:cml::et::ExprTraits
result_type	hw5/cml/vector/vector_unroller.h	/^    typedef typename AccumT::value_type result_type; $/;"	t	struct:cml::et::detail::VectorAccumulateUnroller
result_type_1	hw5/cml/mathlib/interpolation.h	/^    typedef typename traits_1::result_tag result_type_1;$/;"	t	struct:cml::detail::TypePromote
result_type_1	hw5/cml/mathlib/interpolation.h	/^    typedef typename traits_1::result_tag result_type_1;$/;"	t	struct:cml::detail::TypePromote3
result_type_1	hw5/cml/mathlib/interpolation.h	/^    typedef typename traits_1::result_tag result_type_1;$/;"	t	struct:cml::detail::TypePromote4
result_type_2	hw5/cml/mathlib/interpolation.h	/^    typedef typename traits_2::result_tag result_type_2;$/;"	t	struct:cml::detail::TypePromote
result_type_2	hw5/cml/mathlib/interpolation.h	/^    typedef typename traits_2::result_tag result_type_2;$/;"	t	struct:cml::detail::TypePromote3
result_type_2	hw5/cml/mathlib/interpolation.h	/^    typedef typename traits_2::result_tag result_type_2;$/;"	t	struct:cml::detail::TypePromote4
result_type_3	hw5/cml/mathlib/interpolation.h	/^    typedef typename traits_3::result_tag result_type_3;$/;"	t	struct:cml::detail::TypePromote3
result_type_3	hw5/cml/mathlib/interpolation.h	/^    typedef typename traits_3::result_tag result_type_3;$/;"	t	struct:cml::detail::TypePromote4
result_type_4	hw5/cml/mathlib/interpolation.h	/^    typedef typename traits_4::result_tag result_type_4;$/;"	t	struct:cml::detail::TypePromote4
right_dtag	hw5/cml/et/array_promotions.h	/^    typedef typename A2::dimension_tag right_dtag;$/;"	t	struct:cml::et::ArrayPromote
right_expression	hw5/cml/quaternion/quaternion_expr.h	/^    right_reference right_expression() const { return m_right; }$/;"	f	class:cml::et::BinaryQuaternionOp
right_expression	hw5/cml/vector/vector_expr.h	/^    right_reference right_expression() const { return m_right; }$/;"	f	class:cml::et::BinaryVectorOp
right_handed	hw5/cml/mathlib/helper.h	/^enum Handedness { left_handed, right_handed };$/;"	e	enum:cml::Handedness
right_layout	hw5/cml/et/array_promotions.h	/^    typedef typename A2::layout right_layout;$/;"	t	struct:cml::et::detail::promote
right_matrix	hw5/cml/matrix/matrix_promotions.h	/^        typedef cml::matrix<E2,right_storage,basis_orient,layout> right_matrix;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
right_reference	hw5/cml/matrix/matrix_expr.h	/^    typedef typename right_traits::const_reference right_reference;$/;"	t	class:cml::et::BinaryMatrixOp
right_reference	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename right_traits::const_reference right_reference;$/;"	t	class:cml::et::BinaryQuaternionOp
right_reference	hw5/cml/vector/vector_expr.h	/^    typedef typename right_traits::const_reference right_reference;$/;"	t	class:cml::et::BinaryVectorOp
right_result	hw5/cml/et/size_checking.h	/^    typedef typename right_traits::result_tag right_result;$/;"	t	struct:cml::et::GetCheckedSize
right_result	hw5/cml/matrix/matrix_expr.h	/^    typedef typename RightTraits::result_tag right_result;$/;"	t	struct:cml::et::MatrixExpressions
right_result	hw5/cml/matrix/matrix_expr.h	/^    typedef typename right_traits::result_type right_result;$/;"	t	class:cml::et::BinaryMatrixOp
right_result	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename RightTraits::result_tag right_result;$/;"	t	struct:cml::et::QuaternionExpressions
right_result	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename right_traits::result_type right_result;$/;"	t	class:cml::et::BinaryQuaternionOp
right_result	hw5/cml/vector/vector_expr.h	/^    typedef typename RightTraits::result_tag right_result;$/;"	t	struct:cml::et::VectorExpressions
right_result	hw5/cml/vector/vector_expr.h	/^    typedef typename right_traits::result_type right_result;$/;"	t	class:cml::et::BinaryVectorOp
right_scalar	hw5/cml/et/array_promotions.h	/^    typedef typename A2::value_type right_scalar;$/;"	t	struct:cml::et::detail::promote
right_storage	hw5/cml/matrix/matrix_promotions.h	/^            >::result right_storage;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
right_traits	hw5/cml/et/size_checking.h	/^    typedef ExprTraits<RightT> right_traits;$/;"	t	struct:cml::et::GetCheckedSize
right_traits	hw5/cml/matrix/matrix_expr.h	/^    typedef ExprTraits<RightT> right_traits;$/;"	t	class:cml::et::BinaryMatrixOp
right_traits	hw5/cml/quaternion/quaternion_expr.h	/^    typedef ExprTraits<RightT> right_traits;$/;"	t	class:cml::et::BinaryQuaternionOp
right_traits	hw5/cml/vector/vector_expr.h	/^    typedef ExprTraits<RightT> right_traits;$/;"	t	class:cml::et::BinaryVectorOp
right_traits	hw5/cml/vector/vector_products.h	/^    typedef et::ExprTraits<RightT> right_traits;$/;"	t	struct:cml::detail::CrossPromote
right_traits	hw5/cml/vector/vector_products.h	/^    typedef et::ExprTraits<RightT> right_traits;$/;"	t	struct:cml::detail::DotPromote
right_traits	hw5/cml/vector/vector_products.h	/^    typedef et::ExprTraits<RightT> right_traits;$/;"	t	struct:cml::detail::OuterPromote
right_traits	hw5/cml/vector/vector_unroller.h	/^    typedef ExprTraits<RightT> right_traits;$/;"	t	struct:cml::et::detail::VectorAccumulateUnroller
right_type	hw5/cml/matrix/matrix_expr.h	/^    typedef RightT right_type;$/;"	t	struct:cml::et::ExprTraits
right_type	hw5/cml/matrix/matrix_promotions.h	/^        typedef cml::vector<E2,AT2> right_type;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
right_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef RightT right_type;$/;"	t	struct:cml::et::ExprTraits
right_type	hw5/cml/vector/vector_expr.h	/^    typedef RightT right_type;$/;"	t	struct:cml::et::ExprTraits
right_type	hw5/cml/vector/vector_products.h	/^    typedef typename right_traits::result_type right_type;$/;"	t	struct:cml::detail::CrossPromote
right_type	hw5/cml/vector/vector_products.h	/^    typedef typename right_traits::result_type right_type;$/;"	t	struct:cml::detail::OuterPromote
right_value	hw5/cml/vector/vector_products.h	/^    typedef typename right_traits::value_type right_value;$/;"	t	struct:cml::detail::DotPromote
rotate_vector	hw5/cml/mathlib/vector_misc.h	/^rotate_vector(const VecT_1& v, const VecT_2& n, Real angle)$/;"	f	namespace:cml
rotate_vector_2D	hw5/cml/mathlib/vector_misc.h	/^rotate_vector_2D(const VecT& v, Real angle)$/;"	f	namespace:cml
row	hw5/cml/matrix/matrix_rowcol.h	/^row(const et::MatrixXpr<XprT>& expr, size_t i)$/;"	f	namespace:cml
row	hw5/cml/matrix/matrix_rowcol.h	/^row(const matrix<E,AT,BO,L>& expr, size_t i)$/;"	f	namespace:cml
row_array_type	hw5/cml/core/dynamic_2D.h	/^    typedef dynamic_1D<Element,Alloc> row_array_type;$/;"	t	class:cml::dynamic_2D
row_array_type	hw5/cml/core/external_2D.h	/^    typedef dynamic_1D<Element, CML_DEFAULT_ARRAY_ALLOC> row_array_type;$/;"	t	class:cml::external_2D
row_array_type	hw5/cml/core/external_2D.h	/^    typedef fixed_1D<Element,Rows> row_array_type;$/;"	t	class:cml::external_2D
row_array_type	hw5/cml/core/fixed_2D.h	/^    typedef fixed_1D<Element,Rows> row_array_type;$/;"	t	class:cml::fixed_2D
row_basis	hw5/cml/core/common.h	/^struct row_basis {};$/;"	s	namespace:cml
row_major	hw5/cml/core/common.h	/^struct row_major {};$/;"	s	namespace:cml
row_major_array	hw5/cml/core/fixed_2D.h	/^    typedef Element row_major_array[Rows][Cols];$/;"	t	class:cml::fixed_2D
row_vector_type	hw5/cml/matrix/dynamic.h	/^    > row_vector_type;$/;"	t	class:cml::matrix
row_vector_type	hw5/cml/matrix/external.h	/^    > row_vector_type;$/;"	t	class:cml::matrix
row_vector_type	hw5/cml/matrix/fixed.h	/^    > row_vector_type;$/;"	t	class:cml::matrix
rows	hw5/cml/core/dynamic_2D.h	/^    size_t rows() const { return m_rows; }$/;"	f	class:cml::dynamic_2D
rows	hw5/cml/core/external_2D.h	/^    size_t rows() const { return m_rows; }$/;"	f	class:cml::external_2D
rows	hw5/cml/core/external_2D.h	/^    size_t rows() const { return size_t(array_rows); }$/;"	f	class:cml::external_2D
rows	hw5/cml/core/fixed_2D.h	/^    size_t rows() const { return size_t(array_rows); }$/;"	f	class:cml::fixed_2D
rows	hw5/cml/et/traits.h	/^    size_t rows(double) const { return 1; }$/;"	f	struct:cml::et::ExprTraits
rows	hw5/cml/et/traits.h	/^    size_t rows(float) const { return 1; }$/;"	f	struct:cml::et::ExprTraits
rows	hw5/cml/matrix/matrix_expr.h	/^    size_t rows() const { $/;"	f	class:cml::et::MatrixXpr
rows	hw5/cml/matrix/matrix_expr.h	/^    size_t rows() const {$/;"	f	class:cml::et::BinaryMatrixOp
rows	hw5/cml/matrix/matrix_expr.h	/^    size_t rows() const {$/;"	f	class:cml::et::UnaryMatrixOp
rows	hw5/cml/matrix/matrix_expr.h	/^    size_t rows(const expr_type& e) const { return e.rows(); }$/;"	f	struct:cml::et::ExprTraits
rows	hw5/cml/matrix/matrix_traits.h	/^    size_t rows(const expr_type& m) const { return m.rows(); }$/;"	f	struct:cml::et::ExprTraits
rows	hw5/cml/matrix/matrix_transpose.h	/^    size_t rows() const {$/;"	f	class:cml::et::MatrixTransposeOp
rows	hw5/cml/matrix/matrix_transpose.h	/^    size_t rows(const expr_type& e) const { return e.rows(); }$/;"	f	struct:cml::et::ExprTraits
rt	hw5/hw5.cpp	/^ray_tracer rt;$/;"	v
run	hw5/ray_tracer.h	/^        void run(int img_width, int img_height, const scene& s)$/;"	f	class:ray_tracer
same_type	hw5/cml/core/meta/common.h	/^template<> struct same_type<any_type,any_type> {$/;"	s	namespace:cml
same_type	hw5/cml/core/meta/common.h	/^template<typename T, typename U> struct same_type {$/;"	s	namespace:cml
same_type	hw5/cml/core/meta/common.h	/^template<typename T> struct same_type<T,T> {$/;"	s	namespace:cml
same_type	hw5/cml/core/meta/common.h	/^template<typename T> struct same_type<T,any_type> {$/;"	s	namespace:cml
same_type	hw5/cml/core/meta/common.h	/^template<typename T> struct same_type<any_type,T> {$/;"	s	namespace:cml
scalar_first	hw5/cml/quaternion.h	/^struct scalar_first {$/;"	s	namespace:cml
scalar_promotions_h	hw5/cml/et/scalar_promotions.h	/^#define scalar_promotions_h$/;"	d
scalar_result_tag	hw5/cml/et/tags.h	/^struct scalar_result_tag {};$/;"	s	namespace:cml::et
scene	hw5/ray_tracer.h	/^        scene()$/;"	f	class:scene
scene	hw5/ray_tracer.h	/^class scene$/;"	c
second	hw5/cml/core/meta/common.h	/^    typedef T2 second;$/;"	t	struct:cml::type_pair
second	hw5/cml/core/meta/common.h	/^    typedef T2 second;$/;"	t	struct:cml::type_quad
select_case	hw5/cml/core/meta/switch.h	/^struct select_case$/;"	s	namespace:cml::meta
select_case	hw5/cml/core/meta/switch.h	/^struct select_case<Case,Result,NilCase>$/;"	s	namespace:cml::meta
select_case	hw5/cml/core/meta/switch.h	/^struct select_case<Default,Result,NilCase>$/;"	s	namespace:cml::meta
select_if	hw5/cml/core/meta/if.h	/^struct select_if<false,TrueT,FalseT> {$/;"	s	namespace:cml
select_if	hw5/cml/core/meta/if.h	/^struct select_if<true,TrueT,FalseT> {$/;"	s	namespace:cml
select_switch	hw5/cml/core/meta/switch.h	/^> struct select_switch$/;"	s	namespace:cml
self	hw5/cml/et/size_checking.h	/^    typedef GetCheckedSize<LeftT,RightT,dynamic_size_tag> self;$/;"	t	struct:cml::et::GetCheckedSize
set_basis_element	hw5/cml/matrix/dynamic.h	/^    void set_basis_element(size_t i, size_t j, ELEMENT_ARG_TYPE s) {$/;"	f	class:cml::matrix
set_basis_element	hw5/cml/matrix/dynamic.h	/^    void set_basis_element(size_t i, size_t j, ELEMENT_ARG_TYPE s, col_basis) {$/;"	f	class:cml::matrix
set_basis_element	hw5/cml/matrix/dynamic.h	/^    void set_basis_element(size_t i, size_t j, ELEMENT_ARG_TYPE s, row_basis) {$/;"	f	class:cml::matrix
set_basis_element	hw5/cml/matrix/external.h	/^    void set_basis_element(size_t i, size_t j, ELEMENT_ARG_TYPE s) {$/;"	f	class:cml::matrix
set_basis_element	hw5/cml/matrix/external.h	/^    void set_basis_element(size_t i, size_t j, ELEMENT_ARG_TYPE s, col_basis) {$/;"	f	class:cml::matrix
set_basis_element	hw5/cml/matrix/external.h	/^    void set_basis_element(size_t i, size_t j, ELEMENT_ARG_TYPE s, row_basis) {$/;"	f	class:cml::matrix
set_basis_element	hw5/cml/matrix/fixed.h	/^    void set_basis_element(size_t i, size_t j, ELEMENT_ARG_TYPE s) {$/;"	f	class:cml::matrix
set_basis_element	hw5/cml/matrix/fixed.h	/^    void set_basis_element(size_t i, size_t j, ELEMENT_ARG_TYPE s, col_basis) {$/;"	f	class:cml::matrix
set_basis_element	hw5/cml/matrix/fixed.h	/^    void set_basis_element(size_t i, size_t j, ELEMENT_ARG_TYPE s, row_basis) {$/;"	f	class:cml::matrix
set_col	hw5/cml/matrix/dynamic.h	/^    void set_col(size_t j, const col_vector_type& col) {$/;"	f	class:cml::matrix
set_col	hw5/cml/matrix/external.h	/^    void set_col(size_t j, const col_vector_type& col) {$/;"	f	class:cml::matrix
set_col	hw5/cml/matrix/fixed.h	/^    void set_col(size_t j, const col_vector_type& col) {$/;"	f	class:cml::matrix
set_normal	hw5/triangle.h	/^        void set_normal(const vector3& n0, const vector3& n1, const vector3& n2)$/;"	f	class:triangle
set_row	hw5/cml/matrix/dynamic.h	/^    void set_row(size_t i, const row_vector_type& row) {$/;"	f	class:cml::matrix
set_row	hw5/cml/matrix/external.h	/^    void set_row(size_t i, const row_vector_type& row) {$/;"	f	class:cml::matrix
set_row	hw5/cml/matrix/fixed.h	/^    void set_row(size_t i, const row_vector_type& row) {$/;"	f	class:cml::matrix
set_vertex	hw5/triangle.h	/^        void set_vertex(const vector3& v0, const vector3& v1, const vector3& v2)$/;"	f	class:triangle
shininess	hw5/material.h	/^        float shininess;$/;"	m	class:material
sign	hw5/cml/util.h	/^double sign(T value) {$/;"	f	namespace:cml
signed_angle	hw5/cml/mathlib/vector_angle.h	/^signed_angle(const VecT_1& v1, const VecT_2& v2, const VecT_3& reference)$/;"	f	namespace:cml
signed_angle_2D	hw5/cml/mathlib/vector_angle.h	/^signed_angle_2D(const VecT_1& v1, const VecT_2& v2) {$/;"	f	namespace:cml
size	hw5/cml/core/dynamic_1D.h	/^    size_t size() const { return m_size; }$/;"	f	class:cml::dynamic_1D
size	hw5/cml/core/external_1D.h	/^    size_t size() const { return m_size; }$/;"	f	class:cml::external_1D
size	hw5/cml/core/external_1D.h	/^    size_t size() const { return size_t(array_size); }$/;"	f	class:cml::external_1D
size	hw5/cml/core/fixed_1D.h	/^    size_t size() const { return size_t(array_size); }$/;"	f	class:cml::fixed_1D
size	hw5/cml/et/size_checking.h	/^        size_type size() const { return size_type(array_rows,array_cols); }$/;"	f	struct:cml::et::GetCheckedSize::impl
size	hw5/cml/et/size_checking.h	/^        size_type size() const { return size_type(array_size); }$/;"	f	struct:cml::et::GetCheckedSize::impl
size	hw5/cml/et/size_checking.h	/^        size_type size(const LeftT& left, const RightT& right) const {$/;"	f	struct:cml::et::GetCheckedSize::impl
size	hw5/cml/et/size_checking.h	/^        size_type size(const LeftT& left, const RightT&) const {$/;"	f	struct:cml::et::GetCheckedSize::impl
size	hw5/cml/et/size_checking.h	/^        size_type size(const LeftT&, const RightT& right) const {$/;"	f	struct:cml::et::GetCheckedSize::impl
size	hw5/cml/et/traits.h	/^    size_t size(double) const { return 1; }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/et/traits.h	/^    size_t size(float) const { return 1; }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/matrix/dynamic.h	/^    matrix_size size() const {$/;"	f	class:cml::matrix
size	hw5/cml/matrix/external.h	/^    matrix_size size() const {$/;"	f	class:cml::matrix
size	hw5/cml/matrix/fixed.h	/^    matrix_size size() const {$/;"	f	class:cml::matrix
size	hw5/cml/matrix/matrix_expr.h	/^    matrix_size size() const {$/;"	f	class:cml::et::BinaryMatrixOp
size	hw5/cml/matrix/matrix_expr.h	/^    matrix_size size() const {$/;"	f	class:cml::et::MatrixXpr
size	hw5/cml/matrix/matrix_expr.h	/^    matrix_size size() const {$/;"	f	class:cml::et::UnaryMatrixOp
size	hw5/cml/matrix/matrix_expr.h	/^    matrix_size size(const expr_type& e) const { return e.size(); }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/matrix/matrix_rowcol.h	/^    matrix_size size() const {$/;"	f	class:cml::et::MatrixColOp
size	hw5/cml/matrix/matrix_rowcol.h	/^    matrix_size size() const {$/;"	f	class:cml::et::MatrixRowOp
size	hw5/cml/matrix/matrix_rowcol.h	/^    size_t size(const expr_type& e) const { return e.size(); }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/matrix/matrix_traits.h	/^    matrix_size size(const expr_type& e) const { return e.size(); }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/matrix/matrix_transpose.h	/^    matrix_size size() const {$/;"	f	class:cml::et::MatrixTransposeOp
size	hw5/cml/matrix/matrix_transpose.h	/^    matrix_size size(const expr_type& e) const { return e.size(); }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/quaternion/conjugate.h	/^    size_t size() const {$/;"	f	class:cml::et::ConjugateOp
size	hw5/cml/quaternion/conjugate.h	/^    size_t size(const expr_type& e) const { return e.size(); }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/quaternion/inverse.h	/^    size_t size() const {$/;"	f	class:cml::et::QuaternionInverseOp
size	hw5/cml/quaternion/inverse.h	/^    size_t size(const expr_type& e) const { return e.size(); }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/quaternion/quaternion_expr.h	/^    size_t size() const {$/;"	f	class:cml::et::BinaryQuaternionOp
size	hw5/cml/quaternion/quaternion_expr.h	/^    size_t size() const {$/;"	f	class:cml::et::QuaternionXpr
size	hw5/cml/quaternion/quaternion_expr.h	/^    size_t size() const {$/;"	f	class:cml::et::UnaryQuaternionOp
size	hw5/cml/quaternion/quaternion_expr.h	/^    size_t size(const expr_type& e) const { return e.size(); }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/quaternion/quaternion_traits.h	/^    size_t size(const expr_type& v) const { return 4; }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/vector/vector_expr.h	/^    size_t size() const {$/;"	f	class:cml::et::BinaryVectorOp
size	hw5/cml/vector/vector_expr.h	/^    size_t size() const {$/;"	f	class:cml::et::UnaryVectorOp
size	hw5/cml/vector/vector_expr.h	/^    size_t size() const {$/;"	f	class:cml::et::VectorXpr
size	hw5/cml/vector/vector_expr.h	/^    size_t size(const expr_type& e) const { return e.size(); }$/;"	f	struct:cml::et::ExprTraits
size	hw5/cml/vector/vector_traits.h	/^    size_t size(const expr_type& v) const { return v.size(); }$/;"	f	struct:cml::et::ExprTraits
size_checking_h	hw5/cml/et/size_checking.h	/^#define size_checking_h$/;"	d
size_tag	hw5/cml/core/dynamic_1D.h	/^    typedef dynamic_size_tag size_tag;$/;"	t	class:cml::dynamic_1D
size_tag	hw5/cml/core/dynamic_2D.h	/^    typedef dynamic_size_tag size_tag;$/;"	t	class:cml::dynamic_2D
size_tag	hw5/cml/core/external_1D.h	/^    typedef dynamic_size_tag size_tag;$/;"	t	class:cml::external_1D
size_tag	hw5/cml/core/external_1D.h	/^    typedef fixed_size_tag size_tag;$/;"	t	class:cml::external_1D
size_tag	hw5/cml/core/external_2D.h	/^    typedef dynamic_size_tag size_tag;$/;"	t	class:cml::external_2D
size_tag	hw5/cml/core/external_2D.h	/^    typedef fixed_size_tag size_tag;$/;"	t	class:cml::external_2D
size_tag	hw5/cml/core/fixed_1D.h	/^    typedef fixed_size_tag size_tag;$/;"	t	class:cml::fixed_1D
size_tag	hw5/cml/core/fixed_2D.h	/^    typedef fixed_size_tag size_tag;$/;"	t	class:cml::fixed_2D
size_tag	hw5/cml/et/traits.h	/^    typedef unit_size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_tag	hw5/cml/matrix/dynamic.h	/^    typedef typename array_type::size_tag size_tag;$/;"	t	class:cml::matrix
size_tag	hw5/cml/matrix/external.h	/^    typedef typename array_type::size_tag size_tag;$/;"	t	class:cml::matrix
size_tag	hw5/cml/matrix/fixed.h	/^    typedef typename array_type::size_tag size_tag;$/;"	t	class:cml::matrix
size_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef typename ExprT::size_tag size_tag;  \/\/ Just inherit size type.$/;"	t	class:cml::et::MatrixXpr
size_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef typename ExprT::size_tag size_tag;$/;"	t	class:cml::et::UnaryMatrixOp
size_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef typename expr_type::size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_tag	hw5/cml/matrix/matrix_expr.h	/^    typedef typename result_type::size_tag size_tag;$/;"	t	class:cml::et::BinaryMatrixOp
size_tag	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename ExprT::size_tag size_tag;$/;"	t	class:cml::et::MatrixColOp
size_tag	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename ExprT::size_tag size_tag;$/;"	t	class:cml::et::MatrixRowOp
size_tag	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename expr_type::size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_tag	hw5/cml/matrix/matrix_traits.h	/^    typedef typename expr_type::size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_tag	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename ExprT::size_tag size_tag;$/;"	t	class:cml::et::MatrixTransposeOp
size_tag	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename expr_type::size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_tag	hw5/cml/quaternion/conjugate.h	/^    typedef typename ExprT::size_tag size_tag;$/;"	t	class:cml::et::ConjugateOp
size_tag	hw5/cml/quaternion/conjugate.h	/^    typedef typename expr_type::size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_tag	hw5/cml/quaternion/inverse.h	/^    typedef typename expr_type::size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_tag	hw5/cml/quaternion/inverse.h	/^    typedef typename subexpression_type::size_tag size_tag;$/;"	t	class:cml::et::QuaternionInverseOp
size_tag	hw5/cml/quaternion/quaternion.h	/^    typedef typename vector_type::size_tag size_tag;$/;"	t	class:cml::quaternion
size_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename ExprT::size_tag size_tag;$/;"	t	class:cml::et::QuaternionXpr
size_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename ExprT::size_tag size_tag;$/;"	t	class:cml::et::UnaryQuaternionOp
size_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_type::size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_tag	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::size_tag size_tag;$/;"	t	class:cml::et::BinaryQuaternionOp
size_tag	hw5/cml/quaternion/quaternion_traits.h	/^    typedef typename expr_type::size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_tag	hw5/cml/vector/dynamic.h	/^    typedef typename array_type::size_tag size_tag;$/;"	t	class:cml::vector
size_tag	hw5/cml/vector/external.h	/^    typedef typename array_type::size_tag size_tag;$/;"	t	class:cml::vector
size_tag	hw5/cml/vector/fixed.h	/^    typedef typename array_type::size_tag size_tag;$/;"	t	class:cml::vector
size_tag	hw5/cml/vector/vector_expr.h	/^    typedef typename ExprT::size_tag size_tag;$/;"	t	class:cml::et::UnaryVectorOp
size_tag	hw5/cml/vector/vector_expr.h	/^    typedef typename ExprT::size_tag size_tag;$/;"	t	class:cml::et::VectorXpr
size_tag	hw5/cml/vector/vector_expr.h	/^    typedef typename expr_type::size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_tag	hw5/cml/vector/vector_expr.h	/^    typedef typename result_type::size_tag size_tag;$/;"	t	class:cml::et::BinaryVectorOp
size_tag	hw5/cml/vector/vector_traits.h	/^    typedef typename expr_type::size_tag size_tag;$/;"	t	struct:cml::et::ExprTraits
size_type	hw5/cml/et/size_checking.h	/^        typedef matrix_size size_type;$/;"	t	struct:cml::et::GetCheckedSize::impl
size_type	hw5/cml/et/size_checking.h	/^        typedef size_t size_type;$/;"	t	struct:cml::et::GetCheckedSize::impl
size_type	hw5/cml/et/size_checking.h	/^    typedef typename check_type::size_type size_type;$/;"	t	struct:cml::et::GetCheckedSize
slerp	hw5/cml/mathlib/interpolation.h	/^slerp($/;"	f	namespace:cml
slerp	hw5/cml/mathlib/interpolation.h	/^slerp($/;"	f	namespace:cml::detail
slerp_f	hw5/cml/mathlib/interpolation.h	/^template< class MatT_1, class MatT_2 > struct slerp_f<MatT_1,MatT_2,2>$/;"	s	namespace:cml::detail
slerp_f	hw5/cml/mathlib/interpolation.h	/^template< class MatT_1, class MatT_2 > struct slerp_f<MatT_1,MatT_2,3>$/;"	s	namespace:cml::detail
specular	hw5/material.h	/^        vector3 specular;$/;"	m	class:material
specular	hw5/ray_tracer.h	/^    vector3 specular;$/;"	m	class:ray_tree_node
sphere	hw5/object.h	/^        sphere() : object(), r(1.0) {}$/;"	f	class:sphere
sphere	hw5/object.h	/^        sphere(const vector3& pos) : object(pos), r(1.0) {}$/;"	f	class:sphere
sphere	hw5/object.h	/^class sphere : public object$/;"	c
spherical_to_cartesian	hw5/cml/mathlib/coord_conversion.h	/^spherical_to_cartesian(E radius, E theta, E phi, size_t axis,$/;"	f	namespace:cml
split	hw5/triangle.h	/^        list<triangle> split() const$/;"	f	class:triangle
sqr	hw5/cml/util.h	/^T sqr(T value) {$/;"	f	namespace:cml
sqrt_2	hw5/cml/constants.h	/^    static Float sqrt_2() { return Float(M_SQRT2); }$/;"	f	struct:cml::constants
sqrt_3	hw5/cml/constants.h	/^    static Float sqrt_3() { return Float(1.732050807568877293527446341505); }$/;"	f	struct:cml::constants
sqrt_5	hw5/cml/constants.h	/^    static Float sqrt_5() { return Float(2.236067977499789696409173668731); }$/;"	f	struct:cml::constants
sqrt_6	hw5/cml/constants.h	/^    static Float sqrt_6() { return Float(2.449489742783178098197284074705); }$/;"	f	struct:cml::constants
sqrt_safe	hw5/cml/util.h	/^T sqrt_safe(T value) {$/;"	f	namespace:cml
src_traits	hw5/cml/matrix/matrix_unroller.h	/^    typedef ExprTraits<SrcT> src_traits;$/;"	t	class:cml::et::detail::MatrixAssignmentUnroller
src_traits	hw5/cml/vector/vector_unroller.h	/^    typedef ExprTraits<SrcT> src_traits;$/;"	t	class:cml::et::detail::VectorAssignmentUnroller
ssize_t	hw5/cml/core/common.h	/^typedef _W64 int   ssize_t;$/;"	t
ssize_t	hw5/cml/core/common.h	/^typedef __int64    ssize_t;$/;"	t
storage_type	hw5/cml/quaternion/quaternion.h	/^    typedef ArrayType storage_type;$/;"	t	class:cml::quaternion
storage_type	hw5/cml/quaternion/quaternion_promotions.h	/^    typedef typename promoted_vector::storage_type storage_type;$/;"	t	struct:cml::et::QuaternionPromote
storage_type	hw5/cml/vector/dynamic.h	/^    typedef dynamic<> storage_type;$/;"	t	class:cml::vector
storage_type	hw5/cml/vector/external.h	/^    typedef external<> storage_type;$/;"	t	class:cml::vector
storage_type	hw5/cml/vector/fixed.h	/^    typedef fixed<> storage_type;$/;"	t	class:cml::vector
subexpression_type	hw5/cml/quaternion/inverse.h	/^    typedef et::ConjugateOp<ExprT> subexpression_type;$/;"	t	class:cml::et::QuaternionInverseOp
subvector	hw5/cml/vector/fixed.h	/^    subvector_type subvector(size_t i) const {$/;"	f	class:cml::vector
subvector_type	hw5/cml/vector/external.h	/^    typedef typename temporary_type::subvector_type subvector_type;$/;"	t	class:cml::vector
subvector_type	hw5/cml/vector/fixed.h	/^    typedef vector< Element, fixed<Size-1> > subvector_type;$/;"	t	class:cml::vector
swap_axis_order	hw5/cml/mathlib/helper.h	/^inline AxisOrder swap_axis_order(AxisOrder order)$/;"	f	namespace:cml::detail
t	hw5/ray_tracer.h	/^    shared_ptr<ray_tree_node> t;$/;"	m	class:ray_tree_node
temporary_type	hw5/cml/mathlib/interpolation.h	/^        temporary_type;$/;"	t	struct:cml::detail::TypePromote
temporary_type	hw5/cml/mathlib/interpolation.h	/^        temporary_type;$/;"	t	struct:cml::detail::TypePromote3
temporary_type	hw5/cml/mathlib/interpolation.h	/^        temporary_type;$/;"	t	struct:cml::detail::TypePromote4
temporary_type	hw5/cml/mathlib/interpolation.h	/^    typedef T temporary_type;$/;"	t	struct:cml::detail::TypePromote
temporary_type	hw5/cml/mathlib/interpolation.h	/^    typedef typename CrossPromote<T1,T2>::promoted_vector temporary_type;$/;"	t	struct:cml::detail::TypePromote
temporary_type	hw5/cml/mathlib/interpolation.h	/^    typedef typename et::MatrixPromote2<T1,T2>::temporary_type temporary_type;$/;"	t	struct:cml::detail::TypePromote
temporary_type	hw5/cml/mathlib/interpolation.h	/^    typedef typename et::ScalarPromote<T1,T2>::type temporary_type;$/;"	t	struct:cml::detail::TypePromote
temporary_type	hw5/cml/matrix/dynamic.h	/^    typedef matrix_type temporary_type;$/;"	t	class:cml::matrix
temporary_type	hw5/cml/matrix/external.h	/^    typedef matrix<Element,dynamic<>,BasisOrient,Layout> temporary_type;$/;"	t	class:cml::matrix
temporary_type	hw5/cml/matrix/external.h	/^    typedef matrix<Element,fixed<Rows,Cols>,BasisOrient,Layout> temporary_type;$/;"	t	class:cml::matrix
temporary_type	hw5/cml/matrix/fixed.h	/^    typedef matrix_type temporary_type;$/;"	t	class:cml::matrix
temporary_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::BinaryMatrixOp
temporary_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::MatrixXpr
temporary_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::UnaryMatrixOp
temporary_type	hw5/cml/matrix/matrix_promotions.h	/^        >::temporary_type temporary_type;$/;"	t	struct:cml::et::MatrixPromote2
temporary_type	hw5/cml/matrix/matrix_promotions.h	/^        typedef typename type::temporary_type temporary_type;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
temporary_type	hw5/cml/matrix/matrix_promotions.h	/^     >::temporary_type temporary_type;$/;"	t	struct:cml::et::MatrixPromote3
temporary_type	hw5/cml/matrix/matrix_promotions.h	/^     >::temporary_type temporary_type;$/;"	t	struct:cml::et::MatrixPromote4
temporary_type	hw5/cml/matrix/matrix_promotions.h	/^    typedef typename type::temporary_type temporary_type;$/;"	t	struct:cml::et::MatrixPromote
temporary_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::MatrixColOp
temporary_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::MatrixRowOp
temporary_type	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::MatrixTransposeOp
temporary_type	hw5/cml/matvec/matvec_promotions.h	/^    typedef typename type::temporary_type temporary_type;$/;"	t	struct:cml::et::MatVecPromote
temporary_type	hw5/cml/quaternion/conjugate.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::ConjugateOp
temporary_type	hw5/cml/quaternion/inverse.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::QuaternionInverseOp
temporary_type	hw5/cml/quaternion/quaternion.h	/^        order_type, cross_type> temporary_type;$/;"	t	class:cml::quaternion
temporary_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::BinaryQuaternionOp
temporary_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::QuaternionXpr
temporary_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::UnaryQuaternionOp
temporary_type	hw5/cml/quaternion/quaternion_promotions.h	/^    >::temporary_type temporary_type;$/;"	t	struct:cml::et::QuaternionPromote2
temporary_type	hw5/cml/quaternion/quaternion_promotions.h	/^    >::temporary_type temporary_type;$/;"	t	struct:cml::et::QuaternionPromote3
temporary_type	hw5/cml/quaternion/quaternion_promotions.h	/^    >::temporary_type temporary_type;$/;"	t	struct:cml::et::QuaternionPromote4
temporary_type	hw5/cml/quaternion/quaternion_promotions.h	/^    typedef typename type::temporary_type temporary_type;$/;"	t	struct:cml::et::QuaternionPromote
temporary_type	hw5/cml/vector/dynamic.h	/^    typedef vector_type temporary_type;$/;"	t	class:cml::vector
temporary_type	hw5/cml/vector/external.h	/^            dynamic<> > temporary_type;$/;"	t	class:cml::vector
temporary_type	hw5/cml/vector/external.h	/^            fixed<Size> > temporary_type;$/;"	t	class:cml::vector
temporary_type	hw5/cml/vector/fixed.h	/^    typedef vector_type temporary_type;$/;"	t	class:cml::vector
temporary_type	hw5/cml/vector/vector_expr.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::BinaryVectorOp
temporary_type	hw5/cml/vector/vector_expr.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::UnaryVectorOp
temporary_type	hw5/cml/vector/vector_expr.h	/^    typedef typename result_type::temporary_type temporary_type;$/;"	t	class:cml::et::VectorXpr
temporary_type	hw5/cml/vector/vector_promotions.h	/^    typedef typename type::temporary_type temporary_type;$/;"	t	struct:cml::et::VectorPromote
third	hw5/cml/core/meta/common.h	/^    typedef T3 third;$/;"	t	struct:cml::type_quad
trace	hw5/cml/mathlib/matrix_misc.h	/^trace(const MatT& m)$/;"	f	namespace:cml
trace_2x2	hw5/cml/mathlib/matrix_misc.h	/^trace_2x2(const MatT& m)$/;"	f	namespace:cml
trace_3x3	hw5/cml/mathlib/matrix_misc.h	/^trace_3x3(const MatT& m)$/;"	f	namespace:cml
traits_1	hw5/cml/mathlib/interpolation.h	/^    typedef et::ExprTraits<T1> traits_1;$/;"	t	struct:cml::detail::TypePromote
traits_1	hw5/cml/mathlib/interpolation.h	/^    typedef et::ExprTraits<T1> traits_1;$/;"	t	struct:cml::detail::TypePromote3
traits_1	hw5/cml/mathlib/interpolation.h	/^    typedef et::ExprTraits<T1> traits_1;$/;"	t	struct:cml::detail::TypePromote4
traits_2	hw5/cml/mathlib/interpolation.h	/^    typedef et::ExprTraits<T2> traits_2;$/;"	t	struct:cml::detail::TypePromote
traits_2	hw5/cml/mathlib/interpolation.h	/^    typedef et::ExprTraits<T2> traits_2;$/;"	t	struct:cml::detail::TypePromote3
traits_2	hw5/cml/mathlib/interpolation.h	/^    typedef et::ExprTraits<T2> traits_2;$/;"	t	struct:cml::detail::TypePromote4
traits_3	hw5/cml/mathlib/interpolation.h	/^    typedef et::ExprTraits<T3> traits_3;$/;"	t	struct:cml::detail::TypePromote3
traits_3	hw5/cml/mathlib/interpolation.h	/^    typedef et::ExprTraits<T3> traits_3;$/;"	t	struct:cml::detail::TypePromote4
traits_4	hw5/cml/mathlib/interpolation.h	/^    typedef et::ExprTraits<T4> traits_4;$/;"	t	struct:cml::detail::TypePromote4
traits_h	hw5/cml/et/traits.h	/^#define traits_h$/;"	d
transform_point	hw5/cml/mathlib/vector_transform.h	/^transform_point(const MatT& m, const VecT& v)$/;"	f	namespace:cml
transform_point_2D	hw5/cml/mathlib/vector_transform.h	/^transform_point_2D(const MatT& m, const VecT& v)$/;"	f	namespace:cml
transform_vector	hw5/cml/mathlib/vector_transform.h	/^transform_vector(const MatT& m, const VecT& v)$/;"	f	namespace:cml
transform_vector_2D	hw5/cml/mathlib/vector_transform.h	/^transform_vector_2D(const MatT& m, const VecT& v)$/;"	f	namespace:cml
transform_vector_4D	hw5/cml/mathlib/vector_transform.h	/^transform_vector_4D(const MatT& m, const VecT& v) {$/;"	f	namespace:cml
transform_vector_4D	hw5/cml/mathlib/vector_transform.h	/^transform_vector_4D(const MatT& m, const VecT& v, col_basis) {$/;"	f	namespace:cml::detail
transform_vector_4D	hw5/cml/mathlib/vector_transform.h	/^transform_vector_4D(const MatT& m, const VecT& v, row_basis) {$/;"	f	namespace:cml::detail
transparency	hw5/material.h	/^        float transparency;$/;"	m	class:material
transparency	hw5/ray_tracer.h	/^    float transparency;$/;"	m	class:ray_tree_node
transpose	hw5/cml/matrix/dynamic.h	/^    matrix_type& transpose() {$/;"	f	class:cml::matrix
transpose	hw5/cml/matrix/external.h	/^    matrix_type& transpose() {$/;"	f	class:cml::matrix
transpose	hw5/cml/matrix/fixed.h	/^    matrix_type& transpose() {$/;"	f	class:cml::matrix
transpose	hw5/cml/matrix/matrix_transpose.h	/^transpose(MATXPR_ARG_TYPE expr)$/;"	f	namespace:cml
transpose	hw5/cml/matrix/matrix_transpose.h	/^transpose(const matrix<E,AT,BO,L>& expr)$/;"	f	namespace:cml
transposed_type	hw5/cml/core/dynamic_2D.h	/^            Layout,Alloc> transposed_type;$/;"	t	class:cml::dynamic_2D
transposed_type	hw5/cml/core/external_2D.h	/^            Cols,Rows,Layout> transposed_type;$/;"	t	class:cml::external_2D
transposed_type	hw5/cml/core/external_2D.h	/^        Layout, CML_DEFAULT_ARRAY_ALLOC> transposed_type;$/;"	t	class:cml::external_2D
transposed_type	hw5/cml/core/fixed_2D.h	/^            Cols,Rows,Layout> transposed_type;$/;"	t	class:cml::fixed_2D
transposed_type	hw5/cml/matrix/dynamic.h	/^    > transposed_type;$/;"	t	class:cml::matrix
transposed_type	hw5/cml/matrix/external.h	/^    > transposed_type;$/;"	t	class:cml::matrix
transposed_type	hw5/cml/matrix/fixed.h	/^    > transposed_type;$/;"	t	class:cml::matrix
traverse_tree	hw5/ray_tracer.h	/^vector3 traverse_tree(shared_ptr<ray_tree_node> node, int depth = 0)$/;"	f
triangle	hw5/triangle.h	/^        triangle(const vector3& v0, const vector3& v1, const vector3& v2, bool cube = false)$/;"	f	class:triangle
triangle	hw5/triangle.h	/^        triangle(const vector3& v0, const vector3& v1, const vector3& v2,$/;"	f	class:triangle
triangle	hw5/triangle.h	/^class triangle$/;"	c
triangle_to_plane	hw5/triangle.h	/^plane_t triangle_to_plane(const triangle& polygon)$/;"	f
trilerp	hw5/cml/mathlib/interpolation.h	/^trilerp(const T1& val000, const T2& val100,$/;"	f	namespace:cml
triple_product	hw5/cml/vector/vector_products.h	/^triple_product(const VecT_1& v1, const VecT_2& v2, const VecT_3& v3) {$/;"	f	namespace:cml
true_type	hw5/cml/core/meta/common.h	/^struct true_type {};$/;"	s	namespace:cml
two_pi	hw5/cml/constants.h	/^    static Float two_pi()      { return Float(2.*M_PI); }$/;"	f	struct:cml::constants
twod_tag	hw5/cml/core/common.h	/^struct twod_tag {};$/;"	s	namespace:cml
type	hw5/cml/core/meta/common.h	/^        typedef Q type;$/;"	t	struct:cml::remove_const::helper
type	hw5/cml/core/meta/common.h	/^        typedef Q type;$/;"	t	struct:cml::remove_reference::helper
type	hw5/cml/core/meta/common.h	/^        typedef const Q type;$/;"	t	struct:cml::remove_reference::helper
type	hw5/cml/core/meta/common.h	/^    typedef typename helper<T,void>::type type;$/;"	t	struct:cml::remove_const
type	hw5/cml/core/meta/common.h	/^    typedef typename helper<T,void>::type type;$/;"	t	struct:cml::remove_reference
type	hw5/cml/et/array_promotions.h	/^        A1, A2, left_dtag, right_dtag, promoted_size_tag>::type type;$/;"	t	struct:cml::et::ArrayPromote
type	hw5/cml/et/array_promotions.h	/^    typedef dynamic_1D<promoted_scalar,allocator> type;$/;"	t	struct:cml::et::detail::promote
type	hw5/cml/et/array_promotions.h	/^    typedef dynamic_2D<promoted_scalar,promoted_layout,allocator> type;$/;"	t	struct:cml::et::detail::promote
type	hw5/cml/et/array_promotions.h	/^    typedef fixed_1D<promoted_scalar,Size> type;$/;"	t	struct:cml::et::detail::promote
type	hw5/cml/et/array_promotions.h	/^    typedef fixed_2D<promoted_scalar,Rows,Cols,promoted_layout> type;$/;"	t	struct:cml::et::detail::promote
type	hw5/cml/et/scalar_promotions.h	/^    typedef typename detail::promote_trait<E1,E2>::T_promote type;$/;"	t	struct:cml::et::ScalarPromote
type	hw5/cml/matrix/matrix_promotions.h	/^                         > type;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
type	hw5/cml/matrix/matrix_promotions.h	/^        typedef cml::matrix<typename ScalarPromote<E,S>::type, AT, BO, L> type;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
type	hw5/cml/matrix/matrix_promotions.h	/^        typedef cml::matrix<typename ScalarPromote<S,E>::type, AT, BO, L> type;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
type	hw5/cml/matrix/matrix_promotions.h	/^        typedef typename et::MatrixPromote<left_matrix,right_matrix>::type type;$/;"	t	struct:cml::et::MatrixPromote::MatrixPromoteHelper
type	hw5/cml/matrix/matrix_promotions.h	/^    typedef typename MatrixPromoteHelper<LeftBaseT,RightBaseT>::type type;$/;"	t	struct:cml::et::MatrixPromote
type	hw5/cml/matvec/matvec_promotions.h	/^    > type;$/;"	t	struct:cml::et::MatVecPromote
type	hw5/cml/quaternion/quaternion_promotions.h	/^    typedef cml::quaternion<value_type,storage_type,OT,CT> type;$/;"	t	struct:cml::et::QuaternionPromote
type	hw5/cml/vector/vector_promotions.h	/^    > type;$/;"	t	struct:cml::et::VectorPromote
type	hw5/cml/vector/vector_promotions.h	/^    typedef cml::vector<typename ScalarPromote<E,S>::type, AT> type;$/;"	t	struct:cml::et::VectorPromote
type	hw5/cml/vector/vector_promotions.h	/^    typedef cml::vector<typename ScalarPromote<S,E>::type, AT> type;$/;"	t	struct:cml::et::VectorPromote
type_pair	hw5/cml/core/meta/common.h	/^template<typename T1, typename T2> struct type_pair {$/;"	s	namespace:cml
type_quad	hw5/cml/core/meta/common.h	/^struct type_quad {$/;"	s	namespace:cml
typedef_h	hw5/cml/mathlib/typedef.h	/^#define typedef_h$/;"	d
unary_expression	hw5/cml/et/tags.h	/^struct unary_expression {};$/;"	s	namespace:cml::et
unit_cross	hw5/cml/mathlib/vector_misc.h	/^unit_cross(const LeftT& left, const RightT& right) {$/;"	f	namespace:cml
unit_size_tag	hw5/cml/core/common.h	/^struct unit_size_tag {};$/;"	s	namespace:cml
unpack_axis_order	hw5/cml/mathlib/helper.h	/^inline void unpack_axis_order($/;"	f	namespace:cml::detail
unpack_axis_order_2D	hw5/cml/mathlib/helper.h	/^inline void unpack_axis_order_2D($/;"	f	namespace:cml::detail
unpack_euler_order	hw5/cml/mathlib/helper.h	/^inline void unpack_euler_order($/;"	f	namespace:cml::detail
unproject_point	hw5/cml/mathlib/projection.h	/^vector< typename VecT::value_type, fixed<3> > unproject_point($/;"	f	namespace:cml
unsigned_angle	hw5/cml/mathlib/vector_angle.h	/^unsigned_angle(const VecT_1& v1, const VecT_2& v2) {$/;"	f	namespace:cml
unsigned_angle_2D	hw5/cml/mathlib/vector_angle.h	/^unsigned_angle_2D(const VecT_1& v1, const VecT_2& v2) {$/;"	f	namespace:cml
v	hw5/triangle.h	/^        vector3 v[3];   \/\/ 3 points of a triangle$/;"	m	class:triangle
value	hw5/cml/core/cml_assert.h	/^    enum { value = true };$/;"	e	enum:cml::STATIC_ASSERTION_FAILURE::__anon1
value	hw5/cml/core/cml_assert.h	/^    enum { value = true };$/;"	e	enum:cml::STATIC_ASSERTION_FAILURE_M::__anon2
value_type	hw5/cml/core/dynamic_1D.h	/^    typedef typename allocator_type::value_type value_type;$/;"	t	class:cml::dynamic_1D
value_type	hw5/cml/core/dynamic_2D.h	/^    typedef typename allocator_type::value_type value_type;$/;"	t	class:cml::dynamic_2D
value_type	hw5/cml/core/external_1D.h	/^    typedef Element value_type;$/;"	t	class:cml::external_1D
value_type	hw5/cml/core/external_2D.h	/^    typedef Element value_type;$/;"	t	class:cml::external_2D
value_type	hw5/cml/core/fixed_1D.h	/^    typedef Element value_type;$/;"	t	class:cml::fixed_1D
value_type	hw5/cml/core/fixed_2D.h	/^    typedef Element value_type;$/;"	t	class:cml::fixed_2D
value_type	hw5/cml/et/traits.h	/^    typedef double value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/et/traits.h	/^    typedef float value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/mathlib/epsilon.h	/^    typedef Real value_type;$/;"	t	struct:cml::epsilon
value_type	hw5/cml/mathlib/interpolation.h	/^    typedef typename temporary_type::value_type value_type;$/;"	t	struct:cml::detail::TypePromote3
value_type	hw5/cml/mathlib/interpolation.h	/^    typedef typename temporary_type::value_type value_type;$/;"	t	struct:cml::detail::TypePromote4
value_type	hw5/cml/matrix/dynamic.h	/^    typedef typename array_type::value_type value_type;$/;"	t	class:cml::matrix
value_type	hw5/cml/matrix/external.h	/^    typedef typename array_type::value_type value_type;$/;"	t	class:cml::matrix
value_type	hw5/cml/matrix/fixed.h	/^    typedef typename array_type::value_type value_type;$/;"	t	class:cml::matrix
value_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename ExprT::value_type value_type;$/;"	t	class:cml::et::MatrixXpr
value_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename OpT::value_type value_type;$/;"	t	class:cml::et::BinaryMatrixOp
value_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename OpT::value_type value_type;$/;"	t	class:cml::et::UnaryMatrixOp
value_type	hw5/cml/matrix/matrix_expr.h	/^    typedef typename expr_type::value_type value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/matrix/matrix_promotions.h	/^    typedef typename temporary_type::value_type value_type;$/;"	t	struct:cml::et::MatrixPromote2
value_type	hw5/cml/matrix/matrix_promotions.h	/^    typedef typename temporary_type::value_type value_type;$/;"	t	struct:cml::et::MatrixPromote3
value_type	hw5/cml/matrix/matrix_promotions.h	/^    typedef typename temporary_type::value_type value_type;$/;"	t	struct:cml::et::MatrixPromote4
value_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename ExprT::value_type value_type;$/;"	t	class:cml::et::MatrixColOp
value_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename ExprT::value_type value_type;$/;"	t	class:cml::et::MatrixRowOp
value_type	hw5/cml/matrix/matrix_rowcol.h	/^    typedef typename expr_type::value_type value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/matrix/matrix_traits.h	/^    typedef typename expr_type::value_type value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename ExprT::value_type value_type;$/;"	t	class:cml::et::MatrixTransposeOp
value_type	hw5/cml/matrix/matrix_transpose.h	/^    typedef typename expr_type::value_type value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/quaternion/conjugate.h	/^    typedef typename ExprT::value_type value_type;$/;"	t	class:cml::et::ConjugateOp
value_type	hw5/cml/quaternion/conjugate.h	/^    typedef typename expr_type::value_type value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/quaternion/inverse.h	/^    typedef typename expr_type::value_type value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/quaternion/inverse.h	/^    typedef typename subexpression_type::value_type value_type;$/;"	t	class:cml::et::QuaternionInverseOp
value_type	hw5/cml/quaternion/quaternion.h	/^    typedef typename vector_type::value_type value_type;$/;"	t	class:cml::quaternion
value_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename ExprT::value_type value_type;$/;"	t	class:cml::et::QuaternionXpr
value_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename OpT::value_type value_type;$/;"	t	class:cml::et::BinaryQuaternionOp
value_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename OpT::value_type value_type;$/;"	t	class:cml::et::UnaryQuaternionOp
value_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename expr_type::value_type value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/quaternion/quaternion_promotions.h	/^    typedef typename promoted_vector::value_type value_type;$/;"	t	struct:cml::et::QuaternionPromote
value_type	hw5/cml/quaternion/quaternion_promotions.h	/^    typedef typename temporary_type::value_type value_type;$/;"	t	struct:cml::et::QuaternionPromote2
value_type	hw5/cml/quaternion/quaternion_promotions.h	/^    typedef typename temporary_type::value_type value_type;$/;"	t	struct:cml::et::QuaternionPromote3
value_type	hw5/cml/quaternion/quaternion_promotions.h	/^    typedef typename temporary_type::value_type value_type;$/;"	t	struct:cml::et::QuaternionPromote4
value_type	hw5/cml/quaternion/quaternion_traits.h	/^    typedef typename expr_type::value_type value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/vector/dynamic.h	/^    typedef typename array_type::value_type value_type;$/;"	t	class:cml::vector
value_type	hw5/cml/vector/external.h	/^    typedef typename array_type::value_type value_type;$/;"	t	class:cml::vector
value_type	hw5/cml/vector/fixed.h	/^    typedef typename array_type::value_type value_type;$/;"	t	class:cml::vector
value_type	hw5/cml/vector/vector_expr.h	/^    typedef typename ExprT::value_type value_type;$/;"	t	class:cml::et::VectorXpr
value_type	hw5/cml/vector/vector_expr.h	/^    typedef typename OpT::value_type value_type;$/;"	t	class:cml::et::BinaryVectorOp
value_type	hw5/cml/vector/vector_expr.h	/^    typedef typename OpT::value_type value_type;$/;"	t	class:cml::et::UnaryVectorOp
value_type	hw5/cml/vector/vector_expr.h	/^    typedef typename expr_type::value_type value_type;$/;"	t	struct:cml::et::ExprTraits
value_type	hw5/cml/vector/vector_traits.h	/^    typedef typename expr_type::value_type value_type;$/;"	t	struct:cml::et::ExprTraits
vecop_macros_h	hw5/cml/vector/vecop_macros.h	/^#define vecop_macros_h$/;"	d
vector	hw5/cml/vector/dynamic.h	/^    vector() : array_type() {}$/;"	f	class:cml::vector
vector	hw5/cml/vector/dynamic.h	/^    vector(size_t N) : array_type(N) {}$/;"	f	class:cml::vector
vector	hw5/cml/vector/dynamic.h	/^class vector< Element, dynamic<Alloc> >$/;"	c	namespace:cml
vector	hw5/cml/vector/external.h	/^    vector(Element* const array) : array_type(array) {}$/;"	f	class:cml::vector
vector	hw5/cml/vector/external.h	/^    vector(Element* const array, size_t size)$/;"	f	class:cml::vector
vector	hw5/cml/vector/external.h	/^class vector< Element, external<> >$/;"	c	namespace:cml
vector	hw5/cml/vector/external.h	/^class vector< Element, external<Size> >$/;"	c	namespace:cml
vector	hw5/cml/vector/fixed.h	/^    vector() : array_type() {}$/;"	f	class:cml::vector
vector	hw5/cml/vector/fixed.h	/^class vector< Element, fixed<Size> >$/;"	c	namespace:cml
vector2d	hw5/cml/mathlib/typedef.h	/^typedef vector< double, fixed<2> > vector2d;$/;"	t	namespace:cml
vector2f	hw5/cml/mathlib/typedef.h	/^typedef vector< float,  fixed<2> > vector2f;$/;"	t	namespace:cml
vector2i	hw5/cml/mathlib/typedef.h	/^typedef vector< int,    fixed<2> > vector2i;$/;"	t	namespace:cml
vector3	hw5/common.h	/^typedef cml::vector3f vector3;$/;"	t
vector3d	hw5/cml/mathlib/typedef.h	/^typedef vector< double, fixed<3> > vector3d;$/;"	t	namespace:cml
vector3d	hw5/common.h	/^typedef cml::vector3d vector3d;$/;"	t
vector3f	hw5/cml/mathlib/typedef.h	/^typedef vector< float,  fixed<3> > vector3f;$/;"	t	namespace:cml
vector3i	hw5/cml/mathlib/typedef.h	/^typedef vector< int,    fixed<3> > vector3i;$/;"	t	namespace:cml
vector4	hw5/common.h	/^typedef cml::vector4f vector4;$/;"	t
vector4d	hw5/cml/mathlib/typedef.h	/^typedef vector< double, fixed<4> > vector4d;$/;"	t	namespace:cml
vector4f	hw5/cml/mathlib/typedef.h	/^typedef vector< float,  fixed<4> > vector4f;$/;"	t	namespace:cml
vector4i	hw5/cml/mathlib/typedef.h	/^typedef vector< int,    fixed<4> > vector4i;$/;"	t	namespace:cml
vector_angle_h	hw5/cml/mathlib/vector_angle.h	/^#define vector_angle_h$/;"	d
vector_class_ops_h	hw5/cml/vector/class_ops.h	/^#define vector_class_ops_h$/;"	d
vector_comparison_h	hw5/cml/vector/vector_comparison.h	/^#define vector_comparison_h$/;"	d
vector_expr_h	hw5/cml/vector/vector_expr.h	/^#define vector_expr_h$/;"	d
vector_first	hw5/cml/quaternion.h	/^struct vector_first {$/;"	s	namespace:cml
vector_functions_h	hw5/cml/vector/vector_functions.h	/^#define vector_functions_h$/;"	d
vector_misc_h	hw5/cml/mathlib/vector_misc.h	/^#define vector_misc_h$/;"	d
vector_ops_h	hw5/cml/vector/vector_ops.h	/^#define vector_ops_h$/;"	d
vector_ortho_h	hw5/cml/mathlib/vector_ortho.h	/^#define vector_ortho_h$/;"	d
vector_print_h	hw5/cml/vector/vector_print.h	/^#define vector_print_h$/;"	d
vector_products_h	hw5/cml/vector/vector_products.h	/^#define vector_products_h$/;"	d
vector_promotions_h	hw5/cml/vector/vector_promotions.h	/^#define vector_promotions_h$/;"	d
vector_result_tag	hw5/cml/et/tags.h	/^struct vector_result_tag {};$/;"	s	namespace:cml::et
vector_temporary	hw5/cml/quaternion/quaternion.h	/^    typedef typename vector_type::temporary_type vector_temporary;$/;"	t	class:cml::quaternion
vector_total_order	hw5/cml/vector/vector_comparison.h	/^vector_total_order(const LeftT& left, const RightT& right, OpT)$/;"	f	namespace:cml::detail
vector_traits_h	hw5/cml/vector/vector_traits.h	/^#define vector_traits_h$/;"	d
vector_transform_h	hw5/cml/mathlib/vector_transform.h	/^#define vector_transform_h$/;"	d
vector_type	hw5/cml/matvec/matvec_promotions.h	/^    typedef cml::vector<E1,AT1> vector_type;$/;"	t	struct:cml::et::MatVecPromote
vector_type	hw5/cml/matvec/matvec_promotions.h	/^    typedef cml::vector<E2,AT2> vector_type;$/;"	t	struct:cml::et::MatVecPromote
vector_type	hw5/cml/quaternion/conjugate.h	/^    typedef typename result_type::vector_type vector_type;$/;"	t	class:cml::et::ConjugateOp
vector_type	hw5/cml/quaternion/inverse.h	/^    typedef typename result_type::vector_type vector_type;$/;"	t	class:cml::et::QuaternionInverseOp
vector_type	hw5/cml/quaternion/quaternion.h	/^    typedef vector<Element, generator_type> vector_type;$/;"	t	class:cml::quaternion
vector_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::vector_type vector_type;$/;"	t	class:cml::et::BinaryQuaternionOp
vector_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::vector_type vector_type;$/;"	t	class:cml::et::QuaternionXpr
vector_type	hw5/cml/quaternion/quaternion_expr.h	/^    typedef typename result_type::vector_type vector_type;$/;"	t	class:cml::et::UnaryQuaternionOp
vector_type	hw5/cml/vector/dynamic.h	/^    typedef vector<Element,generator_type> vector_type;$/;"	t	class:cml::vector
vector_type	hw5/cml/vector/external.h	/^    typedef vector<Element,generator_type> vector_type;$/;"	t	class:cml::vector
vector_type	hw5/cml/vector/fixed.h	/^    typedef vector<Element,generator_type> vector_type;$/;"	t	class:cml::vector
vector_type	hw5/cml/vector/vector_unroller.h	/^    typedef cml::vector<E,AT> vector_type;$/;"	t	class:cml::et::detail::VectorAssignmentUnroller
vector_unroller_h	hw5/cml/vector/vector_unroller.h	/^#define vector_unroller_h$/;"	d
vector_weak_order	hw5/cml/vector/vector_comparison.h	/^vector_weak_order(const LeftT& left, const RightT& right, OpT)$/;"	f	namespace:cml::detail
vectord	hw5/cml/mathlib/typedef.h	/^typedef vector< double, dynamic<> > vectord;$/;"	t	namespace:cml
vectorf	hw5/cml/mathlib/typedef.h	/^typedef vector< float,  dynamic<> > vectorf;$/;"	t	namespace:cml
vectori	hw5/cml/mathlib/typedef.h	/^typedef vector< int,    dynamic<> > vectori;$/;"	t	namespace:cml
wrap	hw5/cml/util.h	/^T wrap(T value, T min, T max) {$/;"	f	namespace:cml
x_axis_2D	hw5/cml/mathlib/misc.h	/^inline vector< double, fixed<2> > x_axis_2D() {$/;"	f	namespace:cml
x_axis_3D	hw5/cml/mathlib/misc.h	/^inline vector< double, fixed<3> > x_axis_3D() {$/;"	f	namespace:cml
xfov_to_yfov	hw5/cml/util.h	/^T xfov_to_yfov(T xfov, T aspect) {$/;"	f	namespace:cml
xzoom_to_yzoom	hw5/cml/util.h	/^T xzoom_to_yzoom(T xzoom, T aspect) {$/;"	f	namespace:cml
y_axis_2D	hw5/cml/mathlib/misc.h	/^inline vector< double, fixed<2> > y_axis_2D() {$/;"	f	namespace:cml
y_axis_3D	hw5/cml/mathlib/misc.h	/^inline vector< double, fixed<3> > y_axis_3D() {$/;"	f	namespace:cml
yfov_to_xfov	hw5/cml/util.h	/^T yfov_to_xfov(T yfov, T aspect) {$/;"	f	namespace:cml
yzoom_to_xzoom	hw5/cml/util.h	/^T yzoom_to_xzoom(T yzoom, T aspect) {$/;"	f	namespace:cml
z_axis_3D	hw5/cml/mathlib/misc.h	/^inline vector< double, fixed<3> > z_axis_3D() {$/;"	f	namespace:cml
z_clip_neg_one	hw5/cml/mathlib/helper.h	/^enum ZClip { z_clip_neg_one, z_clip_zero };$/;"	e	enum:cml::ZClip
z_clip_zero	hw5/cml/mathlib/helper.h	/^enum ZClip { z_clip_neg_one, z_clip_zero };$/;"	e	enum:cml::ZClip
zero	hw5/cml/mathlib/misc.h	/^matrix< double, fixed<N,M>, row_basis, row_major > zero()$/;"	f	namespace:cml
zero	hw5/cml/mathlib/misc.h	/^vector< double, fixed<N> > zero()$/;"	f	namespace:cml
zero	hw5/cml/matrix/dynamic.h	/^    matrix_type& zero() {$/;"	f	class:cml::matrix
zero	hw5/cml/matrix/external.h	/^    matrix_type& zero() {$/;"	f	class:cml::matrix
zero	hw5/cml/matrix/fixed.h	/^    matrix_type& zero() {$/;"	f	class:cml::matrix
zero	hw5/cml/vector/dynamic.h	/^    vector_type& zero() {$/;"	f	class:cml::vector
zero	hw5/cml/vector/external.h	/^    vector_type& zero() {$/;"	f	class:cml::vector
zero	hw5/cml/vector/fixed.h	/^    vector_type& zero() {$/;"	f	class:cml::vector
zero_2D	hw5/cml/mathlib/misc.h	/^inline vector< double, fixed<2> > zero_2D() {$/;"	f	namespace:cml
zero_2x2	hw5/cml/mathlib/misc.h	/^inline matrix< double, fixed<2,2>, row_basis, row_major > zero_2x2() {$/;"	f	namespace:cml
zero_3D	hw5/cml/mathlib/misc.h	/^inline vector< double, fixed<3> > zero_3D() {$/;"	f	namespace:cml
zero_3x3	hw5/cml/mathlib/misc.h	/^inline matrix< double, fixed<3,3>, row_basis, row_major > zero_3x3() {$/;"	f	namespace:cml
zero_4D	hw5/cml/mathlib/misc.h	/^inline vector< double, fixed<4> > zero_4D() {$/;"	f	namespace:cml
zero_4x4	hw5/cml/mathlib/misc.h	/^inline matrix< double, fixed<4,4>, row_basis, row_major > zero_4x4() {$/;"	f	namespace:cml
zoom_to_fov	hw5/cml/util.h	/^T zoom_to_fov(T zoom) {$/;"	f	namespace:cml
~dynamic_1D	hw5/cml/core/dynamic_1D.h	/^    ~dynamic_1D() {$/;"	f	class:cml::dynamic_1D
~dynamic_2D	hw5/cml/core/dynamic_2D.h	/^    ~dynamic_2D() {$/;"	f	class:cml::dynamic_2D
~object	hw5/object.h	/^        virtual ~object() {}$/;"	f	class:object
~ray_tree_node	hw5/ray_tracer.h	/^    ~ray_tree_node()$/;"	f	class:ray_tree_node
