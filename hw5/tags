!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	Makefile	/^A=$(wildcard *.h)$/;"	m
B	Makefile	/^B=$(wildcard *.cpp)$/;"	m
BACK	octree.h	/^    BACK$/;"	e	enum:__anon2
BACKGND_COLOR	common.h	/^const vector3 BACKGND_COLOR = vector3(0.0, 0.0, 0.0);$/;"	v
BOTTOM	octree.h	/^    BOTTOM,$/;"	e	enum:__anon2
BSP_BACK	common.h	/^    BSP_BACK,$/;"	e	enum:__anon1
BSP_ENABLED	hw5.cpp	/^bool BSP_ENABLED = false;$/;"	v
BSP_FRONT	common.h	/^    BSP_FRONT = 0,$/;"	e	enum:__anon1
BSP_INTERSECT	common.h	/^    BSP_INTERSECT,$/;"	e	enum:__anon1
BSP_OVERLAP	common.h	/^    BSP_OVERLAP,$/;"	e	enum:__anon1
BayertoRGB	CImg.h	/^    CImg<T>& BayertoRGB(const unsigned int interpolation_type=3) {$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg():_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {}$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const CImg<T>& img) {$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const CImg<T>& img, const bool shared) {$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const CImg<t>& img):_is_shared(false) {$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const CImg<t>& img, const bool shared):_is_shared(false) {$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const CImg<t>& img, const char *const dimensions):_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const CImg<t>& img, const char *const dimensions, const T val):$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const CImg<t>& img, const char *const dimensions, const char *const values, const bool repeat_values):$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const T *const data_buffer, const unsigned int dx, const unsigned int dy=1,$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const t *const data_buffer, const unsigned int dx, const unsigned int dy=1,$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const unsigned int dx, const unsigned int dy, const unsigned int dz, const unsigned int dc, const T val):$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    CImg(const unsigned int dx, const unsigned int dy, const unsigned int dz, const unsigned int dc,$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    explicit CImg(const CImgDisplay &disp):_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    explicit CImg(const char *const filename):_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^    explicit CImg(const unsigned int dx, const unsigned int dy=1, const unsigned int dz=1, const unsigned int dc=1):$/;"	f	struct:cimg_library::CImg
CImg	CImg.h	/^  struct CImg {$/;"	s	namespace:cimg_library
CImg3dtoobject3d	CImg.h	/^    CImg<T>& CImg3dtoobject3d(CImgList<tp>& primitives, CImgList<tc>& colors, CImgList<to>& opacities) {$/;"	f	struct:cimg_library::CImg
CImgArgumentException	CImg.h	/^    CImgArgumentException(const char *const format, ...) { _cimg_exception_err("CImgArgumentException",true); }$/;"	f	struct:cimg_library::CImgArgumentException
CImgArgumentException	CImg.h	/^  struct CImgArgumentException : public CImgException {$/;"	s	namespace:cimg_library
CImgDisplay	CImg.h	/^    CImgDisplay():$/;"	f	struct:cimg_library::CImgDisplay
CImgDisplay	CImg.h	/^    CImgDisplay(const CImgDisplay& disp):$/;"	f	struct:cimg_library::CImgDisplay
CImgDisplay	CImg.h	/^    CImgDisplay(const unsigned int width, const unsigned int height,$/;"	f	struct:cimg_library::CImgDisplay
CImgDisplay	CImg.h	/^    explicit CImgDisplay(const CImg<T>& img,$/;"	f	struct:cimg_library::CImgDisplay
CImgDisplay	CImg.h	/^    explicit CImgDisplay(const CImgList<T>& list,$/;"	f	struct:cimg_library::CImgDisplay
CImgDisplay	CImg.h	/^  struct CImgDisplay {$/;"	s	namespace:cimg_library
CImgDisplayException	CImg.h	/^    CImgDisplayException(const char *const format, ...) { _cimg_exception_err("CImgDisplayException",false); }$/;"	f	struct:cimg_library::CImgDisplayException
CImgDisplayException	CImg.h	/^  struct CImgDisplayException : public CImgException {$/;"	s	namespace:cimg_library
CImgException	CImg.h	/^    CImgException() { *_message = 0; }$/;"	f	struct:cimg_library::CImgException
CImgException	CImg.h	/^    CImgException(const char *const format, ...) { _cimg_exception_err("CImgException",true); }$/;"	f	struct:cimg_library::CImgException
CImgException	CImg.h	/^  struct CImgException : public std::exception {$/;"	s	namespace:cimg_library
CImgIOException	CImg.h	/^    CImgIOException(const char *const format, ...) { _cimg_exception_err("CImgIOException",true); }$/;"	f	struct:cimg_library::CImgIOException
CImgIOException	CImg.h	/^  struct CImgIOException : public CImgException {$/;"	s	namespace:cimg_library
CImgInstanceException	CImg.h	/^    CImgInstanceException(const char *const format, ...) { _cimg_exception_err("CImgInstanceException",true); }$/;"	f	struct:cimg_library::CImgInstanceException
CImgInstanceException	CImg.h	/^  struct CImgInstanceException : public CImgException {$/;"	s	namespace:cimg_library
CImgList	CImg.h	/^    CImgList():$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4, const bool shared=false):$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const bool shared=false):$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const bool shared=false):$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    CImgList(const CImgList<T>& list):_width(0),_allocated_width(0),_data(0) {$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    CImgList(const CImgList<t>& list):_width(0),_allocated_width(0),_data(0) {$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    CImgList(const CImgList<t>& list, const bool shared):_width(0),_allocated_width(0),_data(0) {$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    CImgList(const unsigned int n, const CImg<t>& img, const bool shared=false):$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    CImgList(const unsigned int n, const unsigned int width, const unsigned int height,$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    CImgList(const unsigned int n, const unsigned int width, const unsigned int height=1,$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    explicit CImgList(const CImg<t>& img, const bool shared=false):$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    explicit CImgList(const CImgDisplay &disp):_width(0),_allocated_width(0),_data(0) {$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    explicit CImgList(const char *const filename):_width(0),_allocated_width(0),_data(0) {$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^    explicit CImgList(const unsigned int n):_width(n) {$/;"	f	struct:cimg_library::CImgList
CImgList	CImg.h	/^  struct CImgList {$/;"	s	namespace:cimg_library
CImgWarningException	CImg.h	/^    CImgWarningException(const char *const format, ...) { _cimg_exception_err("CImgWarningException",false); }$/;"	f	struct:cimg_library::CImgWarningException
CImgWarningException	CImg.h	/^  struct CImgWarningException : public CImgException {$/;"	s	namespace:cimg_library
CImg_2x2	CImg.h	/^#define CImg_2x2(/;"	d
CImg_2x2x2	CImg.h	/^#define CImg_2x2x2(/;"	d
CImg_3x3	CImg.h	/^#define CImg_3x3(/;"	d
CImg_3x3x3	CImg.h	/^#define CImg_3x3x3(/;"	d
CImg_4x4	CImg.h	/^#define CImg_4x4(/;"	d
CImg_5x5	CImg.h	/^#define CImg_5x5(/;"	d
CMYKtoCMY	CImg.h	/^    CImg<T>& CMYKtoCMY() {$/;"	f	struct:cimg_library::CImg
CMYKtoRGB	CImg.h	/^    CImg<T>& CMYKtoRGB() {$/;"	f	struct:cimg_library::CImg
CMYtoCMYK	CImg.h	/^    CImg<T>& CMYtoCMYK() {$/;"	f	struct:cimg_library::CImg
CMYtoRGB	CImg.h	/^    CImg<T>& CMYtoRGB() {$/;"	f	struct:cimg_library::CImg
CXX	Makefile	/^CXX=ccache g++-mp-4.5$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -std=c++0x \\$/;"	m
DEBUG_MODE	common.h	/^static bool DEBUG_MODE = false;$/;"	v
DOF_ON	hw5.cpp	/^bool DOF_ON = true;$/;"	v
EPS_D	common.h	/^const double EPS_D = std::numeric_limits<double>::epsilon();$/;"	v
EPS_F	common.h	/^const float EPS_F = 20*std::numeric_limits<float>::epsilon();$/;"	v
FABS_EPS_F	common.h	/^const double FABS_EPS_F = std::numeric_limits<float>::epsilon();$/;"	v
FFT	CImg.h	/^    CImgList<T>& FFT(const bool invert=false) {$/;"	f	struct:cimg_library::CImgList
FFT	CImg.h	/^    CImgList<T>& FFT(const char axis, const bool invert=false) {$/;"	f	struct:cimg_library::CImgList
FFT	CImg.h	/^    static void FFT(CImg<T>& real, CImg<T>& imag, const bool invert=false) {$/;"	f	struct:cimg_library::CImg
FFT	CImg.h	/^    static void FFT(CImg<T>& real, CImg<T>& imag, const char axis, const bool invert=false) {$/;"	f	struct:cimg_library::CImg
FRONT	octree.h	/^    FRONT,$/;"	e	enum:__anon2
HSItoRGB	CImg.h	/^    CImg<T>& HSItoRGB() {$/;"	f	struct:cimg_library::CImg
HSLtoRGB	CImg.h	/^    CImg<T>& HSLtoRGB() {$/;"	f	struct:cimg_library::CImg
HSV_LUT256	CImg.h	/^    static const CImg<Tuchar>& HSV_LUT256() {$/;"	f	struct:cimg_library::CImg
HSVtoRGB	CImg.h	/^    CImg<T>& HSVtoRGB() {$/;"	f	struct:cimg_library::CImg
IMG_HEIGHT	hw5.cpp	/^int IMG_HEIGHT = 768;$/;"	v
IMG_WIDTH	hw5.cpp	/^int IMG_WIDTH = 1024;$/;"	v
INC	Makefile	/^INC=. \/opt\/local\/include$/;"	m
JITTER	hw5.cpp	/^int JITTER = 1; \/\/ JITTER*JITTER 개의 subpixel ray$/;"	v
JITTER_ANGLE_DEG	hw5.cpp	/^float JITTER_ANGLE_DEG = 5; \/\/ 주의! int면 rad()에서 0이 나온다.$/;"	v
JITTER_ANGLE_DEG_R	hw5.cpp	/^float JITTER_ANGLE_DEG_R = 5; \/\/ 주의! int면 rad()에서 0이 나온다.$/;"	v
JITTER_REFL_ON	hw5.cpp	/^bool JITTER_REFL_ON = false;$/;"	v
JITTER_REFR_ON	hw5.cpp	/^bool JITTER_REFR_ON = false;$/;"	v
LEFT	octree.h	/^    LEFT,$/;"	e	enum:__anon2
LENS_HEIGHT	hw5.cpp	/^int LENS_HEIGHT = 4;$/;"	v
LENS_WIDTH	hw5.cpp	/^int LENS_WIDTH = 4; \/\/ 사실은 aperture size$/;"	v
LIB	Makefile	/^LIB=\/opt\/local\/lib$/;"	m
LabtoRGB	CImg.h	/^    CImg<T>& LabtoRGB() {$/;"	f	struct:cimg_library::CImg
LabtoXYZ	CImg.h	/^    CImg<T>& LabtoXYZ() {$/;"	f	struct:cimg_library::CImg
MAX_DEPTH	hw5.cpp	/^int MAX_DEPTH = 10;$/;"	v
MSE	CImg.h	/^    Tdouble MSE(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
Magick_info	CImg.h	/^      Magick_info() {$/;"	f	struct:cimg_library::cimg::Magick_info
Magick_info	CImg.h	/^    static struct Magick_info {$/;"	s	namespace:cimg_library::cimg
NOMINMAX	common.h	/^#define NOMINMAX$/;"	d
None	CImg.h	/^#define None /;"	d
None	CImg.h	/^#undef None$/;"	d
OBJS	Makefile	/^OBJS = hw5.o object.o triangle.o polyhedron.o$/;"	m
PI	CImg.h	/^    const double PI = 3.14159265358979323846;   \/\/!< Definition of the mathematical constant PI$/;"	m	namespace:cimg_library::cimg
PI	CImg.h	/^#define PI /;"	d
PI	CImg.h	/^#undef PI$/;"	d
PSNR	CImg.h	/^    Tdouble PSNR(const CImg<t>& img, const Tdouble valmax=255) const {$/;"	f	struct:cimg_library::CImg
REFR_AIR	common.h	/^const float REFR_AIR = 1.000277;$/;"	v
REFR_GLASS	common.h	/^const float REFR_GLASS = 1.510;$/;"	v
REFR_WATER	common.h	/^const float REFR_WATER = 1.3330;$/;"	v
RES	hw5.cpp	/^float RES = 0.01;$/;"	v
RGBtoBayer	CImg.h	/^    CImg<T>& RGBtoBayer() {$/;"	f	struct:cimg_library::CImg
RGBtoCMY	CImg.h	/^    CImg<T>& RGBtoCMY() {$/;"	f	struct:cimg_library::CImg
RGBtoCMYK	CImg.h	/^    CImg<T>& RGBtoCMYK() {$/;"	f	struct:cimg_library::CImg
RGBtoHSI	CImg.h	/^    CImg<T>& RGBtoHSI() {$/;"	f	struct:cimg_library::CImg
RGBtoHSL	CImg.h	/^    CImg<T>& RGBtoHSL() {$/;"	f	struct:cimg_library::CImg
RGBtoHSV	CImg.h	/^    CImg<T>& RGBtoHSV() {$/;"	f	struct:cimg_library::CImg
RGBtoLab	CImg.h	/^    CImg<T>& RGBtoLab() {$/;"	f	struct:cimg_library::CImg
RGBtoXYZ	CImg.h	/^    CImg<T>& RGBtoXYZ() {$/;"	f	struct:cimg_library::CImg
RGBtoYCbCr	CImg.h	/^    CImg<T>& RGBtoYCbCr() {$/;"	f	struct:cimg_library::CImg
RGBtoYUV	CImg.h	/^    CImg<T>& RGBtoYUV() {$/;"	f	struct:cimg_library::CImg
RGBtoxyY	CImg.h	/^    CImg<T>& RGBtoxyY() {$/;"	f	struct:cimg_library::CImg
RIGHT	octree.h	/^    RIGHT = 0,$/;"	e	enum:__anon2
SHADOW_RAY	hw5.cpp	/^int SHADOW_RAY = 2; \/\/ SHADOW_RAY*SHADOW_RAY 개의 shadow ray$/;"	v
SVD	CImg.h	/^    const CImg<T>& SVD(CImg<t>& U, CImg<t>& S, CImg<t>& V, const bool sorting=true,$/;"	f	struct:cimg_library::CImg
TEX_DIR	scene.cpp	/^#define TEX_DIR(/;"	d	file:
TEX_DIR	scene.cpp	/^#undef TEX_DIR$/;"	d	file:
TOP	octree.h	/^    TOP,$/;"	e	enum:__anon2
Tbool	CImg.h	/^    typedef typename cimg::superset<T,bool>::type Tbool;$/;"	t	struct:cimg_library::CImg
Tbool	CImg.h	/^    typedef typename cimg::superset<T,bool>::type Tbool;$/;"	t	struct:cimg_library::CImgList
Tchar	CImg.h	/^    typedef typename cimg::superset<T,char>::type Tchar;$/;"	t	struct:cimg_library::CImg
Tchar	CImg.h	/^    typedef typename cimg::superset<T,char>::type Tchar;$/;"	t	struct:cimg_library::CImgList
Tdouble	CImg.h	/^    typedef typename cimg::superset<T,double>::type Tdouble;$/;"	t	struct:cimg_library::CImg
Tdouble	CImg.h	/^    typedef typename cimg::superset<T,double>::type Tdouble;$/;"	t	struct:cimg_library::CImgList
Tfloat	CImg.h	/^    typedef typename cimg::superset<T,float>::type Tfloat;$/;"	t	struct:cimg_library::CImg
Tfloat	CImg.h	/^    typedef typename cimg::superset<T,float>::type Tfloat;$/;"	t	struct:cimg_library::CImgList
Tint	CImg.h	/^    typedef typename cimg::superset<T,int>::type Tint;$/;"	t	struct:cimg_library::CImg
Tint	CImg.h	/^    typedef typename cimg::superset<T,int>::type Tint;$/;"	t	struct:cimg_library::CImgList
Tlong	CImg.h	/^    typedef typename cimg::superset<T,long>::type Tlong;$/;"	t	struct:cimg_library::CImg
Tlong	CImg.h	/^    typedef typename cimg::superset<T,long>::type Tlong;$/;"	t	struct:cimg_library::CImgList
Tshort	CImg.h	/^    typedef typename cimg::superset<T,short>::type Tshort;$/;"	t	struct:cimg_library::CImg
Tshort	CImg.h	/^    typedef typename cimg::superset<T,short>::type Tshort;$/;"	t	struct:cimg_library::CImgList
Tuchar	CImg.h	/^    typedef typename cimg::superset<T,unsigned char>::type Tuchar;$/;"	t	struct:cimg_library::CImg
Tuchar	CImg.h	/^    typedef typename cimg::superset<T,unsigned char>::type Tuchar;$/;"	t	struct:cimg_library::CImgList
Tuint	CImg.h	/^    typedef typename cimg::superset<T,unsigned int>::type Tuint;$/;"	t	struct:cimg_library::CImg
Tuint	CImg.h	/^    typedef typename cimg::superset<T,unsigned int>::type Tuint;$/;"	t	struct:cimg_library::CImgList
Tulong	CImg.h	/^    typedef typename cimg::superset<T,unsigned long>::type Tulong;$/;"	t	struct:cimg_library::CImg
Tulong	CImg.h	/^    typedef typename cimg::superset<T,unsigned long>::type Tulong;$/;"	t	struct:cimg_library::CImgList
Tushort	CImg.h	/^    typedef typename cimg::superset<T,unsigned short>::type Tushort;$/;"	t	struct:cimg_library::CImg
Tushort	CImg.h	/^    typedef typename cimg::superset<T,unsigned short>::type Tushort;$/;"	t	struct:cimg_library::CImgList
Win32_attr	CImg.h	/^    Win32_info& Win32_attr() { static Win32_info val; return val; }$/;"	f	namespace:cimg_library::cimg
Win32_attr	CImg.h	/^    inline Win32_info& Win32_attr() { static Win32_info val; return val; }$/;"	f	namespace:cimg_library::cimg
Win32_info	CImg.h	/^      Win32_info() { wait_event = CreateEvent(0,FALSE,FALSE,0); }$/;"	f	struct:cimg_library::cimg::Win32_info
Win32_info	CImg.h	/^    struct Win32_info {$/;"	s	namespace:cimg_library::cimg
X	common.h	/^const vector3 X = vector3().cardinal(0);$/;"	v
X11_attr	CImg.h	/^    X11_info& X11_attr() { static X11_info val; return val; }$/;"	f	namespace:cimg_library::cimg
X11_attr	CImg.h	/^    inline X11_info& X11_attr() { static X11_info val; return val; }$/;"	f	namespace:cimg_library::cimg
X11_info	CImg.h	/^      X11_info():nb_wins(0),event_thread(0),display(0),$/;"	f	struct:cimg_library::cimg::X11_info
X11_info	CImg.h	/^    struct X11_info {$/;"	s	namespace:cimg_library::cimg
XYZtoLab	CImg.h	/^    CImg<T>& XYZtoLab() {$/;"	f	struct:cimg_library::CImg
XYZtoRGB	CImg.h	/^    CImg<T>& XYZtoRGB() {$/;"	f	struct:cimg_library::CImg
XYZtoxyY	CImg.h	/^    CImg<T>& XYZtoxyY() {$/;"	f	struct:cimg_library::CImg
Y	common.h	/^const vector3 Y = vector3().cardinal(1);$/;"	v
YCbCrtoRGB	CImg.h	/^    CImg<T>& YCbCrtoRGB() {$/;"	f	struct:cimg_library::CImg
YUVtoRGB	CImg.h	/^    CImg<T>& YUVtoRGB() {$/;"	f	struct:cimg_library::CImg
Z	common.h	/^const vector3 Z = vector3().cardinal(2);$/;"	v
_BSP_TREE_	bsp_tree.h	/^#define _BSP_TREE_$/;"	d
_CImgList_stdarg	CImg.h	/^#define _CImgList_stdarg(/;"	d
_CImg_stdarg	CImg.h	/^#define _CImg_stdarg(/;"	d
_COMMON_H_	common.h	/^#define _COMMON_H_$/;"	d
_CRT_NONSTDC_NO_DEPRECATE	CImg.h	/^#define _CRT_NONSTDC_NO_DEPRECATE /;"	d
_CRT_SECURE_NO_DEPRECATE	CImg.h	/^#define _CRT_SECURE_NO_DEPRECATE /;"	d
_D_	common.h	/^#define _D_ /;"	d
_D_	common.h	/^#define _D_$/;"	d
_LU	CImg.h	/^    CImg<T>& _LU(CImg<t>& indx, bool& d) {$/;"	f	struct:cimg_library::CImg
_MATERIAL_H_	material.h	/^#define _MATERIAL_H_$/;"	d
_Magick_info	CImg.h	/^    } _Magick_info;$/;"	m	namespace:cimg_library::cimg	typeref:struct:cimg_library::cimg::Magick_info
_OBJECT_H_	object.h	/^#define _OBJECT_H_$/;"	d
_OBJ_FILE_H_	obj_file.h	/^#define _OBJ_FILE_H_$/;"	d
_OCTREE_H_	octree.h	/^#define _OCTREE_H_$/;"	d
_POLYHEDRON_H_	polyhedron.h	/^#define _POLYHEDRON_H_$/;"	d
_RAY_TRACER_H_	ray_tracer.h	/^#define _RAY_TRACER_H_$/;"	d
_SCENE_H_	scene.h	/^#define _SCENE_H_$/;"	d
_TRIANGLE_H_	triangle.h	/^#define _TRIANGLE_H_$/;"	d
_WIN32_IE	CImg.h	/^#define _WIN32_IE /;"	d
__STDC_CONSTANT_MACROS	CImg.h	/^#define __STDC_CONSTANT_MACROS /;"	d
__cimg_load_pandore_case	CImg.h	/^#define __cimg_load_pandore_case(/;"	d
__cimg_save_pandore_case	CImg.h	/^#define __cimg_save_pandore_case(/;"	d
__draw_object3d	CImg.h	/^    void __draw_object3d(const unsigned int n_primitive, const CImgList<to>& opacities, const CImg<tc>& color,$/;"	f	struct:cimg_library::CImg
__draw_object3d	CImg.h	/^    void __draw_object3d(const unsigned int, const CImg<to>&, const CImg<tc>&,$/;"	f	struct:cimg_library::CImg
_allocated_width	CImg.h	/^    unsigned int _allocated_width;$/;"	m	struct:cimg_library::CImgList
_assign	CImg.h	/^    CImgDisplay& _assign(const unsigned int dimw, const unsigned int dimh, const char *const ptitle=0,$/;"	f	struct:cimg_library::CImgDisplay
_assign	CImg.h	/^    void _assign(const unsigned int dimw, const unsigned int dimh, const char *const ptitle=0,$/;"	f	struct:cimg_library::CImgDisplay
_assign_xshm	CImg.h	/^    static int _assign_xshm(Display *dpy, XErrorEvent *error) {$/;"	f	struct:cimg_library::CImgDisplay
_at	CImg.h	/^    T _at(const int off) const {$/;"	f	struct:cimg_library::CImg
_at	CImg.h	/^    T& _at(const int off) {$/;"	f	struct:cimg_library::CImg
_atN	CImg.h	/^    T _atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImgList
_atN	CImg.h	/^    T& _atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library::CImgList
_atNX	CImg.h	/^    T _atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImgList
_atNX	CImg.h	/^    T& _atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library::CImgList
_atNXY	CImg.h	/^    T _atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImgList
_atNXY	CImg.h	/^    T& _atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) {$/;"	f	struct:cimg_library::CImgList
_atNXYZ	CImg.h	/^    T _atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) const {$/;"	f	struct:cimg_library::CImgList
_atNXYZ	CImg.h	/^    T& _atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) {$/;"	f	struct:cimg_library::CImgList
_atNXYZC	CImg.h	/^    T _atNXYZC(const int pos, const int x, const int y, const int z, const int c) const {$/;"	f	struct:cimg_library::CImgList
_atNXYZC	CImg.h	/^    T& _atNXYZC(const int pos, const int x, const int y, const int z, const int c) {$/;"	f	struct:cimg_library::CImgList
_atX	CImg.h	/^    T _atX(const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
_atX	CImg.h	/^    T& _atX(const int x, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library::CImg
_atXY	CImg.h	/^    T _atXY(const int x, const int y, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
_atXY	CImg.h	/^    T& _atXY(const int x, const int y, const int z=0, const int c=0) {$/;"	f	struct:cimg_library::CImg
_atXYZ	CImg.h	/^    T _atXYZ(const int x, const int y, const int z, const int c=0) const {$/;"	f	struct:cimg_library::CImg
_atXYZ	CImg.h	/^    T& _atXYZ(const int x, const int y, const int z, const int c=0) {$/;"	f	struct:cimg_library::CImg
_atXYZC	CImg.h	/^    T _atXYZC(const int x, const int y, const int z, const int c) const {$/;"	f	struct:cimg_library::CImg
_atXYZC	CImg.h	/^    T& _atXYZC(const int x, const int y, const int z, const int c) {$/;"	f	struct:cimg_library::CImg
_autocrop	CImg.h	/^    CImg<intT> _autocrop(const T value, const char axis) const {$/;"	f	struct:cimg_library::CImg
_background_window	CImg.h	/^    HWND _background_window;$/;"	m	struct:cimg_library::CImgDisplay
_background_window	CImg.h	/^    Window _window, _background_window;$/;"	m	struct:cimg_library::CImgDisplay
_bmi	CImg.h	/^    BITMAPINFO _bmi;$/;"	m	struct:cimg_library::CImgDisplay
_button	CImg.h	/^    volatile unsigned int _button;$/;"	m	struct:cimg_library::CImgDisplay
_ccs	CImg.h	/^    CLIENTCREATESTRUCT _ccs;$/;"	m	struct:cimg_library::CImgDisplay
_cimg_Labf	CImg.h	/^#define _cimg_Labf(/;"	d
_cimg_Labfi	CImg.h	/^#define _cimg_Labfi(/;"	d
_cimg_Tfloat	CImg.h	/^#define _cimg_Tfloat /;"	d
_cimg_Tt	CImg.h	/^#define _cimg_Tt /;"	d
_cimg_Ttfloat	CImg.h	/^#define _cimg_Ttfloat /;"	d
_cimg_blur_patch2d	CImg.h	/^#define _cimg_blur_patch2d(/;"	d
_cimg_blur_patch2d_fast	CImg.h	/^#define _cimg_blur_patch2d_fast(/;"	d
_cimg_blur_patch3d	CImg.h	/^#define _cimg_blur_patch3d(/;"	d
_cimg_blur_patch3d_fast	CImg.h	/^#define _cimg_blur_patch3d_fast(/;"	d
_cimg_create_ext_operators	CImg.h	/^#define _cimg_create_ext_operators(/;"	d
_cimg_deriche2_apply	CImg.h	/^#define _cimg_deriche2_apply /;"	d
_cimg_draw_fill_insert	CImg.h	/^#define _cimg_draw_fill_insert(/;"	d
_cimg_draw_fill_set	CImg.h	/^#define _cimg_draw_fill_set(/;"	d
_cimg_draw_fill_test	CImg.h	/^#define _cimg_draw_fill_test(/;"	d
_cimg_draw_fill_test_neighbor	CImg.h	/^#define _cimg_draw_fill_test_neighbor(/;"	d
_cimg_error_mgr	CImg.h	/^    struct _cimg_error_mgr {$/;"	s	struct:cimg_library::CImg
_cimg_error_ptr	CImg.h	/^    typedef struct _cimg_error_mgr *_cimg_error_ptr;$/;"	t	struct:cimg_library::CImg	typeref:struct:cimg_library::CImg::_cimg_error_mgr
_cimg_exception_err	CImg.h	/^#define _cimg_exception_err(/;"	d
_cimg_fill1	CImg.h	/^#define _cimg_fill1(/;"	d
_cimg_font	CImg.h	/^#define _cimg_font(/;"	d
_cimg_for_triangle1	CImg.h	/^#define _cimg_for_triangle1(/;"	d
_cimg_for_triangle2	CImg.h	/^#define _cimg_for_triangle2(/;"	d
_cimg_for_triangle3	CImg.h	/^#define _cimg_for_triangle3(/;"	d
_cimg_for_triangle4	CImg.h	/^#define _cimg_for_triangle4(/;"	d
_cimg_for_triangle5	CImg.h	/^#define _cimg_for_triangle5(/;"	d
_cimg_gs2x_for3	CImg.h	/^#define _cimg_gs2x_for3(/;"	d
_cimg_gs2x_for3x3	CImg.h	/^#define _cimg_gs2x_for3x3(/;"	d
_cimg_gs3x_for3	CImg.h	/^#define _cimg_gs3x_for3(/;"	d
_cimg_gs3x_for3x3	CImg.h	/^#define _cimg_gs3x_for3x3(/;"	d
_cimg_instance	CImg.h	/^#define _cimg_instance /;"	d
_cimg_iskey_def	CImg.h	/^#define _cimg_iskey_def(/;"	d
_cimg_iskey_test	CImg.h	/^#define _cimg_iskey_test(/;"	d
_cimg_iskey_test2	CImg.h	/^#define _cimg_iskey_test2(/;"	d
_cimg_jpeg_error_exit	CImg.h	/^    METHODDEF(void) _cimg_jpeg_error_exit(j_common_ptr cinfo) {$/;"	f	struct:cimg_library::CImg
_cimg_keycode	CImg.h	/^#define _cimg_keycode(/;"	d
_cimg_lanczos	CImg.h	/^    static float _cimg_lanczos(const float x) {$/;"	f	struct:cimg_library::CImg
_cimg_load_cimg_case	CImg.h	/^#define _cimg_load_cimg_case(/;"	d
_cimg_load_cimg_case2	CImg.h	/^#define _cimg_load_cimg_case2(/;"	d
_cimg_load_inr_case	CImg.h	/^#define _cimg_load_inr_case(/;"	d
_cimg_load_pandore_case	CImg.h	/^#define _cimg_load_pandore_case(/;"	d
_cimg_math_parser	CImg.h	/^      _cimg_math_parser(const CImg<T>& img, const char *const expression, const char *const funcname=0):$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
_cimg_math_parser	CImg.h	/^    struct _cimg_math_parser {$/;"	s	struct:cimg_library::CImg
_cimg_median_sort	CImg.h	/^#define _cimg_median_sort(/;"	d
_cimg_mp_opcode0	CImg.h	/^#define _cimg_mp_opcode0(/;"	d
_cimg_mp_opcode1	CImg.h	/^#define _cimg_mp_opcode1(/;"	d
_cimg_mp_opcode2	CImg.h	/^#define _cimg_mp_opcode2(/;"	d
_cimg_mp_opcode3	CImg.h	/^#define _cimg_mp_opcode3(/;"	d
_cimg_mp_opcode5	CImg.h	/^#define _cimg_mp_opcode5(/;"	d
_cimg_mp_return	CImg.h	/^#define _cimg_mp_return(/;"	d
_cimg_redefine_None	CImg.h	/^#define _cimg_redefine_None$/;"	d
_cimg_redefine_PI	CImg.h	/^#define _cimg_redefine_PI$/;"	d
_cimg_redefine_max	CImg.h	/^#define _cimg_redefine_max$/;"	d
_cimg_redefine_min	CImg.h	/^#define _cimg_redefine_min$/;"	d
_cimg_save_cimg_case	CImg.h	/^#define _cimg_save_cimg_case(/;"	d
_cimg_save_pandore_case	CImg.h	/^#define _cimg_save_pandore_case(/;"	d
_cimg_save_tiff	CImg.h	/^#define _cimg_save_tiff(/;"	d
_cimg_set_key	CImg.h	/^#define _cimg_set_key(/;"	d
_cimg_static	CImg.h	/^#define _cimg_static /;"	d
_cimg_static	CImg.h	/^#define _cimg_static$/;"	d
_cimg_test_temporary_path	CImg.h	/^#define _cimg_test_temporary_path(/;"	d
_cimg_vecalign2d	CImg.h	/^#define _cimg_vecalign2d(/;"	d
_cimg_vecalign3d	CImg.h	/^#define _cimg_vecalign3d(/;"	d
_cimgdisplay_instance	CImg.h	/^#define _cimgdisplay_instance /;"	d
_cimglist_def_is_same	CImg.h	/^#define _cimglist_def_is_same(/;"	d
_cimglist_def_is_same1	CImg.h	/^#define _cimglist_def_is_same1(/;"	d
_cimglist_def_is_same2	CImg.h	/^#define _cimglist_def_is_same2(/;"	d
_cimglist_def_is_same3	CImg.h	/^#define _cimglist_def_is_same3(/;"	d
_cimglist_instance	CImg.h	/^#define _cimglist_instance /;"	d
_cimgz_load_cimg_case	CImg.h	/^#define _cimgz_load_cimg_case(/;"	d
_colormap	CImg.h	/^    Colormap _colormap;$/;"	m	struct:cimg_library::CImgDisplay
_cubic_atX	CImg.h	/^    Tfloat _cubic_atX(const float fx, const int y, const int z, const int c,$/;"	f	struct:cimg_library::CImg
_cubic_atX	CImg.h	/^    Tfloat _cubic_atX(const float fx, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
_cubic_atXY	CImg.h	/^    Tfloat _cubic_atXY(const float fx, const float fy, const int z, const int c,$/;"	f	struct:cimg_library::CImg
_cubic_atXY	CImg.h	/^    Tfloat _cubic_atXY(const float fx, const float fy, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
_cubic_atXYZ	CImg.h	/^    Tfloat _cubic_atXYZ(const float fx, const float fy, const float fz, const int c,$/;"	f	struct:cimg_library::CImg
_cubic_atXYZ	CImg.h	/^    Tfloat _cubic_atXYZ(const float fx, const float fy, const float fz, const int c=0) const {$/;"	f	struct:cimg_library::CImg
_curr_mode	CImg.h	/^    DEVMODE _curr_mode;$/;"	m	struct:cimg_library::CImgDisplay
_data	CImg.h	/^    CImg<T> *_data;$/;"	m	struct:cimg_library::CImgList
_data	CImg.h	/^    T *_data;$/;"	m	struct:cimg_library::CImg
_data	CImg.h	/^    unsigned int *_data;$/;"	m	struct:cimg_library::CImgDisplay
_data	CImg.h	/^    void *_data;$/;"	m	struct:cimg_library::CImgDisplay
_depth	CImg.h	/^    unsigned int _depth;$/;"	m	struct:cimg_library::CImg
_desinit_fullscreen	CImg.h	/^    void _desinit_fullscreen() {$/;"	f	struct:cimg_library::CImgDisplay
_display	CImg.h	/^    const CImg<T>& _display(CImgDisplay &disp, const char *const title,$/;"	f	struct:cimg_library::CImg
_display	CImg.h	/^    const CImgList<T>& _display(CImgDisplay &disp, const char *const title, const bool display_info,$/;"	f	struct:cimg_library::CImgList
_display_object3d	CImg.h	/^    const CImg<T>& _display_object3d(CImgDisplay& disp, const char *const title,$/;"	f	struct:cimg_library::CImg
_distance_core	CImg.h	/^    CImg<T>& _distance_core(long (*const sep)(const long, const long, const long *const),$/;"	f	struct:cimg_library::CImg
_distance_dist_cdt	CImg.h	/^    static long _distance_dist_cdt(const long x, const long i, const long *const g) {$/;"	f	struct:cimg_library::CImg
_distance_dist_edt	CImg.h	/^    static long _distance_dist_edt(const long x, const long i, const long *const g) {$/;"	f	struct:cimg_library::CImg
_distance_dist_mdt	CImg.h	/^    static long _distance_dist_mdt(const long x, const long i, const long *const g) {$/;"	f	struct:cimg_library::CImg
_distance_scan	CImg.h	/^    static void _distance_scan(const unsigned int len,$/;"	f	struct:cimg_library::CImg
_distance_sep_cdt	CImg.h	/^    static long _distance_sep_cdt(const long i, const long u, const long *const g) {$/;"	f	struct:cimg_library::CImg
_distance_sep_edt	CImg.h	/^    static long _distance_sep_edt(const long i, const long u, const long *const g) {$/;"	f	struct:cimg_library::CImg
_distance_sep_mdt	CImg.h	/^    static long _distance_sep_mdt(const long i, const long u, const long *const g) {$/;"	f	struct:cimg_library::CImg
_draw_ellipse	CImg.h	/^    CImg<T>& _draw_ellipse(const int x0, const int y0, const float r1, const float r2, const float angle,$/;"	f	struct:cimg_library::CImg
_draw_object3d	CImg.h	/^    CImg<T>& _draw_object3d(void *const pboard, CImg<tz>& zbuffer,$/;"	f	struct:cimg_library::CImg
_draw_scanline	CImg.h	/^    CImg<T>& _draw_scanline(const int x0, const int x1, const int y,$/;"	f	struct:cimg_library::CImg
_draw_scanline	CImg.h	/^    CImg<T>& _draw_scanline(const tc *const color, const float opacity=1) {$/;"	f	struct:cimg_library::CImg
_draw_text	CImg.h	/^    CImg<T>& _draw_text(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
_draw_triangle	CImg.h	/^    CImg<T>& _draw_triangle(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
_events_thread	CImg.h	/^    static DWORD WINAPI _events_thread(void* arg) {$/;"	f	struct:cimg_library::CImgDisplay
_events_thread	CImg.h	/^    static void* _events_thread(void *) { \/\/ Only one thread to handle events for all opened display windows.$/;"	f	struct:cimg_library::CImgDisplay
_exception_mode	CImg.h	/^    inline unsigned int& _exception_mode(const unsigned int value, const bool is_set) {$/;"	f	namespace:cimg_library::cimg
_fitscreen	CImg.h	/^    static unsigned int _fitscreen(const unsigned int dx, const unsigned int dy, const unsigned int dz,$/;"	f	struct:cimg_library::CImgDisplay
_font	CImg.h	/^    static CImgList<T> _font(const unsigned int *const font, const unsigned int w, const unsigned int h, const bool variable_size) {$/;"	f	struct:cimg_library::CImgList
_fps_fps	CImg.h	/^    float _fps_fps, _min, _max;$/;"	m	struct:cimg_library::CImgDisplay
_fps_frames	CImg.h	/^    unsigned long _timer, _fps_frames, _fps_timer;$/;"	m	struct:cimg_library::CImgDisplay
_fps_timer	CImg.h	/^    unsigned long _timer, _fps_frames, _fps_timer;$/;"	m	struct:cimg_library::CImgDisplay
_functor2d_expr	CImg.h	/^      _functor2d_expr(const char *const expr):mp(0) { mp = new _cimg_math_parser(CImg<T>::empty(),expr,0); }$/;"	f	struct:cimg_library::CImg::_functor2d_expr
_functor2d_expr	CImg.h	/^    struct _functor2d_expr {$/;"	s	struct:cimg_library::CImg
_functor2d_float	CImg.h	/^      _functor2d_float(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library::CImg::_functor2d_float
_functor2d_float	CImg.h	/^    struct _functor2d_float {$/;"	s	struct:cimg_library::CImg
_functor2d_int	CImg.h	/^      _functor2d_int(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library::CImg::_functor2d_int
_functor2d_int	CImg.h	/^    struct _functor2d_int {$/;"	s	struct:cimg_library::CImg
_functor3d_expr	CImg.h	/^      _functor3d_expr(const char *const expr):mp(0) { mp = new _cimg_math_parser(CImg<T>::empty(),expr,0); }$/;"	f	struct:cimg_library::CImg::_functor3d_expr
_functor3d_expr	CImg.h	/^    struct _functor3d_expr {$/;"	s	struct:cimg_library::CImg
_functor3d_float	CImg.h	/^      _functor3d_float(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library::CImg::_functor3d_float
_functor3d_float	CImg.h	/^    struct _functor3d_float {$/;"	s	struct:cimg_library::CImg
_functor3d_int	CImg.h	/^      _functor3d_int(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library::CImg::_functor3d_int
_functor3d_int	CImg.h	/^    struct _functor3d_int {$/;"	s	struct:cimg_library::CImg
_functor4d_int	CImg.h	/^      _functor4d_int(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library::CImg::_functor4d_int
_functor4d_int	CImg.h	/^    struct _functor4d_int {$/;"	s	struct:cimg_library::CImg
_functor4d_streamline2d_directed	CImg.h	/^      _functor4d_streamline2d_directed(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library::CImg::_functor4d_streamline2d_directed
_functor4d_streamline2d_directed	CImg.h	/^    struct _functor4d_streamline2d_directed {$/;"	s	struct:cimg_library::CImg
_functor4d_streamline2d_oriented	CImg.h	/^      _functor4d_streamline2d_oriented(const CImg<T>& pref):ref(pref),pI(0) { pI = new CImg<floatT>(2,2,1,2); }$/;"	f	struct:cimg_library::CImg::_functor4d_streamline2d_oriented
_functor4d_streamline2d_oriented	CImg.h	/^    struct _functor4d_streamline2d_oriented {$/;"	s	struct:cimg_library::CImg
_functor4d_streamline3d_directed	CImg.h	/^      _functor4d_streamline3d_directed(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library::CImg::_functor4d_streamline3d_directed
_functor4d_streamline3d_directed	CImg.h	/^    struct _functor4d_streamline3d_directed {$/;"	s	struct:cimg_library::CImg
_functor4d_streamline3d_oriented	CImg.h	/^      _functor4d_streamline3d_oriented(const CImg<T>& pref):ref(pref),pI(0) { pI = new CImg<floatT>(2,2,2,3); }$/;"	f	struct:cimg_library::CImg::_functor4d_streamline3d_oriented
_functor4d_streamline3d_oriented	CImg.h	/^    struct _functor4d_streamline3d_oriented {$/;"	s	struct:cimg_library::CImg
_functor4d_streamline_expr	CImg.h	/^      _functor4d_streamline_expr(const char *const expr):mp(0) { mp = new _cimg_math_parser(CImg<T>::empty(),expr,"streamline"); }$/;"	f	struct:cimg_library::CImg::_functor4d_streamline_expr
_functor4d_streamline_expr	CImg.h	/^    struct _functor4d_streamline_expr {$/;"	s	struct:cimg_library::CImg
_get_label	CImg.h	/^    CImg<unsigned long> _get_label(const unsigned int nb, const int *const dx, const int *const dy, const int *const dz,$/;"	f	struct:cimg_library::CImg
_get_permute_axes	CImg.h	/^    CImg<t> _get_permute_axes(const char *const permut, const t&) const {$/;"	f	struct:cimg_library::CImg
_get_select	CImg.h	/^    CImg<intT> _get_select(CImgDisplay &disp, const char *const title, const bool feature_type,$/;"	f	struct:cimg_library::CImgList
_get_select	CImg.h	/^    CImg<intT> _get_select(CImgDisplay &disp, const char *const title,$/;"	f	struct:cimg_library::CImg
_handle_events	CImg.h	/^    static LRESULT APIENTRY _handle_events(HWND window,UINT msg,WPARAM wParam,LPARAM lParam) {$/;"	f	struct:cimg_library::CImgDisplay
_handle_events	CImg.h	/^    void _handle_events(const XEvent *const pevent) {$/;"	f	struct:cimg_library::CImgDisplay
_hdc	CImg.h	/^    HDC _hdc;$/;"	m	struct:cimg_library::CImgDisplay
_height	CImg.h	/^    unsigned int _height;$/;"	m	struct:cimg_library::CImg
_height	CImg.h	/^    unsigned int _height;$/;"	m	struct:cimg_library::CImgDisplay
_image	CImg.h	/^    XImage *_image;$/;"	m	struct:cimg_library::CImgDisplay
_init_fullscreen	CImg.h	/^    void _init_fullscreen() {$/;"	f	struct:cimg_library::CImgDisplay
_is_CImg3d	CImg.h	/^    static bool _is_CImg3d(const T val, const char c) {$/;"	f	struct:cimg_library::CImg
_is_closed	CImg.h	/^    volatile bool _is_closed;$/;"	m	struct:cimg_library::CImgDisplay
_is_created	CImg.h	/^    HANDLE _is_created;$/;"	m	struct:cimg_library::CImgDisplay
_is_cursor_visible	CImg.h	/^    bool _is_cursor_visible;$/;"	m	struct:cimg_library::CImgDisplay
_is_event	CImg.h	/^    volatile bool _is_event;$/;"	m	struct:cimg_library::CImgDisplay
_is_fullscreen	CImg.h	/^    bool _is_fullscreen;$/;"	m	struct:cimg_library::CImgDisplay
_is_key0	CImg.h	/^    volatile bool _is_key0;$/;"	m	struct:cimg_library::CImgDisplay
_is_key1	CImg.h	/^    volatile bool _is_key1;$/;"	m	struct:cimg_library::CImgDisplay
_is_key2	CImg.h	/^    volatile bool _is_key2;$/;"	m	struct:cimg_library::CImgDisplay
_is_key3	CImg.h	/^    volatile bool _is_key3;$/;"	m	struct:cimg_library::CImgDisplay
_is_key4	CImg.h	/^    volatile bool _is_key4;$/;"	m	struct:cimg_library::CImgDisplay
_is_key5	CImg.h	/^    volatile bool _is_key5;$/;"	m	struct:cimg_library::CImgDisplay
_is_key6	CImg.h	/^    volatile bool _is_key6;$/;"	m	struct:cimg_library::CImgDisplay
_is_key7	CImg.h	/^    volatile bool _is_key7;$/;"	m	struct:cimg_library::CImgDisplay
_is_key8	CImg.h	/^    volatile bool _is_key8;$/;"	m	struct:cimg_library::CImgDisplay
_is_key9	CImg.h	/^    volatile bool _is_key9;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyA	CImg.h	/^    volatile bool _is_keyA;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyALT	CImg.h	/^    volatile bool _is_keyALT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyALTGR	CImg.h	/^    volatile bool _is_keyALTGR;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyAPPLEFT	CImg.h	/^    volatile bool _is_keyAPPLEFT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyAPPRIGHT	CImg.h	/^    volatile bool _is_keyAPPRIGHT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyARROWDOWN	CImg.h	/^    volatile bool _is_keyARROWDOWN;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyARROWLEFT	CImg.h	/^    volatile bool _is_keyARROWLEFT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyARROWRIGHT	CImg.h	/^    volatile bool _is_keyARROWRIGHT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyARROWUP	CImg.h	/^    volatile bool _is_keyARROWUP;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyB	CImg.h	/^    volatile bool _is_keyB;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyBACKSPACE	CImg.h	/^    volatile bool _is_keyBACKSPACE;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyC	CImg.h	/^    volatile bool _is_keyC;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyCAPSLOCK	CImg.h	/^    volatile bool _is_keyCAPSLOCK;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyCTRLLEFT	CImg.h	/^    volatile bool _is_keyCTRLLEFT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyCTRLRIGHT	CImg.h	/^    volatile bool _is_keyCTRLRIGHT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyD	CImg.h	/^    volatile bool _is_keyD;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyDELETE	CImg.h	/^    volatile bool _is_keyDELETE;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyE	CImg.h	/^    volatile bool _is_keyE;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyEND	CImg.h	/^    volatile bool _is_keyEND;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyENTER	CImg.h	/^    volatile bool _is_keyENTER;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyESC	CImg.h	/^    volatile bool _is_keyESC;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF	CImg.h	/^    volatile bool _is_keyF;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF1	CImg.h	/^    volatile bool _is_keyF1;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF10	CImg.h	/^    volatile bool _is_keyF10;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF11	CImg.h	/^    volatile bool _is_keyF11;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF12	CImg.h	/^    volatile bool _is_keyF12;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF2	CImg.h	/^    volatile bool _is_keyF2;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF3	CImg.h	/^    volatile bool _is_keyF3;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF4	CImg.h	/^    volatile bool _is_keyF4;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF5	CImg.h	/^    volatile bool _is_keyF5;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF6	CImg.h	/^    volatile bool _is_keyF6;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF7	CImg.h	/^    volatile bool _is_keyF7;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF8	CImg.h	/^    volatile bool _is_keyF8;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyF9	CImg.h	/^    volatile bool _is_keyF9;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyG	CImg.h	/^    volatile bool _is_keyG;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyH	CImg.h	/^    volatile bool _is_keyH;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyHOME	CImg.h	/^    volatile bool _is_keyHOME;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyI	CImg.h	/^    volatile bool _is_keyI;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyINSERT	CImg.h	/^    volatile bool _is_keyINSERT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyJ	CImg.h	/^    volatile bool _is_keyJ;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyK	CImg.h	/^    volatile bool _is_keyK;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyL	CImg.h	/^    volatile bool _is_keyL;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyM	CImg.h	/^    volatile bool _is_keyM;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyMENU	CImg.h	/^    volatile bool _is_keyMENU;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyN	CImg.h	/^    volatile bool _is_keyN;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyO	CImg.h	/^    volatile bool _is_keyO;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyP	CImg.h	/^    volatile bool _is_keyP;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAD0	CImg.h	/^    volatile bool _is_keyPAD0;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAD1	CImg.h	/^    volatile bool _is_keyPAD1;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAD2	CImg.h	/^    volatile bool _is_keyPAD2;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAD3	CImg.h	/^    volatile bool _is_keyPAD3;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAD4	CImg.h	/^    volatile bool _is_keyPAD4;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAD5	CImg.h	/^    volatile bool _is_keyPAD5;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAD6	CImg.h	/^    volatile bool _is_keyPAD6;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAD7	CImg.h	/^    volatile bool _is_keyPAD7;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAD8	CImg.h	/^    volatile bool _is_keyPAD8;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAD9	CImg.h	/^    volatile bool _is_keyPAD9;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPADADD	CImg.h	/^    volatile bool _is_keyPADADD;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPADDIV	CImg.h	/^    volatile bool _is_keyPADDIV;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPADMUL	CImg.h	/^    volatile bool _is_keyPADMUL;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPADSUB	CImg.h	/^    volatile bool _is_keyPADSUB;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAGEDOWN	CImg.h	/^    volatile bool _is_keyPAGEDOWN;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAGEUP	CImg.h	/^    volatile bool _is_keyPAGEUP;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyPAUSE	CImg.h	/^    volatile bool _is_keyPAUSE;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyQ	CImg.h	/^    volatile bool _is_keyQ;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyR	CImg.h	/^    volatile bool _is_keyR;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyS	CImg.h	/^    volatile bool _is_keyS;$/;"	m	struct:cimg_library::CImgDisplay
_is_keySHIFTLEFT	CImg.h	/^    volatile bool _is_keySHIFTLEFT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keySHIFTRIGHT	CImg.h	/^    volatile bool _is_keySHIFTRIGHT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keySPACE	CImg.h	/^    volatile bool _is_keySPACE;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyT	CImg.h	/^    volatile bool _is_keyT;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyTAB	CImg.h	/^    volatile bool _is_keyTAB;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyU	CImg.h	/^    volatile bool _is_keyU;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyV	CImg.h	/^    volatile bool _is_keyV;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyW	CImg.h	/^    volatile bool _is_keyW;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyX	CImg.h	/^    volatile bool _is_keyX;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyY	CImg.h	/^    volatile bool _is_keyY;$/;"	m	struct:cimg_library::CImgDisplay
_is_keyZ	CImg.h	/^    volatile bool _is_keyZ;$/;"	m	struct:cimg_library::CImgDisplay
_is_mouse_tracked	CImg.h	/^    bool _is_mouse_tracked;$/;"	m	struct:cimg_library::CImgDisplay
_is_moved	CImg.h	/^    volatile bool _is_moved;$/;"	m	struct:cimg_library::CImgDisplay
_is_resized	CImg.h	/^    volatile bool _is_resized;$/;"	m	struct:cimg_library::CImgDisplay
_is_shared	CImg.h	/^    bool _is_shared;$/;"	m	struct:cimg_library::CImg
_isoline3d_indice	CImg.h	/^    static int _isoline3d_indice(const unsigned int edge, const CImg<t>& indices1, const CImg<t>& indices2,$/;"	f	struct:cimg_library::CImg
_isosurface3d_indice	CImg.h	/^    static int _isosurface3d_indice(const unsigned int edge, const CImg<t>& indices1, const CImg<t>& indices2,$/;"	f	struct:cimg_library::CImg
_keys	CImg.h	/^    volatile unsigned int _keys[128];$/;"	m	struct:cimg_library::CImgDisplay
_linear_atX	CImg.h	/^    Tfloat _linear_atX(const float fx, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
_linear_atXY	CImg.h	/^    Tfloat _linear_atXY(const float fx, const float fy, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
_linear_atXYZ	CImg.h	/^    Tfloat _linear_atXYZ(const float fx, const float fy=0, const float fz=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
_linear_atXYZC	CImg.h	/^    Tfloat _linear_atXYZC(const float fx, const float fy=0, const float fz=0, const float fc=0) const {$/;"	f	struct:cimg_library::CImg
_load_analyze	CImg.h	/^    CImg<T>& _load_analyze(std::FILE *const file, const char *const filename, float *const voxsize=0) {$/;"	f	struct:cimg_library::CImg
_load_ascii	CImg.h	/^    CImg<T>& _load_ascii(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library::CImg
_load_bmp	CImg.h	/^    CImg<T>& _load_bmp(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library::CImg
_load_cimg	CImg.h	/^    CImgList<T>& _load_cimg(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library::CImgList
_load_cimg	CImg.h	/^    CImgList<T>& _load_cimg(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library::CImgList
_load_dlm	CImg.h	/^    CImg<T>& _load_dlm(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library::CImg
_load_inr	CImg.h	/^    CImg<T>& _load_inr(std::FILE *const file, const char *const filename, float *const voxsize) {$/;"	f	struct:cimg_library::CImg
_load_inr_header	CImg.h	/^    static void _load_inr_header(std::FILE *file, int out[8], float *const voxsize) {$/;"	f	struct:cimg_library::CImg
_load_jpeg	CImg.h	/^    CImg<T>& _load_jpeg(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library::CImg
_load_off	CImg.h	/^    CImg<T>& _load_off(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library::CImg
_load_pandore	CImg.h	/^    CImg<T>& _load_pandore(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library::CImg
_load_pfm	CImg.h	/^    CImg<T>& _load_pfm(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library::CImg
_load_png	CImg.h	/^    CImg<T>& _load_png(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library::CImg
_load_pnm	CImg.h	/^    CImg<T>& _load_pnm(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library::CImg
_load_raw	CImg.h	/^    CImg<T>& _load_raw(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library::CImg
_load_rgb	CImg.h	/^    CImg<T>& _load_rgb(std::FILE *const file, const char *const filename, const unsigned int dimw, const unsigned int dimh) {$/;"	f	struct:cimg_library::CImg
_load_rgba	CImg.h	/^    CImg<T>& _load_rgba(std::FILE *const file, const char *const filename, const unsigned int dimw, const unsigned int dimh) {$/;"	f	struct:cimg_library::CImg
_load_tiff	CImg.h	/^    CImg<T>& _load_tiff(TIFF *const tif, const unsigned int directory) {$/;"	f	struct:cimg_library::CImg
_load_tiff_contig	CImg.h	/^    void _load_tiff_contig(TIFF *const tif, const uint16 samplesperpixel, const uint32 nx, const uint32 ny) {$/;"	f	struct:cimg_library::CImg
_load_tiff_separate	CImg.h	/^    void _load_tiff_separate(TIFF *const tif, const uint16 samplesperpixel, const uint32 nx, const uint32 ny) {$/;"	f	struct:cimg_library::CImg
_load_tiff_tiled_contig	CImg.h	/^    void _load_tiff_tiled_contig(TIFF *const tif, const uint16 samplesperpixel, const uint32 nx, const uint32 ny, const uint32 tw, const uint32 th) {$/;"	f	struct:cimg_library::CImg
_load_tiff_tiled_separate	CImg.h	/^    void _load_tiff_tiled_separate(TIFF *const tif, const uint16 samplesperpixel, const uint32 nx, const uint32 ny, const uint32 tw, const uint32 th) {$/;"	f	struct:cimg_library::CImg
_load_yuv	CImg.h	/^    CImgList<T>& _load_yuv(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library::CImgList
_map_window	CImg.h	/^    void _map_window() {$/;"	f	struct:cimg_library::CImgDisplay
_max	CImg.h	/^    float _fps_fps, _min, _max;$/;"	m	struct:cimg_library::CImgDisplay
_message	CImg.h	/^    char _message[16384];$/;"	m	struct:cimg_library::CImgException
_min	CImg.h	/^    float _fps_fps, _min, _max;$/;"	m	struct:cimg_library::CImgDisplay
_mouse_x	CImg.h	/^    volatile int _mouse_x;$/;"	m	struct:cimg_library::CImgDisplay
_mouse_y	CImg.h	/^    volatile int _mouse_y;$/;"	m	struct:cimg_library::CImgDisplay
_mutex	CImg.h	/^    HANDLE _mutex;$/;"	m	struct:cimg_library::CImgDisplay
_no_display_exception	CImg.h	/^    static void _no_display_exception() {$/;"	f	struct:cimg_library::CImgDisplay
_normalization	CImg.h	/^    unsigned int _normalization;$/;"	m	struct:cimg_library::CImgDisplay
_object3dtoCImg3d	CImg.h	/^    float* _object3dtoCImg3d(const CImg<to>& opacities, float *ptrd) const {$/;"	f	struct:cimg_library::CImg
_object3dtoCImg3d	CImg.h	/^    float* _object3dtoCImg3d(const CImgList<to>& opacities, float *ptrd) const {$/;"	f	struct:cimg_library::CImg
_paint	CImg.h	/^    void _paint(const bool wait_expose=true) {$/;"	f	struct:cimg_library::CImgDisplay
_pythagore	CImg.h	/^    inline double _pythagore(double a, double b) {$/;"	f	namespace:cimg_library::cimg
_quicksort	CImg.h	/^    CImg<T>& _quicksort(const int indm, const int indM, CImg<t>& permutations, const bool increasing, const bool is_permutations) {$/;"	f	struct:cimg_library::CImg
_released_keys	CImg.h	/^    volatile unsigned int _released_keys[128];$/;"	m	struct:cimg_library::CImgDisplay
_render_resize	CImg.h	/^    static void _render_resize(const T *ptrs, const unsigned int ws, const unsigned int hs,$/;"	f	struct:cimg_library::CImgDisplay
_resize	CImg.h	/^    void _resize(T pixel_type, const unsigned int ndimx, const unsigned int ndimy, const bool force_redraw) {$/;"	f	struct:cimg_library::CImgDisplay
_save_ascii	CImg.h	/^    const CImg<T>& _save_ascii(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library::CImg
_save_bmp	CImg.h	/^    const CImg<T>& _save_bmp(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library::CImg
_save_cimg	CImg.h	/^    const CImgList<T>& _save_cimg(std::FILE *const file, const char *const filename, const bool compression) const {$/;"	f	struct:cimg_library::CImgList
_save_cimg	CImg.h	/^    const CImgList<T>& _save_cimg(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library::CImgList
_save_cpp	CImg.h	/^    const CImg<T>& _save_cpp(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library::CImg
_save_dlm	CImg.h	/^    const CImg<T>& _save_dlm(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library::CImg
_save_empty_cimg	CImg.h	/^    static void _save_empty_cimg(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library::CImgList
_save_inr	CImg.h	/^    const CImg<T>& _save_inr(std::FILE *const file, const char *const filename, const float *const voxsize) const {$/;"	f	struct:cimg_library::CImg
_save_jpeg	CImg.h	/^    const CImg<T>& _save_jpeg(std::FILE *const file, const char *const filename, const unsigned int quality) const {$/;"	f	struct:cimg_library::CImg
_save_off	CImg.h	/^    const CImg<T>& _save_off(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library::CImg
_save_pandore	CImg.h	/^    const CImg<T>& _save_pandore(std::FILE *const file, const char *const filename, const unsigned int colorspace) const {$/;"	f	struct:cimg_library::CImg
_save_pandore_header_length	CImg.h	/^    unsigned int _save_pandore_header_length(unsigned int id, unsigned int *dims, const unsigned int colorspace) const {$/;"	f	struct:cimg_library::CImg
_save_pfm	CImg.h	/^    const CImg<T>& _save_pfm(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library::CImg
_save_png	CImg.h	/^    const CImg<T>& _save_png(std::FILE *const file, const char *const filename, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library::CImg
_save_pnk	CImg.h	/^    const CImg<T>& _save_pnk(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library::CImg
_save_pnm	CImg.h	/^    const CImg<T>& _save_pnm(std::FILE *const file, const char *const filename, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library::CImg
_save_raw	CImg.h	/^    const CImg<T>& _save_raw(std::FILE *const file, const char *const filename, const bool multiplexed) const {$/;"	f	struct:cimg_library::CImg
_save_rgb	CImg.h	/^    const CImg<T>& _save_rgb(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library::CImg
_save_rgba	CImg.h	/^    const CImg<T>& _save_rgba(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library::CImg
_save_tiff	CImg.h	/^    const CImg<T>& _save_tiff(TIFF *tif, const unsigned int directory, const t& pixel_t, const unsigned int compression) const {$/;"	f	struct:cimg_library::CImg
_save_tiff	CImg.h	/^    const CImg<T>& _save_tiff(TIFF *tif, const unsigned int directory, const unsigned int compression) const {$/;"	f	struct:cimg_library::CImg
_save_yuv	CImg.h	/^    const CImgList<T>& _save_yuv(std::FILE *const file, const char *const filename, const bool rgb2yuv) const {$/;"	f	struct:cimg_library::CImgList
_set_colormap	CImg.h	/^    void _set_colormap(Colormap& colormap, const unsigned int dim) {$/;"	f	struct:cimg_library::CImgDisplay
_shminfo	CImg.h	/^    XShmSegmentInfo *_shminfo;$/;"	m	struct:cimg_library::CImgDisplay
_size_object3dtoCImg3d	CImg.h	/^    unsigned int _size_object3dtoCImg3d(const CImgList<tp>& primitives,$/;"	f	struct:cimg_library::CImg
_sleep	CImg.h	/^    inline unsigned int _sleep(const unsigned int milliseconds, unsigned long& timer) {$/;"	f	namespace:cimg_library::cimg
_solve	CImg.h	/^    CImg<T>& _solve(const CImg<t>& A, const CImg<ti>& indx) {$/;"	f	struct:cimg_library::CImg
_spectrum	CImg.h	/^    unsigned int _spectrum;$/;"	m	struct:cimg_library::CImg
_thread	CImg.h	/^    HANDLE _thread;$/;"	m	struct:cimg_library::CImgDisplay
_timer	CImg.h	/^    unsigned long _timer, _fps_frames, _fps_timer;$/;"	m	struct:cimg_library::CImgDisplay
_title	CImg.h	/^    char *_title;$/;"	m	struct:cimg_library::CImgDisplay
_update_window_pos	CImg.h	/^    CImgDisplay& _update_window_pos() {$/;"	f	struct:cimg_library::CImgDisplay
_watershed_insert	CImg.h	/^    CImg<T>& _watershed_insert(CImg<boolT>& in_queue, unsigned int& siz, const t value, const unsigned int x, const unsigned int y, const unsigned int z) {$/;"	f	struct:cimg_library::CImg
_watershed_remove	CImg.h	/^    CImg<T>& _watershed_remove(unsigned int& siz) {$/;"	f	struct:cimg_library::CImg
_wheel	CImg.h	/^    volatile int _wheel;$/;"	m	struct:cimg_library::CImgDisplay
_width	CImg.h	/^    unsigned int _width;$/;"	m	struct:cimg_library::CImg
_width	CImg.h	/^    unsigned int _width;$/;"	m	struct:cimg_library::CImgDisplay
_width	CImg.h	/^    unsigned int _width;$/;"	m	struct:cimg_library::CImgList
_window	CImg.h	/^    HWND _window;$/;"	m	struct:cimg_library::CImgDisplay
_window	CImg.h	/^    Window _window, _background_window;$/;"	m	struct:cimg_library::CImgDisplay
_window_height	CImg.h	/^    volatile unsigned int _window_height;$/;"	m	struct:cimg_library::CImgDisplay
_window_width	CImg.h	/^    volatile unsigned int _window_width;$/;"	m	struct:cimg_library::CImgDisplay
_window_x	CImg.h	/^    volatile int _window_x;$/;"	m	struct:cimg_library::CImgDisplay
_window_y	CImg.h	/^    volatile int _window_y;$/;"	m	struct:cimg_library::CImgDisplay
_wm_protocol_atom	CImg.h	/^    Atom _wm_window_atom, _wm_protocol_atom;$/;"	m	struct:cimg_library::CImgDisplay
_wm_window_atom	CImg.h	/^    Atom _wm_window_atom, _wm_protocol_atom;$/;"	m	struct:cimg_library::CImgDisplay
abs	CImg.h	/^    CImg<T>& abs() {$/;"	f	struct:cimg_library::CImg
abs	CImg.h	/^    inline T abs(const T a) {$/;"	f	namespace:cimg_library::cimg
abs	CImg.h	/^    inline bool abs(const bool a) {$/;"	f	namespace:cimg_library::cimg
abs	CImg.h	/^    inline double abs(const double a) {$/;"	f	namespace:cimg_library::cimg
abs	CImg.h	/^    inline float abs(const float a) {$/;"	f	namespace:cimg_library::cimg
abs	CImg.h	/^    inline int abs(const int a) {$/;"	f	namespace:cimg_library::cimg
abs	CImg.h	/^    inline unsigned char abs(const unsigned char a) {$/;"	f	namespace:cimg_library::cimg
abs	CImg.h	/^    inline unsigned int abs(const unsigned int a) {$/;"	f	namespace:cimg_library::cimg
abs	CImg.h	/^    inline unsigned long abs(const unsigned long a) {$/;"	f	namespace:cimg_library::cimg
abs	CImg.h	/^    inline unsigned short abs(const unsigned short a) {$/;"	f	namespace:cimg_library::cimg
abs	CImg.h	/^  inline CImg<_cimg_Tfloat> abs(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
acos	CImg.h	/^    CImg<T>& acos() {$/;"	f	struct:cimg_library::CImg
acos	CImg.h	/^  inline CImg<_cimg_Tfloat> acos(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
add	bsp_tree.cpp	/^void bsp_tree_node::add(shared_ptr<const object> obj, bool leaf, int depth)$/;"	f	class:bsp_tree_node
ambient	material.h	/^        vector3 ambient;$/;"	m	class:material
append	CImg.h	/^    CImg<T>& append(const CImg<T>& img, const char axis='x', const float align=0) {$/;"	f	struct:cimg_library::CImg
append	CImg.h	/^    CImg<T>& append(const CImg<t>& img, const char axis='x', const float align=0) {$/;"	f	struct:cimg_library::CImg
append_object3d	CImg.h	/^    CImg<T>& append_object3d(CImgList<tf>& primitives, const CImg<tp>& obj_vertices, const CImgList<tff>& obj_primitives) {$/;"	f	struct:cimg_library::CImg
area	triangle.h	/^        float area() const$/;"	f	class:triangle
argument	CImg.h	/^    inline const char* argument(const unsigned int nb, const int argc, const char *const *const argv, const unsigned int nb_singles=0, ...) {$/;"	f	namespace:cimg_library::cimg
asin	CImg.h	/^    CImg<T>& asin() {$/;"	f	struct:cimg_library::CImg
asin	CImg.h	/^  inline CImg<_cimg_Tfloat> asin(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
assign	CImg.h	/^    CImg<T>& assign() {$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const CImg<t>& img, const bool shared) {$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const CImg<t>& img, const char *const dimensions) {$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const CImg<t>& img, const char *const dimensions, const T val) {$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const CImg<t>& img, const char *const dimensions, const char *const values, const bool repeat_values) {$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const CImgDisplay &disp) {$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const T *const data_buffer, const unsigned int dx, const unsigned int dy,$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const T *const data_buffer, const unsigned int dx, const unsigned int dy=1,$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const char *const filename) {$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const t *const data_buffer, const unsigned int dx, const unsigned int dy,$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const t *const data_buffer, const unsigned int dx, const unsigned int dy=1,$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const unsigned int dx, const unsigned int dy, const unsigned int dz, const unsigned int dc, const T val) {$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const unsigned int dx, const unsigned int dy, const unsigned int dz, const unsigned int dc,$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImg<T>& assign(const unsigned int dx, const unsigned int dy=1, const unsigned int dz=1, const unsigned int dc=1) {$/;"	f	struct:cimg_library::CImg
assign	CImg.h	/^    CImgDisplay& assign() {$/;"	f	struct:cimg_library::CImgDisplay
assign	CImg.h	/^    CImgDisplay& assign(const CImg<T>& img, const char *const title=0,$/;"	f	struct:cimg_library::CImgDisplay
assign	CImg.h	/^    CImgDisplay& assign(const CImg<T>& img,$/;"	f	struct:cimg_library::CImgDisplay
assign	CImg.h	/^    CImgDisplay& assign(const CImgDisplay &disp) {$/;"	f	struct:cimg_library::CImgDisplay
assign	CImg.h	/^    CImgDisplay& assign(const CImgDisplay& disp) {$/;"	f	struct:cimg_library::CImgDisplay
assign	CImg.h	/^    CImgDisplay& assign(const CImgList<T>& list, const char *const title=0,$/;"	f	struct:cimg_library::CImgDisplay
assign	CImg.h	/^    CImgDisplay& assign(const CImgList<T>& list,$/;"	f	struct:cimg_library::CImgDisplay
assign	CImg.h	/^    CImgDisplay& assign(const unsigned int dimw, const unsigned int dimh, const char *const title=0,$/;"	f	struct:cimg_library::CImgDisplay
assign	CImg.h	/^    CImgDisplay& assign(const unsigned int width, const unsigned int height,$/;"	f	struct:cimg_library::CImgDisplay
assign	CImg.h	/^    CImgList<T>& assign() {$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const CImg<t>& img, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const CImgDisplay &disp) {$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const CImgList<T>& list, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const CImgList<t>& list, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const unsigned int n) {$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const unsigned int n, const CImg<t>& img, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const unsigned int n, const unsigned int width, const unsigned int height,$/;"	f	struct:cimg_library::CImgList
assign	CImg.h	/^    CImgList<T>& assign(const unsigned int n, const unsigned int width, const unsigned int height=1,$/;"	f	struct:cimg_library::CImgList
at	CImg.h	/^    CImg<T>& at(const int pos) {$/;"	f	struct:cimg_library::CImgList
at	CImg.h	/^    T at(const int off) const {$/;"	f	struct:cimg_library::CImg
at	CImg.h	/^    T at(const int off, const T out_val) const {$/;"	f	struct:cimg_library::CImg
at	CImg.h	/^    T& at(const int off) {$/;"	f	struct:cimg_library::CImg
at	CImg.h	/^    T& at(const int off, const T out_val) {$/;"	f	struct:cimg_library::CImg
atN	CImg.h	/^    T atN(const int pos, const int x, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImgList
atN	CImg.h	/^    T atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImgList
atN	CImg.h	/^    T& atN(const int pos, const int x, const int y, const int z, const int c, const T out_val) {$/;"	f	struct:cimg_library::CImgList
atN	CImg.h	/^    T& atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library::CImgList
atNX	CImg.h	/^    T atNX(const int pos, const int x, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImgList
atNX	CImg.h	/^    T atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImgList
atNX	CImg.h	/^    T& atNX(const int pos, const int x, const int y, const int z, const int c, const T out_val) {$/;"	f	struct:cimg_library::CImgList
atNX	CImg.h	/^    T& atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library::CImgList
atNXY	CImg.h	/^    T atNXY(const int pos, const int x, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImgList
atNXY	CImg.h	/^    T atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImgList
atNXY	CImg.h	/^    T& atNXY(const int pos, const int x, const int y, const int z, const int c, const T out_val) {$/;"	f	struct:cimg_library::CImgList
atNXY	CImg.h	/^    T& atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) {$/;"	f	struct:cimg_library::CImgList
atNXYZ	CImg.h	/^    T atNXYZ(const int pos, const int x, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImgList
atNXYZ	CImg.h	/^    T atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) const {$/;"	f	struct:cimg_library::CImgList
atNXYZ	CImg.h	/^    T& atNXYZ(const int pos, const int x, const int y, const int z, const int c, const T out_val) {$/;"	f	struct:cimg_library::CImgList
atNXYZ	CImg.h	/^    T& atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) {$/;"	f	struct:cimg_library::CImgList
atNXYZC	CImg.h	/^    T atNXYZC(const int pos, const int x, const int y, const int z, const int c) const {$/;"	f	struct:cimg_library::CImgList
atNXYZC	CImg.h	/^    T atNXYZC(const int pos, const int x, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImgList
atNXYZC	CImg.h	/^    T& atNXYZC(const int pos, const int x, const int y, const int z, const int c) {$/;"	f	struct:cimg_library::CImgList
atNXYZC	CImg.h	/^    T& atNXYZC(const int pos, const int x, const int y, const int z, const int c, const T out_val) {$/;"	f	struct:cimg_library::CImgList
atX	CImg.h	/^    T atX(const int x, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImg
atX	CImg.h	/^    T atX(const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
atX	CImg.h	/^    T& atX(const int x, const int y, const int z, const int c, const T out_val) {$/;"	f	struct:cimg_library::CImg
atX	CImg.h	/^    T& atX(const int x, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library::CImg
atXY	CImg.h	/^    T atXY(const int x, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImg
atXY	CImg.h	/^    T atXY(const int x, const int y, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
atXY	CImg.h	/^    T& atXY(const int x, const int y, const int z, const int c, const T out_val) {$/;"	f	struct:cimg_library::CImg
atXY	CImg.h	/^    T& atXY(const int x, const int y, const int z=0, const int c=0) {$/;"	f	struct:cimg_library::CImg
atXYZ	CImg.h	/^    T atXYZ(const int x, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImg
atXYZ	CImg.h	/^    T atXYZ(const int x, const int y, const int z, const int c=0) const {$/;"	f	struct:cimg_library::CImg
atXYZ	CImg.h	/^    T& atXYZ(const int x, const int y, const int z, const int c, const T out_val) {$/;"	f	struct:cimg_library::CImg
atXYZ	CImg.h	/^    T& atXYZ(const int x, const int y, const int z, const int c=0) {$/;"	f	struct:cimg_library::CImg
atXYZC	CImg.h	/^    T atXYZC(const int x, const int y, const int z, const int c) const {$/;"	f	struct:cimg_library::CImg
atXYZC	CImg.h	/^    T atXYZC(const int x, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImg
atXYZC	CImg.h	/^    T& atXYZC(const int x, const int y, const int z, const int c) {$/;"	f	struct:cimg_library::CImg
atXYZC	CImg.h	/^    T& atXYZC(const int x, const int y, const int z, const int c, const T out_val) {$/;"	f	struct:cimg_library::CImg
atan	CImg.h	/^    CImg<T>& atan() {$/;"	f	struct:cimg_library::CImg
atan	CImg.h	/^  inline CImg<_cimg_Tfloat> atan(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
atan2	CImg.h	/^    CImg<T>& atan2(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
atof	CImg.h	/^    inline double atof(const char *const str) {$/;"	f	namespace:cimg_library::cimg
autocrop	CImg.h	/^    CImg<T>& autocrop(const T *const color, const char *const axes="zyx") {$/;"	f	struct:cimg_library::CImg
autocrop	CImg.h	/^    CImg<T>& autocrop(const T value, const char *const axes="czyx") {$/;"	f	struct:cimg_library::CImg
autocrop	CImg.h	/^    template<typename t> CImg<T>& autocrop(const CImg<t>& color, const char *const axes="zyx") {$/;"	f	struct:cimg_library::CImg
back	CImg.h	/^    CImg<T>& back() {$/;"	f	struct:cimg_library::CImgList
back	CImg.h	/^    T& back() {$/;"	f	struct:cimg_library::CImg
back	CImg.h	/^    const CImg<T>& back() const {$/;"	f	struct:cimg_library::CImgList
back	CImg.h	/^    const T& back() const {$/;"	f	struct:cimg_library::CImg
back	bsp_tree.h	/^        bsp_tree_node* back;$/;"	m	class:bsp_tree_node
basename	CImg.h	/^    inline const char* basename(const char *const s)  {$/;"	f	namespace:cimg_library::cimg
begin	CImg.h	/^    const_iterator begin() const {$/;"	f	struct:cimg_library::CImg
begin	CImg.h	/^    const_iterator begin() const {$/;"	f	struct:cimg_library::CImgList
begin	CImg.h	/^    iterator begin() {$/;"	f	struct:cimg_library::CImg
begin	CImg.h	/^    iterator begin() {$/;"	f	struct:cimg_library::CImgList
blur	CImg.h	/^    CImg<T>& blur(const float sigma, const bool cond=true) {$/;"	f	struct:cimg_library::CImg
blur	CImg.h	/^    CImg<T>& blur(const float sigmax, const float sigmay, const float sigmaz, const bool cond=true) {$/;"	f	struct:cimg_library::CImg
blur_anisotropic	CImg.h	/^    CImg<T>& blur_anisotropic(const CImg<t>& G,$/;"	f	struct:cimg_library::CImg
blur_anisotropic	CImg.h	/^    CImg<T>& blur_anisotropic(const float amplitude, const float sharpness=0.7f, const float anisotropy=0.6f,$/;"	f	struct:cimg_library::CImg
blur_bilateral	CImg.h	/^    CImg<T>& blur_bilateral(const float sigma_s, const float sigma_r, const int bgrid_s=-33, const int bgrid_r=32,$/;"	f	struct:cimg_library::CImg
blur_bilateral	CImg.h	/^    CImg<T>& blur_bilateral(const float sigma_x, const float sigma_y, const float sigma_z, const float sigma_r,$/;"	f	struct:cimg_library::CImg
blur_median	CImg.h	/^    CImg<T>& blur_median(const unsigned int n) {$/;"	f	struct:cimg_library::CImg
blur_patch	CImg.h	/^    CImg<T>& blur_patch(const float sigma_s, const float sigma_p, const unsigned int patch_size=3,$/;"	f	struct:cimg_library::CImg
boolT	CImg.h	/^    typedef typename cimg::last<T,bool>::type boolT;$/;"	t	struct:cimg_library::CImg
boolT	CImg.h	/^    typedef typename cimg::last<T,bool>::type boolT;$/;"	t	struct:cimg_library::CImgList
box3d	CImg.h	/^    static CImg<floatT> box3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library::CImg
bsp_tree	bsp_tree.h	/^class bsp_tree$/;"	c
bsp_tree_node	bsp_tree.cpp	/^bsp_tree_node::bsp_tree_node(const plane_t& p)$/;"	f	class:bsp_tree_node
bsp_tree_node	bsp_tree.h	/^class bsp_tree_node$/;"	c
build	bsp_tree.cpp	/^void bsp_tree::build(scene& s)$/;"	f	class:bsp_tree
bump_map	material.h	/^        std::shared_ptr<CImg<float>> bump_map;$/;"	m	class:material
bump_map	object.h	/^        std::shared_ptr<CImg<float>> bump_map;$/;"	m	class:object
button	CImg.h	/^    unsigned int button() const {$/;"	f	struct:cimg_library::CImgDisplay
byte_order	CImg.h	/^      bool             byte_order;$/;"	m	struct:cimg_library::cimg::X11_info
calc_local_illu	object.cpp	/^vector3 object::calc_local_illu(const point3& pt, const vector3& n__, const light& light, const vector3& u) const$/;"	f	class:object
calc_reflect_refract	object.cpp	/^std::pair<ray, ray> object::calc_reflect_refract(const intersect_info& info) const$/;"	f	class:object
calling_function	CImg.h	/^      const char *const calling_function;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
channel	CImg.h	/^    CImg<T>& channel(const unsigned int c0) {$/;"	f	struct:cimg_library::CImg
channels	CImg.h	/^    CImg<T>& channels(const unsigned int c0, const unsigned int c1) {$/;"	f	struct:cimg_library::CImg
charT	CImg.h	/^    typedef typename cimg::last<T,char>::type charT;$/;"	t	struct:cimg_library::CImg
charT	CImg.h	/^    typedef typename cimg::last<T,char>::type charT;$/;"	t	struct:cimg_library::CImgList
check	object.cpp	/^intersect_info object::check(const ray& in_ray, float time, std::pair<float, float> dist) const$/;"	f	class:object
check	object.h	/^        virtual intersect_info check(const ray& in_ray, float time) const { return check(in_ray, time, get_hit_dist(in_ray, time)); }$/;"	f	class:object
check	octree.cpp	/^intersect_info octree_node::check(const ray& eye_ray, float time) const$/;"	f	class:octree_node
check	polyhedron.h	/^        virtual intersect_info check(const ray& in_ray, float time, std::pair<float, float>) const$/;"	f	class:polyhedron
check_objs	octree.cpp	/^intersect_info octree_node::check_objs(const ray& eye_ray, float time) const$/;"	f	class:octree_node
child	octree.h	/^        octree_node* child[8];$/;"	m	class:octree_node
cimg	CImg.h	/^  namespace cimg {$/;"	n	namespace:cimg_library
cimg	CImg.h	/^namespace cimg {$/;"	n	namespace:cimg_library
cimg_OS	CImg.h	/^#define cimg_OS /;"	d
cimg_argument	CImg.h	/^#define cimg_argument(/;"	d
cimg_argument1	CImg.h	/^#define cimg_argument1(/;"	d
cimg_argument2	CImg.h	/^#define cimg_argument2(/;"	d
cimg_argument3	CImg.h	/^#define cimg_argument3(/;"	d
cimg_argument4	CImg.h	/^#define cimg_argument4(/;"	d
cimg_argument5	CImg.h	/^#define cimg_argument5(/;"	d
cimg_argument6	CImg.h	/^#define cimg_argument6(/;"	d
cimg_argument7	CImg.h	/^#define cimg_argument7(/;"	d
cimg_argument8	CImg.h	/^#define cimg_argument8(/;"	d
cimg_argument9	CImg.h	/^#define cimg_argument9(/;"	d
cimg_display	CImg.h	/^#define cimg_display /;"	d
cimg_display_classname	CImg.h	/^#define cimg_display_classname /;"	d
cimg_file_separator	CImg.h	/^#define cimg_file_separator /;"	d
cimg_fitscreen	CImg.h	/^#define cimg_fitscreen(/;"	d
cimg_for	CImg.h	/^#define cimg_for(/;"	d
cimg_for1	CImg.h	/^#define cimg_for1(/;"	d
cimg_for2	CImg.h	/^#define cimg_for2(/;"	d
cimg_for2C	CImg.h	/^#define cimg_for2C(/;"	d
cimg_for2X	CImg.h	/^#define cimg_for2X(/;"	d
cimg_for2XC	CImg.h	/^#define cimg_for2XC(/;"	d
cimg_for2XY	CImg.h	/^#define cimg_for2XY(/;"	d
cimg_for2XYZ	CImg.h	/^#define cimg_for2XYZ(/;"	d
cimg_for2XYZC	CImg.h	/^#define cimg_for2XYZC(/;"	d
cimg_for2XZ	CImg.h	/^#define cimg_for2XZ(/;"	d
cimg_for2XZC	CImg.h	/^#define cimg_for2XZC(/;"	d
cimg_for2Y	CImg.h	/^#define cimg_for2Y(/;"	d
cimg_for2YC	CImg.h	/^#define cimg_for2YC(/;"	d
cimg_for2YZ	CImg.h	/^#define cimg_for2YZ(/;"	d
cimg_for2YZC	CImg.h	/^#define cimg_for2YZC(/;"	d
cimg_for2Z	CImg.h	/^#define cimg_for2Z(/;"	d
cimg_for2ZC	CImg.h	/^#define cimg_for2ZC(/;"	d
cimg_for2x2	CImg.h	/^#define cimg_for2x2(/;"	d
cimg_for2x2x2	CImg.h	/^#define cimg_for2x2x2(/;"	d
cimg_for3	CImg.h	/^#define cimg_for3(/;"	d
cimg_for3C	CImg.h	/^#define cimg_for3C(/;"	d
cimg_for3X	CImg.h	/^#define cimg_for3X(/;"	d
cimg_for3XC	CImg.h	/^#define cimg_for3XC(/;"	d
cimg_for3XY	CImg.h	/^#define cimg_for3XY(/;"	d
cimg_for3XYZ	CImg.h	/^#define cimg_for3XYZ(/;"	d
cimg_for3XYZC	CImg.h	/^#define cimg_for3XYZC(/;"	d
cimg_for3XZ	CImg.h	/^#define cimg_for3XZ(/;"	d
cimg_for3XZC	CImg.h	/^#define cimg_for3XZC(/;"	d
cimg_for3Y	CImg.h	/^#define cimg_for3Y(/;"	d
cimg_for3YC	CImg.h	/^#define cimg_for3YC(/;"	d
cimg_for3YZ	CImg.h	/^#define cimg_for3YZ(/;"	d
cimg_for3YZC	CImg.h	/^#define cimg_for3YZC(/;"	d
cimg_for3Z	CImg.h	/^#define cimg_for3Z(/;"	d
cimg_for3ZC	CImg.h	/^#define cimg_for3ZC(/;"	d
cimg_for3x3	CImg.h	/^#define cimg_for3x3(/;"	d
cimg_for3x3x3	CImg.h	/^#define cimg_for3x3x3(/;"	d
cimg_for4	CImg.h	/^#define cimg_for4(/;"	d
cimg_for4C	CImg.h	/^#define cimg_for4C(/;"	d
cimg_for4X	CImg.h	/^#define cimg_for4X(/;"	d
cimg_for4XC	CImg.h	/^#define cimg_for4XC(/;"	d
cimg_for4XY	CImg.h	/^#define cimg_for4XY(/;"	d
cimg_for4XYZ	CImg.h	/^#define cimg_for4XYZ(/;"	d
cimg_for4XYZC	CImg.h	/^#define cimg_for4XYZC(/;"	d
cimg_for4XZ	CImg.h	/^#define cimg_for4XZ(/;"	d
cimg_for4XZC	CImg.h	/^#define cimg_for4XZC(/;"	d
cimg_for4Y	CImg.h	/^#define cimg_for4Y(/;"	d
cimg_for4YC	CImg.h	/^#define cimg_for4YC(/;"	d
cimg_for4YZ	CImg.h	/^#define cimg_for4YZ(/;"	d
cimg_for4YZC	CImg.h	/^#define cimg_for4YZC(/;"	d
cimg_for4Z	CImg.h	/^#define cimg_for4Z(/;"	d
cimg_for4ZC	CImg.h	/^#define cimg_for4ZC(/;"	d
cimg_for4x4	CImg.h	/^#define cimg_for4x4(/;"	d
cimg_for5	CImg.h	/^#define cimg_for5(/;"	d
cimg_for5C	CImg.h	/^#define cimg_for5C(/;"	d
cimg_for5X	CImg.h	/^#define cimg_for5X(/;"	d
cimg_for5XC	CImg.h	/^#define cimg_for5XC(/;"	d
cimg_for5XY	CImg.h	/^#define cimg_for5XY(/;"	d
cimg_for5XYZ	CImg.h	/^#define cimg_for5XYZ(/;"	d
cimg_for5XYZC	CImg.h	/^#define cimg_for5XYZC(/;"	d
cimg_for5XZ	CImg.h	/^#define cimg_for5XZ(/;"	d
cimg_for5XZC	CImg.h	/^#define cimg_for5XZC(/;"	d
cimg_for5Y	CImg.h	/^#define cimg_for5Y(/;"	d
cimg_for5YC	CImg.h	/^#define cimg_for5YC(/;"	d
cimg_for5YZ	CImg.h	/^#define cimg_for5YZ(/;"	d
cimg_for5YZC	CImg.h	/^#define cimg_for5YZC(/;"	d
cimg_for5Z	CImg.h	/^#define cimg_for5Z(/;"	d
cimg_for5ZC	CImg.h	/^#define cimg_for5ZC(/;"	d
cimg_for5x5	CImg.h	/^#define cimg_for5x5(/;"	d
cimg_for6	CImg.h	/^#define cimg_for6(/;"	d
cimg_for6C	CImg.h	/^#define cimg_for6C(/;"	d
cimg_for6X	CImg.h	/^#define cimg_for6X(/;"	d
cimg_for6XC	CImg.h	/^#define cimg_for6XC(/;"	d
cimg_for6XY	CImg.h	/^#define cimg_for6XY(/;"	d
cimg_for6XYZ	CImg.h	/^#define cimg_for6XYZ(/;"	d
cimg_for6XYZC	CImg.h	/^#define cimg_for6XYZC(/;"	d
cimg_for6XZ	CImg.h	/^#define cimg_for6XZ(/;"	d
cimg_for6XZC	CImg.h	/^#define cimg_for6XZC(/;"	d
cimg_for6Y	CImg.h	/^#define cimg_for6Y(/;"	d
cimg_for6YC	CImg.h	/^#define cimg_for6YC(/;"	d
cimg_for6YZ	CImg.h	/^#define cimg_for6YZ(/;"	d
cimg_for6YZC	CImg.h	/^#define cimg_for6YZC(/;"	d
cimg_for6Z	CImg.h	/^#define cimg_for6Z(/;"	d
cimg_for6ZC	CImg.h	/^#define cimg_for6ZC(/;"	d
cimg_for6x6	CImg.h	/^#define cimg_for6x6(/;"	d
cimg_for7	CImg.h	/^#define cimg_for7(/;"	d
cimg_for7C	CImg.h	/^#define cimg_for7C(/;"	d
cimg_for7X	CImg.h	/^#define cimg_for7X(/;"	d
cimg_for7XC	CImg.h	/^#define cimg_for7XC(/;"	d
cimg_for7XY	CImg.h	/^#define cimg_for7XY(/;"	d
cimg_for7XYZ	CImg.h	/^#define cimg_for7XYZ(/;"	d
cimg_for7XYZC	CImg.h	/^#define cimg_for7XYZC(/;"	d
cimg_for7XZ	CImg.h	/^#define cimg_for7XZ(/;"	d
cimg_for7XZC	CImg.h	/^#define cimg_for7XZC(/;"	d
cimg_for7Y	CImg.h	/^#define cimg_for7Y(/;"	d
cimg_for7YC	CImg.h	/^#define cimg_for7YC(/;"	d
cimg_for7YZ	CImg.h	/^#define cimg_for7YZ(/;"	d
cimg_for7YZC	CImg.h	/^#define cimg_for7YZC(/;"	d
cimg_for7Z	CImg.h	/^#define cimg_for7Z(/;"	d
cimg_for7ZC	CImg.h	/^#define cimg_for7ZC(/;"	d
cimg_for7x7	CImg.h	/^#define cimg_for7x7(/;"	d
cimg_for8	CImg.h	/^#define cimg_for8(/;"	d
cimg_for8C	CImg.h	/^#define cimg_for8C(/;"	d
cimg_for8X	CImg.h	/^#define cimg_for8X(/;"	d
cimg_for8XC	CImg.h	/^#define cimg_for8XC(/;"	d
cimg_for8XY	CImg.h	/^#define cimg_for8XY(/;"	d
cimg_for8XYZ	CImg.h	/^#define cimg_for8XYZ(/;"	d
cimg_for8XYZC	CImg.h	/^#define cimg_for8XYZC(/;"	d
cimg_for8XZ	CImg.h	/^#define cimg_for8XZ(/;"	d
cimg_for8XZC	CImg.h	/^#define cimg_for8XZC(/;"	d
cimg_for8Y	CImg.h	/^#define cimg_for8Y(/;"	d
cimg_for8YC	CImg.h	/^#define cimg_for8YC(/;"	d
cimg_for8YZ	CImg.h	/^#define cimg_for8YZ(/;"	d
cimg_for8YZC	CImg.h	/^#define cimg_for8YZC(/;"	d
cimg_for8Z	CImg.h	/^#define cimg_for8Z(/;"	d
cimg_for8ZC	CImg.h	/^#define cimg_for8ZC(/;"	d
cimg_for8x8	CImg.h	/^#define cimg_for8x8(/;"	d
cimg_for9	CImg.h	/^#define cimg_for9(/;"	d
cimg_for9C	CImg.h	/^#define cimg_for9C(/;"	d
cimg_for9X	CImg.h	/^#define cimg_for9X(/;"	d
cimg_for9XC	CImg.h	/^#define cimg_for9XC(/;"	d
cimg_for9XY	CImg.h	/^#define cimg_for9XY(/;"	d
cimg_for9XYZ	CImg.h	/^#define cimg_for9XYZ(/;"	d
cimg_for9XYZC	CImg.h	/^#define cimg_for9XYZC(/;"	d
cimg_for9XZ	CImg.h	/^#define cimg_for9XZ(/;"	d
cimg_for9XZC	CImg.h	/^#define cimg_for9XZC(/;"	d
cimg_for9Y	CImg.h	/^#define cimg_for9Y(/;"	d
cimg_for9YC	CImg.h	/^#define cimg_for9YC(/;"	d
cimg_for9YZ	CImg.h	/^#define cimg_for9YZ(/;"	d
cimg_for9YZC	CImg.h	/^#define cimg_for9YZC(/;"	d
cimg_for9Z	CImg.h	/^#define cimg_for9Z(/;"	d
cimg_for9ZC	CImg.h	/^#define cimg_for9ZC(/;"	d
cimg_for9x9	CImg.h	/^#define cimg_for9x9(/;"	d
cimg_forC	CImg.h	/^#define cimg_forC(/;"	d
cimg_forX	CImg.h	/^#define cimg_forX(/;"	d
cimg_forXC	CImg.h	/^#define cimg_forXC(/;"	d
cimg_forXY	CImg.h	/^#define cimg_forXY(/;"	d
cimg_forXYC	CImg.h	/^#define cimg_forXYC(/;"	d
cimg_forXYZ	CImg.h	/^#define cimg_forXYZ(/;"	d
cimg_forXYZC	CImg.h	/^#define cimg_forXYZC(/;"	d
cimg_forXZ	CImg.h	/^#define cimg_forXZ(/;"	d
cimg_forXZC	CImg.h	/^#define cimg_forXZC(/;"	d
cimg_forY	CImg.h	/^#define cimg_forY(/;"	d
cimg_forYC	CImg.h	/^#define cimg_forYC(/;"	d
cimg_forYZ	CImg.h	/^#define cimg_forYZ(/;"	d
cimg_forYZC	CImg.h	/^#define cimg_forYZC(/;"	d
cimg_forZ	CImg.h	/^#define cimg_forZ(/;"	d
cimg_forZC	CImg.h	/^#define cimg_forZC(/;"	d
cimg_for_borderC	CImg.h	/^#define cimg_for_borderC(/;"	d
cimg_for_borderX	CImg.h	/^#define cimg_for_borderX(/;"	d
cimg_for_borderXY	CImg.h	/^#define cimg_for_borderXY(/;"	d
cimg_for_borderXYZ	CImg.h	/^#define cimg_for_borderXYZ(/;"	d
cimg_for_borderXYZC	CImg.h	/^#define cimg_for_borderXYZC(/;"	d
cimg_for_borderY	CImg.h	/^#define cimg_for_borderY(/;"	d
cimg_for_borderZ	CImg.h	/^#define cimg_for_borderZ(/;"	d
cimg_for_in1	CImg.h	/^#define cimg_for_in1(/;"	d
cimg_for_in2	CImg.h	/^#define cimg_for_in2(/;"	d
cimg_for_in2C	CImg.h	/^#define cimg_for_in2C(/;"	d
cimg_for_in2X	CImg.h	/^#define cimg_for_in2X(/;"	d
cimg_for_in2XC	CImg.h	/^#define cimg_for_in2XC(/;"	d
cimg_for_in2XY	CImg.h	/^#define cimg_for_in2XY(/;"	d
cimg_for_in2XYZ	CImg.h	/^#define cimg_for_in2XYZ(/;"	d
cimg_for_in2XYZC	CImg.h	/^#define cimg_for_in2XYZC(/;"	d
cimg_for_in2XZ	CImg.h	/^#define cimg_for_in2XZ(/;"	d
cimg_for_in2XZC	CImg.h	/^#define cimg_for_in2XZC(/;"	d
cimg_for_in2Y	CImg.h	/^#define cimg_for_in2Y(/;"	d
cimg_for_in2YC	CImg.h	/^#define cimg_for_in2YC(/;"	d
cimg_for_in2YZ	CImg.h	/^#define cimg_for_in2YZ(/;"	d
cimg_for_in2YZC	CImg.h	/^#define cimg_for_in2YZC(/;"	d
cimg_for_in2Z	CImg.h	/^#define cimg_for_in2Z(/;"	d
cimg_for_in2ZC	CImg.h	/^#define cimg_for_in2ZC(/;"	d
cimg_for_in2x2	CImg.h	/^#define cimg_for_in2x2(/;"	d
cimg_for_in2x2x2	CImg.h	/^#define cimg_for_in2x2x2(/;"	d
cimg_for_in3	CImg.h	/^#define cimg_for_in3(/;"	d
cimg_for_in3C	CImg.h	/^#define cimg_for_in3C(/;"	d
cimg_for_in3X	CImg.h	/^#define cimg_for_in3X(/;"	d
cimg_for_in3XC	CImg.h	/^#define cimg_for_in3XC(/;"	d
cimg_for_in3XY	CImg.h	/^#define cimg_for_in3XY(/;"	d
cimg_for_in3XYZ	CImg.h	/^#define cimg_for_in3XYZ(/;"	d
cimg_for_in3XYZC	CImg.h	/^#define cimg_for_in3XYZC(/;"	d
cimg_for_in3XZ	CImg.h	/^#define cimg_for_in3XZ(/;"	d
cimg_for_in3XZC	CImg.h	/^#define cimg_for_in3XZC(/;"	d
cimg_for_in3Y	CImg.h	/^#define cimg_for_in3Y(/;"	d
cimg_for_in3YC	CImg.h	/^#define cimg_for_in3YC(/;"	d
cimg_for_in3YZ	CImg.h	/^#define cimg_for_in3YZ(/;"	d
cimg_for_in3YZC	CImg.h	/^#define cimg_for_in3YZC(/;"	d
cimg_for_in3Z	CImg.h	/^#define cimg_for_in3Z(/;"	d
cimg_for_in3ZC	CImg.h	/^#define cimg_for_in3ZC(/;"	d
cimg_for_in3x3	CImg.h	/^#define cimg_for_in3x3(/;"	d
cimg_for_in3x3x3	CImg.h	/^#define cimg_for_in3x3x3(/;"	d
cimg_for_in4	CImg.h	/^#define cimg_for_in4(/;"	d
cimg_for_in4C	CImg.h	/^#define cimg_for_in4C(/;"	d
cimg_for_in4X	CImg.h	/^#define cimg_for_in4X(/;"	d
cimg_for_in4XC	CImg.h	/^#define cimg_for_in4XC(/;"	d
cimg_for_in4XY	CImg.h	/^#define cimg_for_in4XY(/;"	d
cimg_for_in4XYZ	CImg.h	/^#define cimg_for_in4XYZ(/;"	d
cimg_for_in4XYZC	CImg.h	/^#define cimg_for_in4XYZC(/;"	d
cimg_for_in4XZ	CImg.h	/^#define cimg_for_in4XZ(/;"	d
cimg_for_in4XZC	CImg.h	/^#define cimg_for_in4XZC(/;"	d
cimg_for_in4Y	CImg.h	/^#define cimg_for_in4Y(/;"	d
cimg_for_in4YC	CImg.h	/^#define cimg_for_in4YC(/;"	d
cimg_for_in4YZ	CImg.h	/^#define cimg_for_in4YZ(/;"	d
cimg_for_in4YZC	CImg.h	/^#define cimg_for_in4YZC(/;"	d
cimg_for_in4Z	CImg.h	/^#define cimg_for_in4Z(/;"	d
cimg_for_in4ZC	CImg.h	/^#define cimg_for_in4ZC(/;"	d
cimg_for_in4x4	CImg.h	/^#define cimg_for_in4x4(/;"	d
cimg_for_in5	CImg.h	/^#define cimg_for_in5(/;"	d
cimg_for_in5C	CImg.h	/^#define cimg_for_in5C(/;"	d
cimg_for_in5X	CImg.h	/^#define cimg_for_in5X(/;"	d
cimg_for_in5XC	CImg.h	/^#define cimg_for_in5XC(/;"	d
cimg_for_in5XY	CImg.h	/^#define cimg_for_in5XY(/;"	d
cimg_for_in5XYZ	CImg.h	/^#define cimg_for_in5XYZ(/;"	d
cimg_for_in5XYZC	CImg.h	/^#define cimg_for_in5XYZC(/;"	d
cimg_for_in5XZ	CImg.h	/^#define cimg_for_in5XZ(/;"	d
cimg_for_in5XZC	CImg.h	/^#define cimg_for_in5XZC(/;"	d
cimg_for_in5Y	CImg.h	/^#define cimg_for_in5Y(/;"	d
cimg_for_in5YC	CImg.h	/^#define cimg_for_in5YC(/;"	d
cimg_for_in5YZ	CImg.h	/^#define cimg_for_in5YZ(/;"	d
cimg_for_in5YZC	CImg.h	/^#define cimg_for_in5YZC(/;"	d
cimg_for_in5Z	CImg.h	/^#define cimg_for_in5Z(/;"	d
cimg_for_in5ZC	CImg.h	/^#define cimg_for_in5ZC(/;"	d
cimg_for_in5x5	CImg.h	/^#define cimg_for_in5x5(/;"	d
cimg_for_in6	CImg.h	/^#define cimg_for_in6(/;"	d
cimg_for_in6C	CImg.h	/^#define cimg_for_in6C(/;"	d
cimg_for_in6X	CImg.h	/^#define cimg_for_in6X(/;"	d
cimg_for_in6XC	CImg.h	/^#define cimg_for_in6XC(/;"	d
cimg_for_in6XY	CImg.h	/^#define cimg_for_in6XY(/;"	d
cimg_for_in6XYZ	CImg.h	/^#define cimg_for_in6XYZ(/;"	d
cimg_for_in6XYZC	CImg.h	/^#define cimg_for_in6XYZC(/;"	d
cimg_for_in6XZ	CImg.h	/^#define cimg_for_in6XZ(/;"	d
cimg_for_in6XZC	CImg.h	/^#define cimg_for_in6XZC(/;"	d
cimg_for_in6Y	CImg.h	/^#define cimg_for_in6Y(/;"	d
cimg_for_in6YC	CImg.h	/^#define cimg_for_in6YC(/;"	d
cimg_for_in6YZ	CImg.h	/^#define cimg_for_in6YZ(/;"	d
cimg_for_in6YZC	CImg.h	/^#define cimg_for_in6YZC(/;"	d
cimg_for_in6Z	CImg.h	/^#define cimg_for_in6Z(/;"	d
cimg_for_in6ZC	CImg.h	/^#define cimg_for_in6ZC(/;"	d
cimg_for_in6x6	CImg.h	/^#define cimg_for_in6x6(/;"	d
cimg_for_in7	CImg.h	/^#define cimg_for_in7(/;"	d
cimg_for_in7C	CImg.h	/^#define cimg_for_in7C(/;"	d
cimg_for_in7X	CImg.h	/^#define cimg_for_in7X(/;"	d
cimg_for_in7XC	CImg.h	/^#define cimg_for_in7XC(/;"	d
cimg_for_in7XY	CImg.h	/^#define cimg_for_in7XY(/;"	d
cimg_for_in7XYZ	CImg.h	/^#define cimg_for_in7XYZ(/;"	d
cimg_for_in7XYZC	CImg.h	/^#define cimg_for_in7XYZC(/;"	d
cimg_for_in7XZ	CImg.h	/^#define cimg_for_in7XZ(/;"	d
cimg_for_in7XZC	CImg.h	/^#define cimg_for_in7XZC(/;"	d
cimg_for_in7Y	CImg.h	/^#define cimg_for_in7Y(/;"	d
cimg_for_in7YC	CImg.h	/^#define cimg_for_in7YC(/;"	d
cimg_for_in7YZ	CImg.h	/^#define cimg_for_in7YZ(/;"	d
cimg_for_in7YZC	CImg.h	/^#define cimg_for_in7YZC(/;"	d
cimg_for_in7Z	CImg.h	/^#define cimg_for_in7Z(/;"	d
cimg_for_in7ZC	CImg.h	/^#define cimg_for_in7ZC(/;"	d
cimg_for_in7x7	CImg.h	/^#define cimg_for_in7x7(/;"	d
cimg_for_in8	CImg.h	/^#define cimg_for_in8(/;"	d
cimg_for_in8C	CImg.h	/^#define cimg_for_in8C(/;"	d
cimg_for_in8X	CImg.h	/^#define cimg_for_in8X(/;"	d
cimg_for_in8XC	CImg.h	/^#define cimg_for_in8XC(/;"	d
cimg_for_in8XY	CImg.h	/^#define cimg_for_in8XY(/;"	d
cimg_for_in8XYZ	CImg.h	/^#define cimg_for_in8XYZ(/;"	d
cimg_for_in8XYZC	CImg.h	/^#define cimg_for_in8XYZC(/;"	d
cimg_for_in8XZ	CImg.h	/^#define cimg_for_in8XZ(/;"	d
cimg_for_in8XZC	CImg.h	/^#define cimg_for_in8XZC(/;"	d
cimg_for_in8Y	CImg.h	/^#define cimg_for_in8Y(/;"	d
cimg_for_in8YC	CImg.h	/^#define cimg_for_in8YC(/;"	d
cimg_for_in8YZ	CImg.h	/^#define cimg_for_in8YZ(/;"	d
cimg_for_in8YZC	CImg.h	/^#define cimg_for_in8YZC(/;"	d
cimg_for_in8Z	CImg.h	/^#define cimg_for_in8Z(/;"	d
cimg_for_in8ZC	CImg.h	/^#define cimg_for_in8ZC(/;"	d
cimg_for_in8x8	CImg.h	/^#define cimg_for_in8x8(/;"	d
cimg_for_in9	CImg.h	/^#define cimg_for_in9(/;"	d
cimg_for_in9C	CImg.h	/^#define cimg_for_in9C(/;"	d
cimg_for_in9X	CImg.h	/^#define cimg_for_in9X(/;"	d
cimg_for_in9XC	CImg.h	/^#define cimg_for_in9XC(/;"	d
cimg_for_in9XY	CImg.h	/^#define cimg_for_in9XY(/;"	d
cimg_for_in9XYZ	CImg.h	/^#define cimg_for_in9XYZ(/;"	d
cimg_for_in9XYZC	CImg.h	/^#define cimg_for_in9XYZC(/;"	d
cimg_for_in9XZ	CImg.h	/^#define cimg_for_in9XZ(/;"	d
cimg_for_in9XZC	CImg.h	/^#define cimg_for_in9XZC(/;"	d
cimg_for_in9Y	CImg.h	/^#define cimg_for_in9Y(/;"	d
cimg_for_in9YC	CImg.h	/^#define cimg_for_in9YC(/;"	d
cimg_for_in9YZ	CImg.h	/^#define cimg_for_in9YZ(/;"	d
cimg_for_in9YZC	CImg.h	/^#define cimg_for_in9YZC(/;"	d
cimg_for_in9Z	CImg.h	/^#define cimg_for_in9Z(/;"	d
cimg_for_in9ZC	CImg.h	/^#define cimg_for_in9ZC(/;"	d
cimg_for_in9x9	CImg.h	/^#define cimg_for_in9x9(/;"	d
cimg_for_inC	CImg.h	/^#define cimg_for_inC(/;"	d
cimg_for_inX	CImg.h	/^#define cimg_for_inX(/;"	d
cimg_for_inXC	CImg.h	/^#define cimg_for_inXC(/;"	d
cimg_for_inXY	CImg.h	/^#define cimg_for_inXY(/;"	d
cimg_for_inXYC	CImg.h	/^#define cimg_for_inXYC(/;"	d
cimg_for_inXYZ	CImg.h	/^#define cimg_for_inXYZ(/;"	d
cimg_for_inXYZC	CImg.h	/^#define cimg_for_inXYZC(/;"	d
cimg_for_inXZ	CImg.h	/^#define cimg_for_inXZ(/;"	d
cimg_for_inXZC	CImg.h	/^#define cimg_for_inXZC(/;"	d
cimg_for_inY	CImg.h	/^#define cimg_for_inY(/;"	d
cimg_for_inYC	CImg.h	/^#define cimg_for_inYC(/;"	d
cimg_for_inYZ	CImg.h	/^#define cimg_for_inYZ(/;"	d
cimg_for_inYZC	CImg.h	/^#define cimg_for_inYZC(/;"	d
cimg_for_inZ	CImg.h	/^#define cimg_for_inZ(/;"	d
cimg_for_inZC	CImg.h	/^#define cimg_for_inZC(/;"	d
cimg_for_insideC	CImg.h	/^#define cimg_for_insideC(/;"	d
cimg_for_insideX	CImg.h	/^#define cimg_for_insideX(/;"	d
cimg_for_insideXY	CImg.h	/^#define cimg_for_insideXY(/;"	d
cimg_for_insideXYZ	CImg.h	/^#define cimg_for_insideXYZ(/;"	d
cimg_for_insideXYZC	CImg.h	/^#define cimg_for_insideXYZC(/;"	d
cimg_for_insideY	CImg.h	/^#define cimg_for_insideY(/;"	d
cimg_for_insideZ	CImg.h	/^#define cimg_for_insideZ(/;"	d
cimg_for_lineXY	CImg.h	/^#define cimg_for_lineXY(/;"	d
cimg_for_out1	CImg.h	/^#define cimg_for_out1(/;"	d
cimg_for_out2	CImg.h	/^#define cimg_for_out2(/;"	d
cimg_for_out3	CImg.h	/^#define cimg_for_out3(/;"	d
cimg_for_out4	CImg.h	/^#define cimg_for_out4(/;"	d
cimg_for_outC	CImg.h	/^#define cimg_for_outC(/;"	d
cimg_for_outX	CImg.h	/^#define cimg_for_outX(/;"	d
cimg_for_outXC	CImg.h	/^#define cimg_for_outXC(/;"	d
cimg_for_outXY	CImg.h	/^#define cimg_for_outXY(/;"	d
cimg_for_outXYC	CImg.h	/^#define cimg_for_outXYC(/;"	d
cimg_for_outXYZ	CImg.h	/^#define cimg_for_outXYZ(/;"	d
cimg_for_outXYZC	CImg.h	/^#define cimg_for_outXYZC(/;"	d
cimg_for_outXZ	CImg.h	/^#define cimg_for_outXZ(/;"	d
cimg_for_outXZC	CImg.h	/^#define cimg_for_outXZC(/;"	d
cimg_for_outY	CImg.h	/^#define cimg_for_outY(/;"	d
cimg_for_outYC	CImg.h	/^#define cimg_for_outYC(/;"	d
cimg_for_outYZ	CImg.h	/^#define cimg_for_outYZ(/;"	d
cimg_for_outYZC	CImg.h	/^#define cimg_for_outYZC(/;"	d
cimg_for_outZ	CImg.h	/^#define cimg_for_outZ(/;"	d
cimg_for_outZC	CImg.h	/^#define cimg_for_outZC(/;"	d
cimg_for_spiralXY	CImg.h	/^#define cimg_for_spiralXY(/;"	d
cimg_foroff	CImg.h	/^#define cimg_foroff(/;"	d
cimg_get2x2	CImg.h	/^#define cimg_get2x2(/;"	d
cimg_get2x2x2	CImg.h	/^#define cimg_get2x2x2(/;"	d
cimg_get3x3	CImg.h	/^#define cimg_get3x3(/;"	d
cimg_get3x3x3	CImg.h	/^#define cimg_get3x3x3(/;"	d
cimg_get4x4	CImg.h	/^#define cimg_get4x4(/;"	d
cimg_get5x5	CImg.h	/^#define cimg_get5x5(/;"	d
cimg_get6x6	CImg.h	/^#define cimg_get6x6(/;"	d
cimg_get7x7	CImg.h	/^#define cimg_get7x7(/;"	d
cimg_get8x8	CImg.h	/^#define cimg_get8x8(/;"	d
cimg_get9x9	CImg.h	/^#define cimg_get9x9(/;"	d
cimg_help	CImg.h	/^#define cimg_help(/;"	d
cimg_instance	CImg.h	/^#define cimg_instance /;"	d
cimg_library	CImg.h	/^namespace cimg_library {$/;"	n
cimg_option	CImg.h	/^#define cimg_option(/;"	d
cimg_snprintf	CImg.h	/^#define cimg_snprintf /;"	d
cimg_strescape	CImg.h	/^#define cimg_strescape(/;"	d
cimg_usage	CImg.h	/^#define cimg_usage(/;"	d
cimg_verbosity	CImg.h	/^#define cimg_verbosity /;"	d
cimg_version	CImg.h	/^#define cimg_version /;"	d
cimg_vsnprintf	CImg.h	/^#define cimg_vsnprintf /;"	d
cimgdisplay_instance	CImg.h	/^#define cimgdisplay_instance /;"	d
cimglist_apply	CImg.h	/^#define cimglist_apply(/;"	d
cimglist_for	CImg.h	/^#define cimglist_for(/;"	d
cimglist_for_in	CImg.h	/^#define cimglist_for_in(/;"	d
cimglist_instance	CImg.h	/^#define cimglist_instance /;"	d
clear	CImg.h	/^    CImg<T>& clear() {$/;"	f	struct:cimg_library::CImg
clear	CImg.h	/^    CImgList<T>& clear() {$/;"	f	struct:cimg_library::CImgList
close	CImg.h	/^    CImgDisplay& close() {$/;"	f	struct:cimg_library::CImgDisplay
code	CImg.h	/^      CImgList<uintT> code;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
code	object.h	/^        int code; \/\/ for subpixel ray index(code)$/;"	m	class:ray
column	CImg.h	/^    CImg<T>& column(const unsigned int x0) {$/;"	f	struct:cimg_library::CImg
columns	CImg.h	/^    CImg<T>& columns(const unsigned int x0, const unsigned int x1) {$/;"	f	struct:cimg_library::CImg
compile	CImg.h	/^      unsigned int compile(char *const ss, char *const se) {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
cone3d	CImg.h	/^    static CImg<floatT> cone3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library::CImg
const_iterator	CImg.h	/^    typedef const CImg<T>* const_iterator;$/;"	t	struct:cimg_library::CImgList
const_iterator	CImg.h	/^    typedef const T* const_iterator;$/;"	t	struct:cimg_library::CImg
contains	CImg.h	/^    bool contains(const CImg<T>& img) const {$/;"	f	struct:cimg_library::CImgList
contains	CImg.h	/^    bool contains(const CImg<T>& img, t& n) const {$/;"	f	struct:cimg_library::CImgList
contains	CImg.h	/^    bool contains(const T& pixel) const {$/;"	f	struct:cimg_library::CImg
contains	CImg.h	/^    bool contains(const T& pixel) const {$/;"	f	struct:cimg_library::CImgList
contains	CImg.h	/^    bool contains(const T& pixel, t& n) const {$/;"	f	struct:cimg_library::CImgList
contains	CImg.h	/^    bool contains(const T& pixel, t& n, t& x) const {$/;"	f	struct:cimg_library::CImgList
contains	CImg.h	/^    bool contains(const T& pixel, t& n, t& x, t&y) const {$/;"	f	struct:cimg_library::CImgList
contains	CImg.h	/^    bool contains(const T& pixel, t& n, t& x, t&y, t& z) const {$/;"	f	struct:cimg_library::CImgList
contains	CImg.h	/^    bool contains(const T& pixel, t& n, t& x, t&y, t& z, t& c) const {$/;"	f	struct:cimg_library::CImgList
contains	CImg.h	/^    bool contains(const T& pixel, t& x) const {$/;"	f	struct:cimg_library::CImg
contains	CImg.h	/^    bool contains(const T& pixel, t& x, t& y) const {$/;"	f	struct:cimg_library::CImg
contains	CImg.h	/^    bool contains(const T& pixel, t& x, t& y, t& z) const {$/;"	f	struct:cimg_library::CImg
contains	CImg.h	/^    bool contains(const T& pixel, t& x, t& y, t& z, t& c) const {$/;"	f	struct:cimg_library::CImg
containsN	CImg.h	/^    bool containsN(const int n) const {$/;"	f	struct:cimg_library::CImgList
containsNXYZC	CImg.h	/^    bool containsNXYZC(const int n, const int x=0, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImgList
containsXYZC	CImg.h	/^    bool containsXYZC(const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
convolve	CImg.h	/^    CImg<T>& convolve(const CImg<t>& mask, const unsigned int border_conditions=1, const bool is_normalized=false) {$/;"	f	struct:cimg_library::CImg
cool_LUT256	CImg.h	/^    static const CImg<Tuchar>& cool_LUT256() {$/;"	f	struct:cimg_library::CImg
correlate	CImg.h	/^    CImg<T>& correlate(const CImg<t>& mask, const unsigned int border_conditions=1, const bool is_normalized=false) {$/;"	f	struct:cimg_library::CImg
cos	CImg.h	/^    CImg<T>& cos() {$/;"	f	struct:cimg_library::CImg
cos	CImg.h	/^  inline CImg<_cimg_Tfloat> cos(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
cosh	CImg.h	/^    CImg<T>& cosh() {$/;"	f	struct:cimg_library::CImg
cosh	CImg.h	/^  inline CImg<_cimg_Tfloat> cosh(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
counter	bsp_tree.cpp	/^pair<float, int> counter(const plane_t& plane, const vector<shared_ptr<object>>& objs)$/;"	f
crand	CImg.h	/^    inline double crand() {$/;"	f	namespace:cimg_library::cimg
crop	CImg.h	/^    CImg<T>& crop(const int x0, const int x1, const bool border_condition=false) {$/;"	f	struct:cimg_library::CImg
crop	CImg.h	/^    CImg<T>& crop(const int x0, const int y0, const int z0, const int c0,$/;"	f	struct:cimg_library::CImg
crop	CImg.h	/^    CImg<T>& crop(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library::CImg
crop	CImg.h	/^    CImg<T>& crop(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
crop_font	CImg.h	/^    CImgList<T>& crop_font() {$/;"	f	struct:cimg_library::CImgList
cross	CImg.h	/^    CImg<T>& cross(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
cube	polyhedron.h	/^typedef polyhedron<6> cube;$/;"	t
cube_LUT256	CImg.h	/^    static const CImg<Tuchar>& cube_LUT256() {$/;"	f	struct:cimg_library::CImg
cubic_atX	CImg.h	/^    Tfloat cubic_atX(const float fx, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImg
cubic_atX	CImg.h	/^    Tfloat cubic_atX(const float fx, const int y, const int z, const int c, const T out_val,$/;"	f	struct:cimg_library::CImg
cubic_atX	CImg.h	/^    Tfloat cubic_atX(const float fx, const int y, const int z, const int c,$/;"	f	struct:cimg_library::CImg
cubic_atX	CImg.h	/^    Tfloat cubic_atX(const float fx, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
cubic_atXY	CImg.h	/^    Tfloat cubic_atXY(const float fx, const float fy, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImg
cubic_atXY	CImg.h	/^    Tfloat cubic_atXY(const float fx, const float fy, const int z, const int c, const T out_val,$/;"	f	struct:cimg_library::CImg
cubic_atXY	CImg.h	/^    Tfloat cubic_atXY(const float fx, const float fy, const int z, const int c,$/;"	f	struct:cimg_library::CImg
cubic_atXY	CImg.h	/^    Tfloat cubic_atXY(const float fx, const float fy, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
cubic_atXYZ	CImg.h	/^    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImg
cubic_atXYZ	CImg.h	/^    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c, const T out_val,$/;"	f	struct:cimg_library::CImg
cubic_atXYZ	CImg.h	/^    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c,$/;"	f	struct:cimg_library::CImg
cubic_atXYZ	CImg.h	/^    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c=0) const {$/;"	f	struct:cimg_library::CImg
curr_resolution	CImg.h	/^      unsigned int curr_resolution;$/;"	m	struct:cimg_library::cimg::X11_info
curr_rotation	CImg.h	/^      Rotation curr_rotation;$/;"	m	struct:cimg_library::cimg::X11_info
cut	CImg.h	/^      static T cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(T)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static bool cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(bool)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static char cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(char)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static double cut(const double val) { return val<min()?min():val>max()?max():val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static float cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(float)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static int cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(int)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static long cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(long)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static short cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(short)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static signed char cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(signed char)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static unsigned char cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(unsigned char)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static unsigned int cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(unsigned int)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static unsigned long cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(unsigned long)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^      static unsigned short cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(unsigned short)val; }$/;"	f	struct:cimg_library::cimg::type
cut	CImg.h	/^    CImg<T>& cut(const T value_min, const T value_max) {$/;"	f	struct:cimg_library::CImg
cylinder3d	CImg.h	/^    static CImg<floatT> cylinder3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library::CImg
data	CImg.h	/^    CImg<T> *data() {$/;"	f	struct:cimg_library::CImgList
data	CImg.h	/^    CImg<T> *data(const unsigned int l) {$/;"	f	struct:cimg_library::CImgList
data	CImg.h	/^    T *data(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) {$/;"	f	struct:cimg_library::CImg
data	CImg.h	/^    T* data() {$/;"	f	struct:cimg_library::CImg
data	CImg.h	/^    T* data(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) {$/;"	f	struct:cimg_library::CImg
data	CImg.h	/^    const CImg<T> *data() const {$/;"	f	struct:cimg_library::CImgList
data	CImg.h	/^    const CImg<T> *data(const unsigned int l) const {$/;"	f	struct:cimg_library::CImgList
data	CImg.h	/^    const T* data() const {$/;"	f	struct:cimg_library::CImg
data	CImg.h	/^    const T* data(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) const {$/;"	f	struct:cimg_library::CImg
data	bsp_tree.cpp	/^    data(pair<float, int> fit_inter, shared_ptr<const object> obj)$/;"	f	struct:data
data	bsp_tree.cpp	/^struct data$/;"	s	file:
dcraw_path	CImg.h	/^    inline const char *dcraw_path(const char *const user_path=0, const bool reinit_path=false) {$/;"	f	namespace:cimg_library::cimg
default_LUT256	CImg.h	/^    static const CImg<Tuchar>& default_LUT256() {$/;"	f	struct:cimg_library::CImg
depth	CImg.h	/^    int depth() const {$/;"	f	struct:cimg_library::CImg
deriche	CImg.h	/^    CImg<T>& deriche(const float sigma, const int order=0, const char axis='x', const bool cond=true) {$/;"	f	struct:cimg_library::CImg
det	CImg.h	/^    Tdouble det() const {$/;"	f	struct:cimg_library::CImg
diagonal	CImg.h	/^    CImg<T>& diagonal() {$/;"	f	struct:cimg_library::CImg
diagonal	CImg.h	/^    static CImg<T> diagonal(const T& a0) {$/;"	f	struct:cimg_library::CImg
diagonal	CImg.h	/^    static CImg<T> diagonal(const T& a0, const T& a1) {$/;"	f	struct:cimg_library::CImg
diagonal	CImg.h	/^    static CImg<T> diagonal(const T& a0, const T& a1, const T& a2) {$/;"	f	struct:cimg_library::CImg
diagonal	CImg.h	/^    static CImg<T> diagonal(const T& a0, const T& a1, const T& a2, const T& a3) {$/;"	f	struct:cimg_library::CImg
diagonal	CImg.h	/^    static CImg<T> diagonal(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4) {$/;"	f	struct:cimg_library::CImg
dialog	CImg.h	/^  inline int dialog(const char *const title, const char *const msg,$/;"	f	namespace:cimg_library::cimg
diffuse	material.h	/^        vector3 diffuse;$/;"	m	class:material
dijkstra	CImg.h	/^    CImg<T>& dijkstra(const unsigned int starting_node, const unsigned int ending_node, CImg<t>& previous) {$/;"	f	struct:cimg_library::CImg
dijkstra	CImg.h	/^    CImg<T>& dijkstra(const unsigned int starting_node, const unsigned int ending_node=~0U) {$/;"	f	struct:cimg_library::CImg
dijkstra	CImg.h	/^    static CImg<T> dijkstra(const tf& distance, const unsigned int nb_nodes,$/;"	f	struct:cimg_library::CImg
dilate	CImg.h	/^    CImg<T>& dilate(const CImg<t>& mask, const unsigned int border_conditions=1, const bool is_normalized=false) {$/;"	f	struct:cimg_library::CImg
dilate	CImg.h	/^    CImg<T>& dilate(const unsigned int s) {$/;"	f	struct:cimg_library::CImg
dilate	CImg.h	/^    CImg<T>& dilate(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) {$/;"	f	struct:cimg_library::CImg
dir	object.h	/^        vector3 dir;$/;"	m	class:light
dir	object.h	/^        vector3 dir;$/;"	m	class:ray
discard	CImg.h	/^    CImg<T>& discard(const CImg<t>& values) {$/;"	f	struct:cimg_library::CImg
discard	CImg.h	/^    CImg<T>& discard(const T value) {$/;"	f	struct:cimg_library::CImg
displacement	CImg.h	/^    CImg<T>& displacement(const CImg<T>& source, const float smooth=0.1f, const float precision=5.0f,$/;"	f	struct:cimg_library::CImg
display	CImg.h	/^      Display*         display;$/;"	m	struct:cimg_library::cimg::X11_info
display	CImg.h	/^    CImgDisplay& display(const CImg<T>& img) {$/;"	f	struct:cimg_library::CImgDisplay
display	CImg.h	/^    CImgDisplay& display(const CImgList<T>& list, const char axis='x', const float align=0) {$/;"	f	struct:cimg_library::CImgDisplay
display	CImg.h	/^    const CImg<T>& display(CImgDisplay &disp, const bool display_info) const {$/;"	f	struct:cimg_library::CImg
display	CImg.h	/^    const CImg<T>& display(CImgDisplay& disp) const {$/;"	f	struct:cimg_library::CImg
display	CImg.h	/^    const CImg<T>& display(const char *const title=0, const bool display_info=true) const {$/;"	f	struct:cimg_library::CImg
display	CImg.h	/^    const CImgList<T>& display(CImgDisplay &disp, const bool display_info,$/;"	f	struct:cimg_library::CImgList
display	CImg.h	/^    const CImgList<T>& display(CImgDisplay &disp, const char axis='x', const float align=0) const {$/;"	f	struct:cimg_library::CImgList
display	CImg.h	/^    const CImgList<T>& display(const char *const title=0, const bool display_info=true,$/;"	f	struct:cimg_library::CImgList
display	hw5.cpp	/^void display()$/;"	f
display	hw5_backup.cpp	/^void display()$/;"	f
display_graph	CImg.h	/^    const CImg<T>& display_graph(CImgDisplay &disp,$/;"	f	struct:cimg_library::CImg
display_graph	CImg.h	/^    const CImg<T>& display_graph(const char *const title=0,$/;"	f	struct:cimg_library::CImg
display_object3d	CImg.h	/^    const CImg<T>& display_object3d(CImgDisplay &disp,$/;"	f	struct:cimg_library::CImg
display_object3d	CImg.h	/^    const CImg<T>& display_object3d(CImgDisplay& disp,$/;"	f	struct:cimg_library::CImg
display_object3d	CImg.h	/^    const CImg<T>& display_object3d(const char *const title,$/;"	f	struct:cimg_library::CImg
dist	object.h	/^    float dist; \/\/ ray.org + dist*ray.dir$/;"	m	struct:intersect_info
distance	CImg.h	/^    CImg<T>& distance(const T value, const CImg<t>& metric_mask) {$/;"	f	struct:cimg_library::CImg
distance	CImg.h	/^    CImg<T>& distance(const T value, const unsigned int metric=2) {$/;"	f	struct:cimg_library::CImg
distance_eikonal	CImg.h	/^    CImg<T>& distance_eikonal(const unsigned int nb_iterations, const float band_size=0, const float time_step=0.5f) {$/;"	f	struct:cimg_library::CImg
div	CImg.h	/^    CImg<T>& div(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
div	CImg.h	/^    CImg<T>& div(const char *const expression) {$/;"	f	struct:cimg_library::CImg
dot	CImg.h	/^    Tdouble dot(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
dot_n_k	octree.h	/^        float dot_n_k(int face_num, const vector3& v) const { return (face_num > 2 ? -1 : 1) * v[face_num % 3]; }$/;"	f	class:octree_node
doubleT	CImg.h	/^    typedef typename cimg::last<T,double>::type doubleT;$/;"	t	struct:cimg_library::CImg
doubleT	CImg.h	/^    typedef typename cimg::last<T,double>::type doubleT;$/;"	t	struct:cimg_library::CImgList
draw_arrow	CImg.h	/^    CImg<T>& draw_arrow(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
draw_axes	CImg.h	/^      CImg<T>& draw_axes(const CImg<tx>& xvalues, const CImg<ty>& yvalues,$/;"	f	struct:cimg_library::CImg
draw_axes	CImg.h	/^    CImg<T>& draw_axes(const float x0, const float x1, const float y0, const float y1,$/;"	f	struct:cimg_library::CImg
draw_axis	CImg.h	/^    CImg<T>& draw_axis(const CImg<t>& xvalues, const int y,$/;"	f	struct:cimg_library::CImg
draw_axis	CImg.h	/^    CImg<T>& draw_axis(const int x, const CImg<t>& yvalues,$/;"	f	struct:cimg_library::CImg
draw_circle	CImg.h	/^    CImg<T>& draw_circle(const int x0, const int y0, int radius,$/;"	f	struct:cimg_library::CImg
draw_ellipse	CImg.h	/^    CImg<T>& draw_ellipse(const int x0, const int y0, const CImg<t> &tensor,$/;"	f	struct:cimg_library::CImg
draw_ellipse	CImg.h	/^    CImg<T>& draw_ellipse(const int x0, const int y0, const float r1, const float r2, const float angle,$/;"	f	struct:cimg_library::CImg
draw_fill	CImg.h	/^    CImg<T>& draw_fill(const int x, const int y, const int z,$/;"	f	struct:cimg_library::CImg
draw_fill	CImg.h	/^    CImg<T>& draw_fill(const int x, const int y,$/;"	f	struct:cimg_library::CImg
draw_gaussian	CImg.h	/^    CImg<T>& draw_gaussian(const float xc, const float sigma,$/;"	f	struct:cimg_library::CImg
draw_gaussian	CImg.h	/^    CImg<T>& draw_gaussian(const float xc, const float yc, const CImg<t>& tensor,$/;"	f	struct:cimg_library::CImg
draw_gaussian	CImg.h	/^    CImg<T>& draw_gaussian(const float xc, const float yc, const float sigma,$/;"	f	struct:cimg_library::CImg
draw_gaussian	CImg.h	/^    CImg<T>& draw_gaussian(const float xc, const float yc, const float zc, const CImg<t>& tensor,$/;"	f	struct:cimg_library::CImg
draw_gaussian	CImg.h	/^    CImg<T>& draw_gaussian(const float xc, const float yc, const float zc, const float sigma,$/;"	f	struct:cimg_library::CImg
draw_gaussian	CImg.h	/^    CImg<T>& draw_gaussian(const int xc, const int yc, const float r1, const float r2, const float ru, const float rv,$/;"	f	struct:cimg_library::CImg
draw_graph	CImg.h	/^    CImg<T>& draw_graph(const CImg<t>& data,$/;"	f	struct:cimg_library::CImg
draw_grid	CImg.h	/^    CImg<T>& draw_grid(const CImg<tx>& xvalues, const CImg<ty>& yvalues,$/;"	f	struct:cimg_library::CImg
draw_grid	CImg.h	/^    CImg<T>& draw_grid(const float deltax,  const float deltay,$/;"	f	struct:cimg_library::CImg
draw_image	CImg.h	/^    CImg<T>& draw_image(const CImg<t>& sprite, const float opacity=1) {$/;"	f	struct:cimg_library::CImg
draw_image	CImg.h	/^    CImg<T>& draw_image(const CImg<ti>& sprite, const CImg<tm>& mask, const float opacity=1,$/;"	f	struct:cimg_library::CImg
draw_image	CImg.h	/^    CImg<T>& draw_image(const int x0, const int y0, const int z0, const int c0,$/;"	f	struct:cimg_library::CImg
draw_image	CImg.h	/^    CImg<T>& draw_image(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library::CImg
draw_image	CImg.h	/^    CImg<T>& draw_image(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
draw_image	CImg.h	/^    CImg<T>& draw_image(const int x0,$/;"	f	struct:cimg_library::CImg
draw_line	CImg.h	/^    CImg<T>& draw_line(CImg<tz>& zbuffer,$/;"	f	struct:cimg_library::CImg
draw_line	CImg.h	/^    CImg<T>& draw_line(const CImg<t>& points,$/;"	f	struct:cimg_library::CImg
draw_line	CImg.h	/^    CImg<T>& draw_line(const int x0, const int y0, const float z0,$/;"	f	struct:cimg_library::CImg
draw_line	CImg.h	/^    CImg<T>& draw_line(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library::CImg
draw_line	CImg.h	/^    CImg<T>& draw_line(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
draw_mandelbrot	CImg.h	/^    CImg<T>& draw_mandelbrot(const CImg<tc>& color_palette, const float opacity=1,$/;"	f	struct:cimg_library::CImg
draw_mandelbrot	CImg.h	/^    CImg<T>& draw_mandelbrot(const int x0, const int y0, const int x1, const int y1,$/;"	f	struct:cimg_library::CImg
draw_object3d	CImg.h	/^    CImg<T>& draw_object3d(LibBoard::Board& board,$/;"	f	struct:cimg_library::CImg
draw_object3d	CImg.h	/^    CImg<T>& draw_object3d(const float x0, const float y0, const float z0,$/;"	f	struct:cimg_library::CImg
draw_plasma	CImg.h	/^    CImg<T>& draw_plasma(const float alpha=1, const float beta=1,$/;"	f	struct:cimg_library::CImg
draw_plasma	CImg.h	/^    CImg<T>& draw_plasma(const int x0, const int y0, const int x1, const int y1,$/;"	f	struct:cimg_library::CImg
draw_point	CImg.h	/^    CImg<T>& draw_point(const CImg<t>& points,$/;"	f	struct:cimg_library::CImg
draw_point	CImg.h	/^    CImg<T>& draw_point(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library::CImg
draw_point	CImg.h	/^    CImg<T>& draw_point(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
draw_polygon	CImg.h	/^    CImg<T>& draw_polygon(const CImg<t>& points,$/;"	f	struct:cimg_library::CImg
draw_quiver	CImg.h	/^    CImg<T>& draw_quiver(const CImg<t1>& flow,$/;"	f	struct:cimg_library::CImg
draw_rectangle	CImg.h	/^    CImg<T>& draw_rectangle(const int x0, const int y0, const int z0, const int c0,$/;"	f	struct:cimg_library::CImg
draw_rectangle	CImg.h	/^    CImg<T>& draw_rectangle(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library::CImg
draw_rectangle	CImg.h	/^    CImg<T>& draw_rectangle(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
draw_spline	CImg.h	/^    CImg<T>& draw_spline(const CImg<tp>& points, const CImg<tt>& tangents,$/;"	f	struct:cimg_library::CImg
draw_spline	CImg.h	/^    CImg<T>& draw_spline(const CImg<tp>& points,$/;"	f	struct:cimg_library::CImg
draw_spline	CImg.h	/^    CImg<T>& draw_spline(const int x0, const int y0, const float u0, const float v0,$/;"	f	struct:cimg_library::CImg
draw_spline	CImg.h	/^    CImg<T>& draw_spline(const int x0, const int y0, const int z0, const float u0, const float v0, const float w0,$/;"	f	struct:cimg_library::CImg
draw_text	CImg.h	/^    CImg<T>& draw_text(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
draw_triangle	CImg.h	/^    CImg<T>& draw_triangle(CImg<tz>& zbuffer,$/;"	f	struct:cimg_library::CImg
draw_triangle	CImg.h	/^    CImg<T>& draw_triangle(const int x0, const int y0, const float z0,$/;"	f	struct:cimg_library::CImg
draw_triangle	CImg.h	/^    CImg<T>& draw_triangle(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
edge_tensors	CImg.h	/^    CImg<T>& edge_tensors(const float sharpness=0.7f, const float anisotropy=0.6f,$/;"	f	struct:cimg_library::CImg
eigen	CImg.h	/^    const CImg<T>& eigen(CImg<t>& val, CImg<t> &vec) const {$/;"	f	struct:cimg_library::CImg
elevation3d	CImg.h	/^    static CImg<floatT> elevation3d(CImgList<tf>& primitives, const char *const expression,$/;"	f	struct:cimg_library::CImg
elevation3d	CImg.h	/^    static CImg<floatT> elevation3d(CImgList<tf>& primitives, const tfunc& func,$/;"	f	struct:cimg_library::CImg
ellipsoid3d	CImg.h	/^    static CImg<floatT> ellipsoid3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library::CImg
empty	CImg.h	/^    static CImg<T>& empty() {$/;"	f	struct:cimg_library::CImg
empty	CImg.h	/^    static CImgDisplay& empty() {$/;"	f	struct:cimg_library::CImgDisplay
empty	CImg.h	/^    static CImgList<T>& empty() {$/;"	f	struct:cimg_library::CImgList
end	CImg.h	/^    const_iterator end() const {$/;"	f	struct:cimg_library::CImg
end	CImg.h	/^    const_iterator end() const {$/;"	f	struct:cimg_library::CImgList
end	CImg.h	/^    iterator end() {$/;"	f	struct:cimg_library::CImg
end	CImg.h	/^    iterator end() {$/;"	f	struct:cimg_library::CImgList
endianness	CImg.h	/^    inline bool endianness() {$/;"	f	namespace:cimg_library::cimg
equalize	CImg.h	/^    CImg<T>& equalize(const unsigned int nb_levels, const T value_min=(T)0, const T value_max=(T)0) {$/;"	f	struct:cimg_library::CImg
erase	CImg.h	/^    CImgList<T>& erase(const iterator iter) {$/;"	f	struct:cimg_library::CImgList
erode	CImg.h	/^    CImg<T>& erode(const CImg<t>& mask, const unsigned int border_conditions=1, const bool is_normalized=false) {$/;"	f	struct:cimg_library::CImg
erode	CImg.h	/^    CImg<T>& erode(const unsigned int s) {$/;"	f	struct:cimg_library::CImg
erode	CImg.h	/^    CImg<T>& erode(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) {$/;"	f	struct:cimg_library::CImg
eval	CImg.h	/^      double eval(const double x, const double y, const double z, const double c) {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
eval	CImg.h	/^    double eval(const char *const expression, const double x=0, const double y=0, const double z=0, const double c=0) const {$/;"	f	struct:cimg_library::CImg
eval	CImg.h	/^  inline double eval(const char *const expression, const double x, const double y, const double z, const double c) {$/;"	f	namespace:cimg_library::cimg
event_thread	CImg.h	/^      pthread_t*       event_thread;$/;"	m	struct:cimg_library::cimg::X11_info
exception_mode	CImg.h	/^    inline unsigned int& exception_mode() {$/;"	f	namespace:cimg_library::cimg
exception_mode	CImg.h	/^    inline unsigned int& exception_mode(const unsigned int mode) {$/;"	f	namespace:cimg_library::cimg
exp	CImg.h	/^    CImg<T>& exp() {$/;"	f	struct:cimg_library::CImg
exp	CImg.h	/^  inline CImg<_cimg_Tfloat> exp(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
expr	CImg.h	/^      CImg<charT> expr;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
fclose	CImg.h	/^    inline int fclose(std::FILE *file) {$/;"	f	namespace:cimg_library::cimg
ffmpeg_path	CImg.h	/^    inline const char *ffmpeg_path(const char *const user_path=0, const bool reinit_path=false) {$/;"	f	namespace:cimg_library::cimg
file_type	CImg.h	/^    inline const char *file_type(std::FILE *const file, const char *const filename) {$/;"	f	namespace:cimg_library::cimg
filenamerand	CImg.h	/^    inline const char* filenamerand() {$/;"	f	namespace:cimg_library::cimg
fill	CImg.h	/^    CImg<T>& fill(const CImg<t>& values, const bool repeat_values=true) {$/;"	f	struct:cimg_library::CImg
fill	CImg.h	/^    CImg<T>& fill(const T val) {$/;"	f	struct:cimg_library::CImg
fill	CImg.h	/^    CImg<T>& fill(const T val0, const T val1) {$/;"	f	struct:cimg_library::CImg
fill	CImg.h	/^    CImg<T>& fill(const T val0, const T val1, const T val2) {$/;"	f	struct:cimg_library::CImg
fill	CImg.h	/^    CImg<T>& fill(const T val0, const T val1, const T val2, const T val3) {$/;"	f	struct:cimg_library::CImg
fill	CImg.h	/^    CImg<T>& fill(const T val0, const T val1, const T val2, const T val3, const T val4) {$/;"	f	struct:cimg_library::CImg
fill	CImg.h	/^    CImg<T>& fill(const T val0, const T val1, const T val2, const T val3, const T val4, const T val5) {$/;"	f	struct:cimg_library::CImg
fill	CImg.h	/^    CImg<T>& fill(const T val0, const T val1, const T val2, const T val3, const T val4, const T val5, const T val6) {$/;"	f	struct:cimg_library::CImg
fill	CImg.h	/^    CImg<T>& fill(const T val0, const T val1, const T val2, const T val3, const T val4, const T val5, const T val6,$/;"	f	struct:cimg_library::CImg
fill	CImg.h	/^    CImg<T>& fill(const char *const expression, const bool repeat_flag) {$/;"	f	struct:cimg_library::CImg
fillC	CImg.h	/^    CImg<T>& fillC(const unsigned int x, const unsigned int y, const unsigned int z, const double a0, ...) {$/;"	f	struct:cimg_library::CImg
fillC	CImg.h	/^    CImg<T>& fillC(const unsigned int x, const unsigned int y, const unsigned int z, const int a0, ...) {$/;"	f	struct:cimg_library::CImg
fillX	CImg.h	/^    CImg<T>& fillX(const unsigned int y, const unsigned int z, const unsigned int c, const double a0, ...) {$/;"	f	struct:cimg_library::CImg
fillX	CImg.h	/^    CImg<T>& fillX(const unsigned int y, const unsigned int z, const unsigned int c, const int a0, ...) {$/;"	f	struct:cimg_library::CImg
fillY	CImg.h	/^    CImg<T>& fillY(const unsigned int x, const unsigned int z, const unsigned int c, const double a0, ...) {$/;"	f	struct:cimg_library::CImg
fillY	CImg.h	/^    CImg<T>& fillY(const unsigned int x, const unsigned int z, const unsigned int c, const int a0, ...) {$/;"	f	struct:cimg_library::CImg
fillZ	CImg.h	/^    CImg<T>& fillZ(const unsigned int x, const unsigned int y, const unsigned int c, const double a0, ...) {$/;"	f	struct:cimg_library::CImg
fillZ	CImg.h	/^    CImg<T>& fillZ(const unsigned int x, const unsigned int y, const unsigned int c, const int a0, ...) {$/;"	f	struct:cimg_library::CImg
find_min_intersect	bsp_tree.cpp	/^inline intersect_info find_min_intersect(const T& lst, const ray& eye_ray)$/;"	f
fitness	bsp_tree.cpp	/^    float fitness;$/;"	m	struct:data	file:
flag	object.h	/^        bool flag; \/\/ valid\/invalid$/;"	m	class:ray
flag_LUT256	CImg.h	/^    static const CImg<Tuchar>& flag_LUT256() {$/;"	f	struct:cimg_library::CImg
float2uint	CImg.h	/^    inline unsigned int float2uint(const float f) {$/;"	f	namespace:cimg_library::cimg
floatT	CImg.h	/^    typedef typename cimg::last<T,float>::type floatT;$/;"	t	struct:cimg_library::CImg
floatT	CImg.h	/^    typedef typename cimg::last<T,float>::type floatT;$/;"	t	struct:cimg_library::CImgList
flush	CImg.h	/^    CImgDisplay& flush() {$/;"	f	struct:cimg_library::CImgDisplay
font	CImg.h	/^    static const CImgList<T>& font(const unsigned int font_height, const bool variable_size=true) {$/;"	f	struct:cimg_library::CImgList
font10x13	CImg.h	/^    const unsigned int font10x13[256*10*13\/32] = {$/;"	m	namespace:cimg_library::cimg
font12x24	CImg.h	/^    const unsigned int font12x24[12*24*256\/32] = {$/;"	m	namespace:cimg_library::cimg
font16x32	CImg.h	/^    const unsigned int font16x32[16*32*256\/32] = {$/;"	m	namespace:cimg_library::cimg
font29x57	CImg.h	/^    const unsigned int font29x57[29*57*256\/32] = {$/;"	m	namespace:cimg_library::cimg
fopen	CImg.h	/^    inline std::FILE *fopen(const char *const path, const char *const mode) {$/;"	f	namespace:cimg_library::cimg
format	CImg.h	/^      static const char* format() { return "%d"; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static const char* format() { return "%g"; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static const char* format() { return "%ld"; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static const char* format() { return "%lu"; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static const char* format() { return "%s"; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static const char* format() { return "%u"; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static const char* format(const T val) { static const char *const s = "unknown"; return s; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static const char* format(const bool val) { static const char* s[] = { "false", "true" }; return s[val?1:0]; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static double format(const double val) { return val; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static double format(const float val) { return (double)val; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static int format(const char val) { return (int)val; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static int format(const int val) { return val; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static int format(const short val) { return (int)val; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static long format(const long val) { return val; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static unsigned int format(const signed char val) { return (int)val; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static unsigned int format(const unsigned char val) { return (unsigned int)val; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static unsigned int format(const unsigned int val) { return val; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static unsigned int format(const unsigned short val) { return (unsigned int)val; }$/;"	f	struct:cimg_library::cimg::type
format	CImg.h	/^      static unsigned long format(const unsigned long val) { return val; }$/;"	f	struct:cimg_library::cimg::type
frames_per_second	CImg.h	/^    float frames_per_second() {$/;"	f	struct:cimg_library::CImgDisplay
fread	CImg.h	/^    inline int fread(T *const ptr, const unsigned int nmemb, std::FILE *stream) {$/;"	f	namespace:cimg_library::cimg
from_in_to_out	object.h	/^    bool from_in_to_out;$/;"	m	struct:intersect_info
front	CImg.h	/^    CImg<T>& front() {$/;"	f	struct:cimg_library::CImgList
front	CImg.h	/^    T& front() {$/;"	f	struct:cimg_library::CImg
front	CImg.h	/^    const CImg<T>& front() const {$/;"	f	struct:cimg_library::CImgList
front	CImg.h	/^    const T& front() const {$/;"	f	struct:cimg_library::CImg
front	bsp_tree.h	/^        bsp_tree_node* front;$/;"	m	class:bsp_tree_node
front_or_back	object.h	/^        virtual int front_or_back(const plane_t& p) const { assert(false); return 0; }$/;"	f	class:object
front_or_back	object.h	/^        virtual int front_or_back(const plane_t& p) const$/;"	f	class:sphere
front_or_back	triangle.h	/^        virtual int front_or_back(const plane_t& p) const$/;"	f	class:triangle
fwrite	CImg.h	/^    inline int fwrite(const T *ptr, const unsigned int nmemb, std::FILE *stream) {$/;"	f	namespace:cimg_library::cimg
g_amb_light	scene.h	/^        vector3 g_amb_light;$/;"	m	class:scene
gesvd	CImg.h	/^    inline void gesvd(char &JOB, int &M, int &N, T *lapA, int &MN,$/;"	f	namespace:cimg_library::cimg
gesvd	CImg.h	/^    inline void gesvd(char &JOB, int &M, int &N, float *lapA, int &MN,$/;"	f	namespace:cimg_library::cimg
get_BayertoRGB	CImg.h	/^    CImg<Tuchar> get_BayertoRGB(const unsigned int interpolation_type=3) const {$/;"	f	struct:cimg_library::CImg
get_CImg3dtoobject3d	CImg.h	/^    CImg<T> get_CImg3dtoobject3d(CImgList<tp>& primitives, CImgList<tc>& colors, CImgList<to>& opacities) const {$/;"	f	struct:cimg_library::CImg
get_CMYKtoCMY	CImg.h	/^    CImg<Tfloat> get_CMYKtoCMY() const {$/;"	f	struct:cimg_library::CImg
get_CMYKtoRGB	CImg.h	/^    CImg<Tuchar> get_CMYKtoRGB() const {$/;"	f	struct:cimg_library::CImg
get_CMYtoCMYK	CImg.h	/^    CImg<Tuchar> get_CMYtoCMYK() const {$/;"	f	struct:cimg_library::CImg
get_CMYtoRGB	CImg.h	/^    CImg<Tuchar> get_CMYtoRGB() const {$/;"	f	struct:cimg_library::CImg
get_FFT	CImg.h	/^    CImgList<Tfloat> get_FFT(const bool invert=false) const {$/;"	f	struct:cimg_library::CImg
get_FFT	CImg.h	/^    CImgList<Tfloat> get_FFT(const bool invert=false) const {$/;"	f	struct:cimg_library::CImgList
get_FFT	CImg.h	/^    CImgList<Tfloat> get_FFT(const char axis, const bool invert=false) const {$/;"	f	struct:cimg_library::CImg
get_FFT	CImg.h	/^    CImgList<Tfloat> get_FFT(const char axis, const bool invert=false) const {$/;"	f	struct:cimg_library::CImgList
get_HSItoRGB	CImg.h	/^    CImg<Tfloat> get_HSItoRGB() const {$/;"	f	struct:cimg_library::CImg
get_HSLtoRGB	CImg.h	/^    CImg<Tuchar> get_HSLtoRGB() const {$/;"	f	struct:cimg_library::CImg
get_HSVtoRGB	CImg.h	/^    CImg<Tuchar> get_HSVtoRGB() const {$/;"	f	struct:cimg_library::CImg
get_LabtoRGB	CImg.h	/^    CImg<Tuchar> get_LabtoRGB() const {$/;"	f	struct:cimg_library::CImg
get_LabtoXYZ	CImg.h	/^    CImg<Tfloat> get_LabtoXYZ() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoBayer	CImg.h	/^    CImg<T> get_RGBtoBayer() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoCMY	CImg.h	/^    CImg<Tuchar> get_RGBtoCMY() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoCMYK	CImg.h	/^    CImg<Tfloat> get_RGBtoCMYK() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoHSI	CImg.h	/^    CImg<Tfloat> get_RGBtoHSI() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoHSL	CImg.h	/^    CImg<Tfloat> get_RGBtoHSL() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoHSV	CImg.h	/^    CImg<Tfloat> get_RGBtoHSV() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoLab	CImg.h	/^    CImg<Tfloat> get_RGBtoLab() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoXYZ	CImg.h	/^    CImg<Tfloat> get_RGBtoXYZ() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoYCbCr	CImg.h	/^    CImg<Tuchar> get_RGBtoYCbCr() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoYUV	CImg.h	/^    CImg<Tfloat> get_RGBtoYUV() const {$/;"	f	struct:cimg_library::CImg
get_RGBtoxyY	CImg.h	/^    CImg<Tfloat> get_RGBtoxyY() const {$/;"	f	struct:cimg_library::CImg
get_SVD	CImg.h	/^    CImgList<Tfloat> get_SVD(const bool sorting=true,$/;"	f	struct:cimg_library::CImg
get_XYZtoLab	CImg.h	/^    CImg<Tfloat> get_XYZtoLab() const {$/;"	f	struct:cimg_library::CImg
get_XYZtoRGB	CImg.h	/^    CImg<Tuchar> get_XYZtoRGB() const {$/;"	f	struct:cimg_library::CImg
get_XYZtoxyY	CImg.h	/^    CImg<Tfloat> get_XYZtoxyY() const {$/;"	f	struct:cimg_library::CImg
get_YCbCrtoRGB	CImg.h	/^    CImg<Tuchar> get_YCbCrtoRGB() const {$/;"	f	struct:cimg_library::CImg
get_YUVtoRGB	CImg.h	/^    CImg<Tuchar> get_YUVtoRGB() const {$/;"	f	struct:cimg_library::CImg
get_abs	CImg.h	/^    CImg<Tfloat> get_abs() const {$/;"	f	struct:cimg_library::CImg
get_acos	CImg.h	/^    CImg<Tfloat> get_acos() const {$/;"	f	struct:cimg_library::CImg
get_append	CImg.h	/^    CImg<T> get_append(const CImg<T>& img, const char axis='x', const float align=0) const {$/;"	f	struct:cimg_library::CImg
get_append	CImg.h	/^    CImg<T> get_append(const char axis, const float align=0) const {$/;"	f	struct:cimg_library::CImgList
get_append	CImg.h	/^    CImg<_cimg_Tt> get_append(const CImg<T>& img, const char axis='x', const float align=0) const {$/;"	f	struct:cimg_library::CImg
get_asin	CImg.h	/^    CImg<Tfloat> get_asin() const {$/;"	f	struct:cimg_library::CImg
get_atan	CImg.h	/^    CImg<Tfloat> get_atan() const {$/;"	f	struct:cimg_library::CImg
get_atan2	CImg.h	/^    CImg<Tfloat> get_atan2(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
get_autocrop	CImg.h	/^    CImg<T> get_autocrop(const T *const color, const char *const axes="zyx") const {$/;"	f	struct:cimg_library::CImg
get_autocrop	CImg.h	/^    CImg<T> get_autocrop(const T value, const char *const axes="czyx") const {$/;"	f	struct:cimg_library::CImg
get_autocrop	CImg.h	/^    template<typename t> CImg<T> get_autocrop(const CImg<t>& color, const char *const axes="zyx") const {$/;"	f	struct:cimg_library::CImg
get_barycentric_coord	triangle.h	/^        std::pair<float, float> get_barycentric_coord(const vector3& p) const$/;"	f	class:triangle
get_blur	CImg.h	/^    CImg<Tfloat> get_blur(const float sigma, const bool cond=true) const {$/;"	f	struct:cimg_library::CImg
get_blur	CImg.h	/^    CImg<Tfloat> get_blur(const float sigmax, const float sigmay, const float sigmaz, const bool cond=true) const {$/;"	f	struct:cimg_library::CImg
get_blur_anisotropic	CImg.h	/^    CImg<T> get_blur_anisotropic(const CImg<t>& G,$/;"	f	struct:cimg_library::CImg
get_blur_anisotropic	CImg.h	/^    CImg<T> get_blur_anisotropic(const float amplitude, const float sharpness=0.7f, const float anisotropy=0.6f,$/;"	f	struct:cimg_library::CImg
get_blur_bilateral	CImg.h	/^    CImg<T> get_blur_bilateral(const float sigma_s, const float sigma_r, const int bgrid_s=-33, const int bgrid_r=32,$/;"	f	struct:cimg_library::CImg
get_blur_bilateral	CImg.h	/^    CImg<T> get_blur_bilateral(const float sigma_x, const float sigma_y, const float sigma_z, const float sigma_r,$/;"	f	struct:cimg_library::CImg
get_blur_median	CImg.h	/^    CImg<T> get_blur_median(const unsigned int n) const {$/;"	f	struct:cimg_library::CImg
get_blur_patch	CImg.h	/^    CImg<T> get_blur_patch(const float sigma_s, const float sigma_p, const unsigned int patch_size=3,$/;"	f	struct:cimg_library::CImg
get_channel	CImg.h	/^    CImg<T> get_channel(const unsigned int c0) const {$/;"	f	struct:cimg_library::CImg
get_channels	CImg.h	/^    CImg<T> get_channels(const unsigned int c0, const unsigned int c1) const {$/;"	f	struct:cimg_library::CImg
get_column	CImg.h	/^    CImg<T> get_column(const unsigned int x0) const {$/;"	f	struct:cimg_library::CImg
get_columns	CImg.h	/^    CImg<T> get_columns(const unsigned int x0, const unsigned int x1) const {$/;"	f	struct:cimg_library::CImg
get_convolve	CImg.h	/^    CImg<_cimg_Ttfloat> get_convolve(const CImg<t>& mask, const unsigned int border_conditions=1,$/;"	f	struct:cimg_library::CImg
get_correlate	CImg.h	/^    CImg<_cimg_Ttfloat> get_correlate(const CImg<t>& mask, const unsigned int border_conditions=1,$/;"	f	struct:cimg_library::CImg
get_cos	CImg.h	/^    CImg<Tfloat> get_cos() const {$/;"	f	struct:cimg_library::CImg
get_cosh	CImg.h	/^    CImg<Tfloat> get_cosh() const {$/;"	f	struct:cimg_library::CImg
get_crop	CImg.h	/^    CImg<T> get_crop(const int x0, const int x1, const bool border_condition=false) const {$/;"	f	struct:cimg_library::CImg
get_crop	CImg.h	/^    CImg<T> get_crop(const int x0, const int y0, const int z0, const int c0,$/;"	f	struct:cimg_library::CImg
get_crop	CImg.h	/^    CImg<T> get_crop(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library::CImg
get_crop	CImg.h	/^    CImg<T> get_crop(const int x0, const int y0,$/;"	f	struct:cimg_library::CImg
get_crop_font	CImg.h	/^    CImgList<T> get_crop_font() const {$/;"	f	struct:cimg_library::CImgList
get_cross	CImg.h	/^    CImg<_cimg_Tt> get_cross(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
get_cut	CImg.h	/^    CImg<T> get_cut(const T value_min, const T value_max) const {$/;"	f	struct:cimg_library::CImg
get_d_k	octree.h	/^        float get_d_k(int face_num) const$/;"	f	class:octree_node
get_deriche	CImg.h	/^    CImg<Tfloat> get_deriche(const float sigma, const int order=0, const char axis='x', const bool cond=true) const {$/;"	f	struct:cimg_library::CImg
get_diagonal	CImg.h	/^    CImg<T> get_diagonal() const {$/;"	f	struct:cimg_library::CImg
get_dijkstra	CImg.h	/^    CImg<T> get_dijkstra(const unsigned int starting_node, const unsigned int ending_node, CImg<t>& previous) const {$/;"	f	struct:cimg_library::CImg
get_dijkstra	CImg.h	/^    CImg<Tfloat> get_dijkstra(const unsigned int starting_node, const unsigned int ending_node=~0U) const {$/;"	f	struct:cimg_library::CImg
get_dilate	CImg.h	/^    CImg<T> get_dilate(const unsigned int s) const {$/;"	f	struct:cimg_library::CImg
get_dilate	CImg.h	/^    CImg<T> get_dilate(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) const {$/;"	f	struct:cimg_library::CImg
get_dilate	CImg.h	/^    CImg<_cimg_Tt> get_dilate(const CImg<t>& mask, const unsigned int border_conditions=1,$/;"	f	struct:cimg_library::CImg
get_discard	CImg.h	/^    CImg<T> get_discard(const CImg<t>& values) const {$/;"	f	struct:cimg_library::CImg
get_discard	CImg.h	/^    CImg<T> get_discard(const T value) const {$/;"	f	struct:cimg_library::CImg
get_displacement	CImg.h	/^    CImg<Tfloat> get_displacement(const CImg<T>& source,$/;"	f	struct:cimg_library::CImg
get_distance	CImg.h	/^    CImg<Tfloat> get_distance(const T value, const CImg<t>& metric_mask) const {$/;"	f	struct:cimg_library::CImg
get_distance	CImg.h	/^    CImg<Tfloat> get_distance(const T value, const unsigned int metric=2) const {$/;"	f	struct:cimg_library::CImg
get_distance_eikonal	CImg.h	/^    CImg<Tfloat> get_distance_eikonal(const unsigned int nb_iterations, const float band_size=0, const float time_step=0.5f) const {$/;"	f	struct:cimg_library::CImg
get_div	CImg.h	/^    CImg<_cimg_Tt> get_div(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
get_edge_tensors	CImg.h	/^    CImg<Tfloat> get_edge_tensors(const float sharpness=0.7f, const float anisotropy=0.6f,$/;"	f	struct:cimg_library::CImg
get_eigen	CImg.h	/^    CImgList<Tfloat> get_eigen() const {$/;"	f	struct:cimg_library::CImg
get_elevation3d	CImg.h	/^    CImg<floatT> get_elevation3d(CImgList<tf>& primitives, CImgList<tc>& colors, const CImg<te>& elevation) const {$/;"	f	struct:cimg_library::CImg
get_equalize	CImg.h	/^    CImg<T> get_equalize(const unsigned int nblevels, const T val_min=(T)0, const T val_max=(T)0) const {$/;"	f	struct:cimg_library::CImg
get_erode	CImg.h	/^    CImg<T> get_erode(const unsigned int s) const {$/;"	f	struct:cimg_library::CImg
get_erode	CImg.h	/^    CImg<T> get_erode(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) const {$/;"	f	struct:cimg_library::CImg
get_erode	CImg.h	/^    CImg<_cimg_Tt> get_erode(const CImg<t>& mask, const unsigned int border_conditions=1,$/;"	f	struct:cimg_library::CImg
get_exp	CImg.h	/^    CImg<Tfloat> get_exp() const {$/;"	f	struct:cimg_library::CImg
get_fill	CImg.h	/^    CImg<T> get_fill(const CImg<t>& values, const bool repeat_values=true) const {$/;"	f	struct:cimg_library::CImg
get_fill	CImg.h	/^    CImg<T> get_fill(const T val) const {$/;"	f	struct:cimg_library::CImg
get_fill	CImg.h	/^    CImg<T> get_fill(const T val0, const T val1) const {$/;"	f	struct:cimg_library::CImg
get_fill	CImg.h	/^    CImg<T> get_fill(const T val0, const T val1, const T val2) const {$/;"	f	struct:cimg_library::CImg
get_fill	CImg.h	/^    CImg<T> get_fill(const T val0, const T val1, const T val2, const T val3) const {$/;"	f	struct:cimg_library::CImg
get_fill	CImg.h	/^    CImg<T> get_fill(const T val0, const T val1, const T val2, const T val3, const T val4) const {$/;"	f	struct:cimg_library::CImg
get_fill	CImg.h	/^    CImg<T> get_fill(const T val0, const T val1, const T val2, const T val3, const T val4, const T val5) const {$/;"	f	struct:cimg_library::CImg
get_fill	CImg.h	/^    CImg<T> get_fill(const T val0, const T val1, const T val2, const T val3, const T val4, const T val5, const T val6) const {$/;"	f	struct:cimg_library::CImg
get_fill	CImg.h	/^    CImg<T> get_fill(const T val0, const T val1, const T val2, const T val3, const T val4, const T val5, const T val6,$/;"	f	struct:cimg_library::CImg
get_fill	CImg.h	/^    CImg<T> get_fill(const char *const values, const bool repeat_values) const {$/;"	f	struct:cimg_library::CImg
get_gradient	CImg.h	/^    CImgList<Tfloat> get_gradient(const char *const axes=0, const int scheme=3) const {$/;"	f	struct:cimg_library::CImg
get_haar	CImg.h	/^    CImg<Tfloat> get_haar(const bool invert=false, const unsigned int nb_scales=1) const {$/;"	f	struct:cimg_library::CImg
get_haar	CImg.h	/^    CImg<Tfloat> get_haar(const char axis, const bool invert=false, const unsigned int nb_scales=1) const {$/;"	f	struct:cimg_library::CImg
get_hessian	CImg.h	/^    CImgList<Tfloat> get_hessian(const char *const axes=0) const {$/;"	f	struct:cimg_library::CImg
get_histogram	CImg.h	/^    CImg<floatT> get_histogram(const unsigned int nb_levels, const T value_min=(T)0, const T value_max=(T)0) const {$/;"	f	struct:cimg_library::CImg
get_hit_dist	object.h	/^        std::pair<float, float> get_hit_dist(const ray& ray, const float time) const$/;"	f	class:light
get_hit_dist	object.h	/^        std::pair<float, float> get_hit_dist(const ray& ray, const float time) const$/;"	f	class:sphere
get_hit_dist	triangle.h	/^        std::pair<float, float> get_hit_dist(const ray& ray, const float time) const$/;"	f	class:triangle
get_identity_matrix	CImg.h	/^    CImg<T> get_identity_matrix() const {$/;"	f	struct:cimg_library::CImg
get_images	CImg.h	/^    CImgList<T> get_images(const unsigned int i0, const unsigned int i1) const {$/;"	f	struct:cimg_library::CImgList
get_index	CImg.h	/^    get_index(const CImg<t>& palette, const bool dithering=false, const bool map_indexes=true) const {$/;"	f	struct:cimg_library::CImg
get_insert	CImg.h	/^    CImgList<T> get_insert(const CImg<t>& img, const unsigned int pos=~0U, const bool shared=false) const {$/;"	f	struct:cimg_library::CImgList
get_insert	CImg.h	/^    CImgList<T> get_insert(const CImgList<t>& list, const unsigned int pos=~0U, const bool shared=false) const {$/;"	f	struct:cimg_library::CImgList
get_insert	CImg.h	/^    CImgList<T> get_insert(const unsigned int n, const CImg<t>& img, const unsigned int pos=~0U, const bool shared=false) const {$/;"	f	struct:cimg_library::CImgList
get_insert	CImg.h	/^    CImgList<T> get_insert(const unsigned int n, const CImgList<t>& list, const unsigned int pos=~0U, const bool shared=false) const {$/;"	f	struct:cimg_library::CImgList
get_insert	CImg.h	/^    CImgList<T> get_insert(const unsigned int n, const unsigned int pos=~0U) const {$/;"	f	struct:cimg_library::CImgList
get_invert	CImg.h	/^    CImg<Tfloat> get_invert(const bool use_LU=true) const {$/;"	f	struct:cimg_library::CImg
get_invert_endianness	CImg.h	/^    CImg<T> get_invert_endianness() const {$/;"	f	struct:cimg_library::CImg
get_isoline3d	CImg.h	/^    CImg<floatT> get_isoline3d(CImgList<tf>& primitives, const float isovalue,$/;"	f	struct:cimg_library::CImg
get_isosurface3d	CImg.h	/^    CImg<floatT> get_isosurface3d(CImgList<tf>& primitives, const float isovalue,$/;"	f	struct:cimg_library::CImg
get_item	object.h	/^        virtual std::shared_ptr<const object> get_item(int idx) const { return shared_from_this(); }$/;"	f	class:object
get_item	object.h	/^        virtual std::shared_ptr<object> get_item(int idx) { return shared_from_this(); }$/;"	f	class:object
get_item	polyhedron.h	/^        virtual std::shared_ptr<const object> get_item(int idx) const { return triangles[idx]; }$/;"	f	class:polyhedron
get_item	polyhedron.h	/^        virtual std::shared_ptr<object> get_item(int idx) { return triangles[idx]; }$/;"	f	class:polyhedron
get_jittered_pos	object.h	/^        point3 get_jittered_pos(int idx, const float time) const $/;"	f	class:light
get_label	CImg.h	/^    CImg<unsigned long> get_label(const CImg<t>& connectivity_mask, const Tfloat tolerance=0) const {$/;"	f	struct:cimg_library::CImg
get_label	CImg.h	/^    CImg<unsigned long> get_label(const bool is_high_connectivity=false, const Tfloat tolerance=0) const {$/;"	f	struct:cimg_library::CImg
get_laplacian	CImg.h	/^    CImg<Tfloat> get_laplacian() const {$/;"	f	struct:cimg_library::CImg
get_line	CImg.h	/^    CImg<T> get_line(const unsigned int y0) const {$/;"	f	struct:cimg_library::CImg
get_lines	CImg.h	/^    CImg<T> get_lines(const unsigned int y0, const unsigned int y1) const {$/;"	f	struct:cimg_library::CImg
get_load	CImg.h	/^    static CImg<T> get_load(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load	CImg.h	/^    static CImgList<T> get_load(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
get_load_analyze	CImg.h	/^    static CImg<T> get_load_analyze(const char *const filename, float *const voxsize=0) {$/;"	f	struct:cimg_library::CImg
get_load_analyze	CImg.h	/^    static CImg<T> get_load_analyze(std::FILE *const file, float *const voxsize=0) {$/;"	f	struct:cimg_library::CImg
get_load_ascii	CImg.h	/^    static CImg<T> get_load_ascii(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_ascii	CImg.h	/^    static CImg<T> get_load_ascii(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
get_load_bmp	CImg.h	/^    static CImg<T> get_load_bmp(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_bmp	CImg.h	/^    static CImg<T> get_load_bmp(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
get_load_camera	CImg.h	/^    static CImg<T> get_load_camera(const int camera_index=-1, const unsigned int skip_frames=0, const bool release_camera=false) {$/;"	f	struct:cimg_library::CImg
get_load_cimg	CImg.h	/^    static CImg<T> get_load_cimg(const char *const filename, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library::CImg
get_load_cimg	CImg.h	/^    static CImg<T> get_load_cimg(const char *const filename,$/;"	f	struct:cimg_library::CImg
get_load_cimg	CImg.h	/^    static CImg<T> get_load_cimg(std::FILE *const file, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library::CImg
get_load_cimg	CImg.h	/^    static CImg<T> get_load_cimg(std::FILE *const file,$/;"	f	struct:cimg_library::CImg
get_load_cimg	CImg.h	/^    static CImgList<T> get_load_cimg(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
get_load_cimg	CImg.h	/^    static CImgList<T> get_load_cimg(const char *const filename,$/;"	f	struct:cimg_library::CImgList
get_load_cimg	CImg.h	/^    static CImgList<T> get_load_cimg(std::FILE *const file) {$/;"	f	struct:cimg_library::CImgList
get_load_cimg	CImg.h	/^    static CImgList<T> get_load_cimg(std::FILE *const file,$/;"	f	struct:cimg_library::CImgList
get_load_dcraw_external	CImg.h	/^    static CImg<T> get_load_dcraw_external(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_dlm	CImg.h	/^    static CImg<T> get_load_dlm(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_dlm	CImg.h	/^    static CImg<T> get_load_dlm(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
get_load_exr	CImg.h	/^    static CImg<T> get_load_exr(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_ffmpeg	CImg.h	/^    static CImg<T> get_load_ffmpeg(const char *const filename, const unsigned int first_frame=0, const unsigned int last_frame=~0U,$/;"	f	struct:cimg_library::CImg
get_load_ffmpeg	CImg.h	/^    static CImgList<T> get_load_ffmpeg(const char *const filename, const unsigned int first_frame=0, const unsigned int last_frame=~0U,$/;"	f	struct:cimg_library::CImgList
get_load_ffmpeg_external	CImg.h	/^    static CImg<T> get_load_ffmpeg_external(const char *const filename, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library::CImg
get_load_ffmpeg_external	CImg.h	/^    static CImgList<T> get_load_ffmpeg_external(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
get_load_graphicsmagick_external	CImg.h	/^    static CImg<T> get_load_graphicsmagick_external(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_gzip_external	CImg.h	/^    static CImg<T> get_load_gzip_external(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_gzip_external	CImg.h	/^    static CImgList<T> get_load_gzip_external(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
get_load_imagemagick_external	CImg.h	/^    static CImg<T> get_load_imagemagick_external(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_inr	CImg.h	/^    static CImg<T> get_load_inr(const char *const filename, float *const voxsize=0) {$/;"	f	struct:cimg_library::CImg
get_load_inr	CImg.h	/^    static CImg<T> get_load_inr(std::FILE *const file, float *voxsize=0) {$/;"	f	struct:cimg_library::CImg
get_load_jpeg	CImg.h	/^    static CImg<T> get_load_jpeg(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_jpeg	CImg.h	/^    static CImg<T> get_load_jpeg(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
get_load_magick	CImg.h	/^    static CImg<T> get_load_magick(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_medcon_external	CImg.h	/^    static CImg<T> get_load_medcon_external(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_off	CImg.h	/^      static CImgList<T> get_load_off(const char *const filename,$/;"	f	struct:cimg_library::CImgList
get_load_off	CImg.h	/^    static CImg<T> get_load_off(const char *const filename, CImgList<tf>& primitives, CImgList<tc>& colors) {$/;"	f	struct:cimg_library::CImg
get_load_off	CImg.h	/^    static CImg<T> get_load_off(std::FILE *const file, CImgList<tf>& primitives, CImgList<tc>& colors) {$/;"	f	struct:cimg_library::CImg
get_load_other	CImg.h	/^    static CImg<T> get_load_other(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_pandore	CImg.h	/^    static CImg<T> get_load_pandore(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_pandore	CImg.h	/^    static CImg<T> get_load_pandore(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
get_load_parrec	CImg.h	/^    static CImg<T> get_load_parrec(const char *const filename, const char axis='c', const float align=0) {$/;"	f	struct:cimg_library::CImg
get_load_parrec	CImg.h	/^    static CImgList<T> get_load_parrec(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
get_load_pfm	CImg.h	/^    static CImg<T> get_load_pfm(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_pfm	CImg.h	/^    static CImg<T> get_load_pfm(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
get_load_png	CImg.h	/^    static CImg<T> get_load_png(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_png	CImg.h	/^    static CImg<T> get_load_png(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
get_load_pnm	CImg.h	/^    static CImg<T> get_load_pnm(const char *const filename) {$/;"	f	struct:cimg_library::CImg
get_load_pnm	CImg.h	/^    static CImg<T> get_load_pnm(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
get_load_raw	CImg.h	/^    static CImg<T> get_load_raw(const char *const filename,$/;"	f	struct:cimg_library::CImg
get_load_raw	CImg.h	/^    static CImg<T> get_load_raw(std::FILE *const file,$/;"	f	struct:cimg_library::CImg
get_load_rgb	CImg.h	/^    static CImg<T> get_load_rgb(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library::CImg
get_load_rgb	CImg.h	/^    static CImg<T> get_load_rgb(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library::CImg
get_load_rgba	CImg.h	/^    static CImg<T> get_load_rgba(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library::CImg
get_load_rgba	CImg.h	/^    static CImg<T> get_load_rgba(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library::CImg
get_load_tiff	CImg.h	/^    static CImg<T> get_load_tiff(const char *const filename,$/;"	f	struct:cimg_library::CImg
get_load_tiff	CImg.h	/^    static CImgList<T> get_load_tiff(const char *const filename,$/;"	f	struct:cimg_library::CImgList
get_load_yuv	CImg.h	/^    static CImg<T> get_load_yuv(const char *const filename,$/;"	f	struct:cimg_library::CImg
get_load_yuv	CImg.h	/^    static CImg<T> get_load_yuv(std::FILE *const file,$/;"	f	struct:cimg_library::CImg
get_load_yuv	CImg.h	/^    static CImgList<T> get_load_yuv(const char *const filename,$/;"	f	struct:cimg_library::CImgList
get_load_yuv	CImg.h	/^    static CImgList<T> get_load_yuv(std::FILE *const file,$/;"	f	struct:cimg_library::CImgList
get_log	CImg.h	/^    CImg<Tfloat> get_log() const {$/;"	f	struct:cimg_library::CImg
get_log10	CImg.h	/^    CImg<Tfloat> get_log10() const {$/;"	f	struct:cimg_library::CImg
get_map	CImg.h	/^    CImg<t> get_map(const CImg<t>& palette) const {$/;"	f	struct:cimg_library::CImg
get_matrix	CImg.h	/^    CImg<T> get_matrix() const {$/;"	f	struct:cimg_library::CImg
get_matrix_at	CImg.h	/^    CImg<T> get_matrix_at(const unsigned int x=0, const unsigned int y=0, const unsigned int z=0) const {$/;"	f	struct:cimg_library::CImg
get_max	CImg.h	/^    CImg<T> get_max(const T val) const {$/;"	f	struct:cimg_library::CImg
get_max	CImg.h	/^    CImg<Tfloat> get_max(const char *const expression) const {$/;"	f	struct:cimg_library::CImg
get_max	CImg.h	/^    CImg<_cimg_Tt> get_max(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
get_mid	octree.h	/^        point3 get_mid() const { return (rt + lb)\/2.0; }$/;"	f	class:octree_node
get_min	CImg.h	/^    CImg<T> get_min(const T val) const {$/;"	f	struct:cimg_library::CImg
get_min	CImg.h	/^    CImg<Tfloat> get_min(const char *const expression) const {$/;"	f	struct:cimg_library::CImg
get_min	CImg.h	/^    CImg<_cimg_Tt> get_min(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
get_mirror	CImg.h	/^    CImg<T> get_mirror(const char axis) const {$/;"	f	struct:cimg_library::CImg
get_mul	CImg.h	/^    CImg<_cimg_Tt> get_mul(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
get_noise	CImg.h	/^    CImg<T> get_noise(const double sigma, const unsigned int noise_type=0) const {$/;"	f	struct:cimg_library::CImg
get_norm	CImg.h	/^    CImg<Tfloat> get_norm(const int norm_type=2) const {$/;"	f	struct:cimg_library::CImg
get_normal	object.cpp	/^vector3 sphere::get_normal(const point3& pt, const float time, bool bump) const$/;"	f	class:sphere
get_normal	object.h	/^        vector3 get_normal(const point3& pt, const float time, bool bump = false) const { return (pt - get_pos(time)).normalize(); } \/\/ TODO: area light는 triangle처럼 바꿔야 하지 않을까?$/;"	f	class:light
get_normal	triangle.cpp	/^vector3 triangle::get_normal(const point3& pt, const float time, bool bump) const$/;"	f	class:triangle
get_normalize	CImg.h	/^    CImg<Tfloat> get_normalize() const {$/;"	f	struct:cimg_library::CImg
get_normalize	CImg.h	/^    CImg<Tfloat> get_normalize(const T value_min, const T value_max) const {$/;"	f	struct:cimg_library::CImg
get_object3dtoCImg3d	CImg.h	/^    CImg<floatT> get_object3dtoCImg3d() const {$/;"	f	struct:cimg_library::CImg
get_object3dtoCImg3d	CImg.h	/^    CImg<floatT> get_object3dtoCImg3d(const CImgList<tp>& primitives) const {$/;"	f	struct:cimg_library::CImg
get_object3dtoCImg3d	CImg.h	/^    CImg<floatT> get_object3dtoCImg3d(const CImgList<tp>& primitives,$/;"	f	struct:cimg_library::CImg
get_permute_axes	CImg.h	/^    CImg<T> get_permute_axes(const char *const order) const {$/;"	f	struct:cimg_library::CImg
get_plane	object.h	/^        virtual plane_t get_plane(const float time) const { assert(false); return plane_t(); }$/;"	f	class:object
get_plane	object.h	/^        virtual plane_t get_plane(const float time) const$/;"	f	class:sphere
get_plane	triangle.h	/^        virtual plane_t get_plane(const float time) const$/;"	f	class:triangle
get_pos	object.h	/^        point3 get_pos(float time) const { return pos + move_dir*time; }$/;"	f	class:object
get_pow	CImg.h	/^    CImg<Tfloat> get_pow(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
get_pow	CImg.h	/^    CImg<Tfloat> get_pow(const char *const expression) const {$/;"	f	struct:cimg_library::CImg
get_pow	CImg.h	/^    CImg<Tfloat> get_pow(const double p) const {$/;"	f	struct:cimg_library::CImg
get_projections2d	CImg.h	/^    CImg<T> get_projections2d(const unsigned int x0, const unsigned int y0, const unsigned int z0) const {$/;"	f	struct:cimg_library::CImg
get_projections3d	CImg.h	/^    CImg<floatT> get_projections3d(CImgList<tf>& primitives, CImgList<tc>& colors,$/;"	f	struct:cimg_library::CImg
get_pseudoinvert	CImg.h	/^    CImg<Tfloat> get_pseudoinvert() const {$/;"	f	struct:cimg_library::CImg
get_pt	object.h	/^    point3 get_pt() const { return (intersect ? in_ray*dist : point3()); }$/;"	f	struct:intersect_info
get_quantize	CImg.h	/^    CImg<T> get_quantize(const unsigned int n, const bool keep_range=true) const {$/;"	f	struct:cimg_library::CImg
get_rand	CImg.h	/^    CImg<T> get_rand(const T val_min, const T val_max) const {$/;"	f	struct:cimg_library::CImg
get_reflect	common.h	/^inline vector3 get_reflect(const vector3& n, const vector3& u)$/;"	f
get_refract	common.h	/^inline vector3 get_refract(const vector3& n, const vector3& u, const float refr_idx_in, const float refr_idx_refr)$/;"	f
get_remove	CImg.h	/^    CImgList<T> get_remove() const {$/;"	f	struct:cimg_library::CImgList
get_remove	CImg.h	/^    CImgList<T> get_remove(const unsigned int pos) const {$/;"	f	struct:cimg_library::CImgList
get_remove	CImg.h	/^    CImgList<T> get_remove(const unsigned int pos1, const unsigned int pos2) const {$/;"	f	struct:cimg_library::CImgList
get_resize	CImg.h	/^    CImg<T> get_resize(const CImg<t>& src,$/;"	f	struct:cimg_library::CImg
get_resize	CImg.h	/^    CImg<T> get_resize(const CImgDisplay& disp,$/;"	f	struct:cimg_library::CImg
get_resize	CImg.h	/^    CImg<T> get_resize(const int size_x, const int size_y = -100,$/;"	f	struct:cimg_library::CImg
get_resize_doubleXY	CImg.h	/^    CImg<T> get_resize_doubleXY() const {$/;"	f	struct:cimg_library::CImg
get_resize_halfXY	CImg.h	/^    CImg<T> get_resize_halfXY() const {$/;"	f	struct:cimg_library::CImg
get_resize_object3d	CImg.h	/^    CImg<Tfloat> get_resize_object3d() const {$/;"	f	struct:cimg_library::CImg
get_resize_object3d	CImg.h	/^    CImg<Tfloat> get_resize_object3d(const float sx, const float sy=-100, const float sz=-100) const {$/;"	f	struct:cimg_library::CImg
get_resize_tripleXY	CImg.h	/^    CImg<T> get_resize_tripleXY() const {$/;"	f	struct:cimg_library::CImg
get_reverse	CImg.h	/^    CImgList<T> get_reverse() const {$/;"	f	struct:cimg_library::CImgList
get_reverse_object3d	CImg.h	/^    CImgList<T> get_reverse_object3d() const {$/;"	f	struct:cimg_library::CImgList
get_rol	CImg.h	/^    CImg<T> get_rol(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
get_rol	CImg.h	/^    CImg<T> get_rol(const char *const expression) const {$/;"	f	struct:cimg_library::CImg
get_rol	CImg.h	/^    CImg<T> get_rol(const unsigned int n=1) const {$/;"	f	struct:cimg_library::CImg
get_ror	CImg.h	/^    CImg<T> get_ror(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
get_ror	CImg.h	/^    CImg<T> get_ror(const char *const expression) const {$/;"	f	struct:cimg_library::CImg
get_ror	CImg.h	/^    CImg<T> get_ror(const unsigned int n=1) const {$/;"	f	struct:cimg_library::CImg
get_rotate	CImg.h	/^    CImg<T> get_rotate(const float angle, const float cx, const float cy, const float zoom,$/;"	f	struct:cimg_library::CImg
get_rotate	CImg.h	/^    CImg<T> get_rotate(const float angle, const unsigned int border_conditions=0, const unsigned int interpolation=1) const {$/;"	f	struct:cimg_library::CImg
get_round	CImg.h	/^    CImg<T> get_round(const double y=1, const unsigned int rounding_type=0) const {$/;"	f	struct:cimg_library::CImg
get_select	CImg.h	/^    CImg<intT> get_select(CImgDisplay &disp, const bool feature_type=true,$/;"	f	struct:cimg_library::CImgList
get_select	CImg.h	/^    CImg<intT> get_select(CImgDisplay &disp,$/;"	f	struct:cimg_library::CImg
get_select	CImg.h	/^    CImg<intT> get_select(const char *const title, const bool feature_type=true,$/;"	f	struct:cimg_library::CImgList
get_select	CImg.h	/^    CImg<intT> get_select(const char *const title,$/;"	f	struct:cimg_library::CImg
get_select_graph	CImg.h	/^    CImg<intT> get_select_graph(CImgDisplay &disp,$/;"	f	struct:cimg_library::CImg
get_sequence	CImg.h	/^    CImg<T> get_sequence(const T a0, const T a1) const {$/;"	f	struct:cimg_library::CImg
get_shared	CImg.h	/^    CImg<T> get_shared() {$/;"	f	struct:cimg_library::CImg
get_shared	CImg.h	/^    CImgList<T> get_shared() {$/;"	f	struct:cimg_library::CImgList
get_shared	CImg.h	/^    const CImg<T> get_shared() const {$/;"	f	struct:cimg_library::CImg
get_shared	CImg.h	/^    const CImgList<T> get_shared() const {$/;"	f	struct:cimg_library::CImgList
get_shared_channel	CImg.h	/^    CImg<T> get_shared_channel(const unsigned int c0) {$/;"	f	struct:cimg_library::CImg
get_shared_channel	CImg.h	/^    const CImg<T> get_shared_channel(const unsigned int c0) const {$/;"	f	struct:cimg_library::CImg
get_shared_channels	CImg.h	/^    CImg<T> get_shared_channels(const unsigned int c0, const unsigned int c1) {$/;"	f	struct:cimg_library::CImg
get_shared_channels	CImg.h	/^    const CImg<T> get_shared_channels(const unsigned int c0, const unsigned int c1) const {$/;"	f	struct:cimg_library::CImg
get_shared_images	CImg.h	/^    CImgList<T> get_shared_images(const unsigned int i0, const unsigned int i1) {$/;"	f	struct:cimg_library::CImgList
get_shared_images	CImg.h	/^    const CImgList<T> get_shared_images(const unsigned int i0, const unsigned int i1) const {$/;"	f	struct:cimg_library::CImgList
get_shared_line	CImg.h	/^    CImg<T> get_shared_line(const unsigned int y0, const unsigned int z0=0, const unsigned int c0=0) {$/;"	f	struct:cimg_library::CImg
get_shared_line	CImg.h	/^    const CImg<T> get_shared_line(const unsigned int y0, const unsigned int z0=0, const unsigned int c0=0) const {$/;"	f	struct:cimg_library::CImg
get_shared_lines	CImg.h	/^    CImg<T> get_shared_lines(const unsigned int y0, const unsigned int y1,$/;"	f	struct:cimg_library::CImg
get_shared_lines	CImg.h	/^    const CImg<T> get_shared_lines(const unsigned int y0, const unsigned int y1,$/;"	f	struct:cimg_library::CImg
get_shared_plane	CImg.h	/^    CImg<T> get_shared_plane(const unsigned int z0, const unsigned int c0=0) {$/;"	f	struct:cimg_library::CImg
get_shared_plane	CImg.h	/^    const CImg<T> get_shared_plane(const unsigned int z0, const unsigned int c0=0) const {$/;"	f	struct:cimg_library::CImg
get_shared_planes	CImg.h	/^    CImg<T> get_shared_planes(const unsigned int z0, const unsigned int z1, const unsigned int c0=0) {$/;"	f	struct:cimg_library::CImg
get_shared_planes	CImg.h	/^    const CImg<T> get_shared_planes(const unsigned int z0, const unsigned int z1, const unsigned int c0=0) const {$/;"	f	struct:cimg_library::CImg
get_shared_points	CImg.h	/^    CImg<T> get_shared_points(const unsigned int x0, const unsigned int x1,$/;"	f	struct:cimg_library::CImg
get_shared_points	CImg.h	/^    const CImg<T> get_shared_points(const unsigned int x0, const unsigned int x1,$/;"	f	struct:cimg_library::CImg
get_sharpen	CImg.h	/^    CImg<T> get_sharpen(const float amplitude, const bool sharpen_type=false, const float edge=1, const float alpha=0, const float sigma=0) const {$/;"	f	struct:cimg_library::CImg
get_shift	CImg.h	/^    CImg<T> get_shift(const int deltax, const int deltay=0, const int deltaz=0, const int deltac=0,$/;"	f	struct:cimg_library::CImg
get_shift_object3d	CImg.h	/^    CImg<Tfloat> get_shift_object3d() const {$/;"	f	struct:cimg_library::CImg
get_shift_object3d	CImg.h	/^    CImg<Tfloat> get_shift_object3d(const float tx, const float ty=0, const float tz=0) const {$/;"	f	struct:cimg_library::CImg
get_sign	CImg.h	/^    CImg<Tfloat> get_sign() const {$/;"	f	struct:cimg_library::CImg
get_sin	CImg.h	/^    CImg<Tfloat> get_sin() const {$/;"	f	struct:cimg_library::CImg
get_sinc	CImg.h	/^    CImg<Tfloat> get_sinc() const {$/;"	f	struct:cimg_library::CImg
get_sinh	CImg.h	/^    CImg<Tfloat> get_sinh() const {$/;"	f	struct:cimg_library::CImg
get_size	object.h	/^        virtual int get_size() const { return 1; }$/;"	f	class:object
get_size	polyhedron.h	/^        virtual int get_size() const { return triangles.size(); }$/;"	f	class:polyhedron
get_slice	CImg.h	/^    CImg<T> get_slice(const unsigned int z0) const {$/;"	f	struct:cimg_library::CImg
get_slices	CImg.h	/^    CImg<T> get_slices(const unsigned int z0, const unsigned int z1) const {$/;"	f	struct:cimg_library::CImg
get_solve	CImg.h	/^    CImg<_cimg_Ttfloat> get_solve(const CImg<t>& A) const {$/;"	f	struct:cimg_library::CImg
get_solve_tridiagonal	CImg.h	/^    CImg<_cimg_Ttfloat> get_solve_tridiagonal(const CImg<t>& A) const {$/;"	f	struct:cimg_library::CImg
get_sort	CImg.h	/^    CImg<T> get_sort(CImg<t>& permutations, const bool increasing=true) const {$/;"	f	struct:cimg_library::CImg
get_sort	CImg.h	/^    CImg<T> get_sort(const bool increasing=true, const char axis=0) const {$/;"	f	struct:cimg_library::CImg
get_split	CImg.h	/^    CImgList<T> get_split(const CImg<t>& values, const bool keep_values, const bool is_shared) const {$/;"	f	struct:cimg_library::CImg
get_split	CImg.h	/^    CImgList<T> get_split(const T value, const bool keep_values, const bool is_shared) const {$/;"	f	struct:cimg_library::CImg
get_split	CImg.h	/^    CImgList<T> get_split(const char axis, const int nb=0) const {$/;"	f	struct:cimg_library::CImg
get_split	CImg.h	/^    CImgList<T> get_split(const char axis, const int nb=0) const {$/;"	f	struct:cimg_library::CImgList
get_sqr	CImg.h	/^    CImg<Tfloat> get_sqr() const {$/;"	f	struct:cimg_library::CImg
get_sqrt	CImg.h	/^    CImg<Tfloat> get_sqrt() const {$/;"	f	struct:cimg_library::CImg
get_stats	CImg.h	/^    CImg<Tdouble> get_stats(const unsigned int variance_method=1) const {$/;"	f	struct:cimg_library::CImg
get_streamline	CImg.h	/^    CImg<floatT> get_streamline(const float x, const float y, const float z,$/;"	f	struct:cimg_library::CImg
get_structure_tensors	CImg.h	/^    CImg<Tfloat> get_structure_tensors(const unsigned int scheme=2) const {$/;"	f	struct:cimg_library::CImg
get_symmetric_eigen	CImg.h	/^    CImgList<Tfloat> get_symmetric_eigen() const {$/;"	f	struct:cimg_library::CImg
get_tan	CImg.h	/^    CImg<Tfloat> get_tan() const {$/;"	f	struct:cimg_library::CImg
get_tanh	CImg.h	/^    CImg<Tfloat> get_tanh() const {$/;"	f	struct:cimg_library::CImg
get_tensor	CImg.h	/^    CImg<T> get_tensor() const {$/;"	f	struct:cimg_library::CImg
get_tensor_at	CImg.h	/^    CImg<T> get_tensor_at(const unsigned int x, const unsigned int y=0, const unsigned int z=0) const {$/;"	f	struct:cimg_library::CImg
get_texture	object.cpp	/^vector3 object::get_texture(const point3& pt) const$/;"	f	class:object
get_threshold	CImg.h	/^    CImg<T> get_threshold(const T value, const bool soft_threshold=false, const bool strict_threshold=false) const {$/;"	f	struct:cimg_library::CImg
get_transpose	CImg.h	/^    CImg<T> get_transpose() const {$/;"	f	struct:cimg_library::CImg
get_unroll	CImg.h	/^    CImg<T> get_unroll(const char axis) const {$/;"	f	struct:cimg_library::CImg
get_vector	CImg.h	/^    CImg<T> get_vector() const {$/;"	f	struct:cimg_library::CImg
get_vector_at	CImg.h	/^    CImg<T> get_vector_at(const unsigned int x, const unsigned int y=0, const unsigned int z=0) const {$/;"	f	struct:cimg_library::CImg
get_warp	CImg.h	/^    CImg<T> get_warp(const CImg<t>& warp, const bool is_relative=false,$/;"	f	struct:cimg_library::CImg
get_watershed	CImg.h	/^    CImg<T> get_watershed(const CImg<t>& priority, const bool fill_lines=true) const {$/;"	f	struct:cimg_library::CImg
get_xyYtoRGB	CImg.h	/^    CImg<Tuchar> get_xyYtoRGB() const {$/;"	f	struct:cimg_library::CImg
get_xyYtoXYZ	CImg.h	/^    CImg<Tfloat> get_xyYtoXYZ() const {$/;"	f	struct:cimg_library::CImg
getline_and_ss	obj_file.cpp	/^string getline_and_ss(fstream& fs)$/;"	f
getrf	CImg.h	/^    inline void getrf(int &N, T *lapA, int *IPIV, int &INFO) {$/;"	f	namespace:cimg_library::cimg
getrf	CImg.h	/^    inline void getrf(int &N, float *lapA, int *IPIV, int &INFO) {$/;"	f	namespace:cimg_library::cimg
getri	CImg.h	/^    inline void getri(int &N, T *lapA, int *IPIV, T* WORK, int &LWORK, int &INFO) {$/;"	f	namespace:cimg_library::cimg
getri	CImg.h	/^    inline void getri(int &N, float *lapA, int *IPIV, float* WORK, int &LWORK, int &INFO) {$/;"	f	namespace:cimg_library::cimg
getrs	CImg.h	/^    inline void getrs(char &TRANS, int &N, T *lapA, int *IPIV, T *lapB, int &INFO) {$/;"	f	namespace:cimg_library::cimg
getrs	CImg.h	/^    inline void getrs(char &TRANS, int &N, float *lapA, int *IPIV, float *lapB, int &INFO) {$/;"	f	namespace:cimg_library::cimg
grand	CImg.h	/^    inline double grand() {$/;"	f	namespace:cimg_library::cimg
graphicsmagick_path	CImg.h	/^    inline const char* graphicsmagick_path(const char *const user_path=0, const bool reinit_path=false) {$/;"	f	namespace:cimg_library::cimg
gunzip_path	CImg.h	/^    inline const char *gunzip_path(const char *const user_path=0, const bool reinit_path=false) {$/;"	f	namespace:cimg_library::cimg
gzip_path	CImg.h	/^    inline const char *gzip_path(const char *const user_path=0, const bool reinit_path=false) {$/;"	f	namespace:cimg_library::cimg
haar	CImg.h	/^    CImg<T>& haar(const bool invert=false, const unsigned int nb_scales=1) {$/;"	f	struct:cimg_library::CImg
haar	CImg.h	/^    CImg<T>& haar(const char axis, const bool invert=false, const unsigned int nb_scales=1) {$/;"	f	struct:cimg_library::CImg
height	CImg.h	/^    int height() const {$/;"	f	struct:cimg_library::CImg
height	CImg.h	/^    int height() const {$/;"	f	struct:cimg_library::CImgDisplay
hide_mouse	CImg.h	/^    CImgDisplay& hide_mouse() {$/;"	f	struct:cimg_library::CImgDisplay
histogram	CImg.h	/^    CImg<T>& histogram(const unsigned int nb_levels, const T value_min=(T)0, const T value_max=(T)0) {$/;"	f	struct:cimg_library::CImg
hot_LUT256	CImg.h	/^    static const CImg<Tuchar>& hot_LUT256() {$/;"	f	struct:cimg_library::CImg
icosahedron	polyhedron.h	/^typedef polyhedron<20> icosahedron;$/;"	t
id	CImg.h	/^      static unsigned int id() { return 0U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 10U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 11U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 12U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 1U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 2U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 3U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 4U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 5U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 6U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 7U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 8U; }$/;"	f	struct:cimg_library::cimg::type
id	CImg.h	/^      static unsigned int id() { return 9U; }$/;"	f	struct:cimg_library::cimg::type
identity_matrix	CImg.h	/^    CImg<T>& identity_matrix() {$/;"	f	struct:cimg_library::CImg
identity_matrix	CImg.h	/^    static CImg<T> identity_matrix(const unsigned int N) {$/;"	f	struct:cimg_library::CImg
image	ray_tracer.h	/^        std::vector<std::vector<vector3>> image;$/;"	m	class:ray_tracer
imagemagick_path	CImg.h	/^    inline const char* imagemagick_path(const char *const user_path=0, const bool reinit_path=false) {$/;"	f	namespace:cimg_library::cimg
images	CImg.h	/^    CImgList<T>& images(const unsigned int i0, const unsigned int i1) {$/;"	f	struct:cimg_library::CImgList
in_ray	object.h	/^    ray in_ray;$/;"	m	struct:intersect_info
in_ray	ray_tracer.h	/^    ray in_ray;$/;"	m	class:ray_tree_node
index	CImg.h	/^    CImg<T>& index(const CImg<t>& palette, const bool dithering=false, const bool map_indexes=false) {$/;"	f	struct:cimg_library::CImg
inf	CImg.h	/^      static double inf() { return max()*max(); }$/;"	f	struct:cimg_library::cimg::type
inf	CImg.h	/^      static float inf() { return (float)cimg::type<double>::inf(); }$/;"	f	struct:cimg_library::cimg::type
info	CImg.h	/^    inline void info() {$/;"	f	namespace:cimg_library::cimg
init	hw5.cpp	/^void init(void)$/;"	f
init	hw5_backup.cpp	/^void init(void)$/;"	f
insert	CImg.h	/^    CImgList<T>& insert(const CImg<T>& img, const unsigned int pos=~0U, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
insert	CImg.h	/^    CImgList<T>& insert(const CImg<t>& img, const unsigned int pos=~0U, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
insert	CImg.h	/^    CImgList<T>& insert(const CImgList<t>& list, const unsigned int pos=~0U, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
insert	CImg.h	/^    CImgList<T>& insert(const unsigned int n, const CImg<t>& img, const unsigned int pos=~0U, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
insert	CImg.h	/^    CImgList<T>& insert(const unsigned int n, const CImgList<t>& list, const unsigned int pos=~0U, const bool shared=false) {$/;"	f	struct:cimg_library::CImgList
insert	CImg.h	/^    CImgList<T>& insert(const unsigned int n, const unsigned int pos=~0U) {$/;"	f	struct:cimg_library::CImgList
intT	CImg.h	/^    typedef typename cimg::last<T,int>::type intT;$/;"	t	struct:cimg_library::CImg
intT	CImg.h	/^    typedef typename cimg::last<T,int>::type intT;$/;"	t	struct:cimg_library::CImgList
intensity	object.h	/^        vector3 intensity;$/;"	m	class:light
intersect	bsp_tree.cpp	/^    int intersect;$/;"	m	struct:data	file:
intersect	bsp_tree.h	/^        std::vector<std::shared_ptr<const object>> intersect;$/;"	m	class:bsp_tree_node
intersect	object.h	/^    bool intersect;$/;"	m	struct:intersect_info
intersect_info	object.h	/^    intersect_info(const ray& in_ray)$/;"	f	struct:intersect_info
intersect_info	object.h	/^struct intersect_info$/;"	s
invert	CImg.h	/^    CImg<T>& invert(const bool use_LU=true) {$/;"	f	struct:cimg_library::CImg
invert	CImg.h	/^  inline CImg<_cimg_Tfloat> invert(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
invert_endianness	CImg.h	/^    CImg<T>& invert_endianness() {$/;"	f	struct:cimg_library::CImg
invert_endianness	CImg.h	/^    inline T& invert_endianness(T& a) {$/;"	f	namespace:cimg_library::cimg
invert_endianness	CImg.h	/^    inline void invert_endianness(T* const buffer, const unsigned int size) {$/;"	f	namespace:cimg_library::cimg
inverted_xy	triangle.h	/^        bool inverted_xy; \/\/ quad 등을 만들 때 xy축 방향이 반대인 triangle. v[2] - v[1] -> -x$/;"	m	class:triangle
is_CImg3d	CImg.h	/^    bool is_CImg3d(const bool full_check=true, char *const error_message=0) const {$/;"	f	struct:cimg_library::CImg
is_blue_first	CImg.h	/^      bool             is_blue_first;$/;"	m	struct:cimg_library::cimg::X11_info
is_closed	CImg.h	/^    bool is_closed() const {$/;"	f	struct:cimg_library::CImgDisplay
is_empty	CImg.h	/^    bool is_empty() const {$/;"	f	struct:cimg_library::CImg
is_empty	CImg.h	/^    bool is_empty() const {$/;"	f	struct:cimg_library::CImgDisplay
is_empty	CImg.h	/^    bool is_empty() const {$/;"	f	struct:cimg_library::CImgList
is_event	CImg.h	/^    bool is_event() const {$/;"	f	struct:cimg_library::CImgDisplay
is_float	CImg.h	/^      static bool is_float() { return false; }$/;"	f	struct:cimg_library::cimg::type
is_float	CImg.h	/^      static bool is_float() { return true; }$/;"	f	struct:cimg_library::cimg::type
is_fullscreen	CImg.h	/^    bool is_fullscreen() const {$/;"	f	struct:cimg_library::CImgDisplay
is_key	CImg.h	/^    bool is_key() const {$/;"	f	struct:cimg_library::CImgDisplay
is_key	CImg.h	/^    bool is_key(const char *const textcode) const {$/;"	f	struct:cimg_library::CImgDisplay
is_key	CImg.h	/^    bool is_key(const unsigned int key) const {$/;"	f	struct:cimg_library::CImgDisplay
is_key_sequence	CImg.h	/^    bool is_key_sequence(const unsigned int *const key_sequence, const unsigned int length, const bool remove_sequence=false) {$/;"	f	struct:cimg_library::CImgDisplay
is_moved	CImg.h	/^    bool is_moved() const {$/;"	f	struct:cimg_library::CImgDisplay
is_object3d	CImg.h	/^    bool is_object3d(const CImgList<tp>& primitives,$/;"	f	struct:cimg_library::CImg
is_overlapped	CImg.h	/^    bool is_overlapped(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_pt_in	octree.h	/^        bool is_pt_in(const point3& pt) const { return (pt <= rt && pt >= lb); }$/;"	f	class:octree_node
is_ray_in	octree.h	/^        bool is_ray_in(const ray& eye_ray) const$/;"	f	class:octree_node
is_resized	CImg.h	/^    bool is_resized() const {$/;"	f	struct:cimg_library::CImgDisplay
is_sameC	CImg.h	/^    bool is_sameC(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameC	CImg.h	/^    bool is_sameC(const unsigned int dc) const {$/;"	f	struct:cimg_library::CImg
is_sameN	CImg.h	/^    bool is_sameN(const CImgList<t>& list) const {$/;"	f	struct:cimg_library::CImgList
is_sameN	CImg.h	/^    bool is_sameN(const unsigned int n) const {$/;"	f	struct:cimg_library::CImgList
is_sameNXYZC	CImg.h	/^    bool is_sameNXYZC(const unsigned int n, const unsigned int dx, const unsigned int dy, const unsigned int dz, const unsigned int dc) const {$/;"	f	struct:cimg_library::CImgList
is_sameX	CImg.h	/^    bool is_sameX(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameX	CImg.h	/^    bool is_sameX(const CImgDisplay& disp) const {$/;"	f	struct:cimg_library::CImg
is_sameX	CImg.h	/^    bool is_sameX(const unsigned int dx) const {$/;"	f	struct:cimg_library::CImg
is_sameXC	CImg.h	/^    bool is_sameXC(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameXC	CImg.h	/^    bool is_sameXC(const unsigned int dx, const unsigned int dc) const {$/;"	f	struct:cimg_library::CImg
is_sameXY	CImg.h	/^    bool is_sameXY(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameXY	CImg.h	/^    bool is_sameXY(const CImgDisplay& disp) const {$/;"	f	struct:cimg_library::CImg
is_sameXY	CImg.h	/^    bool is_sameXY(const unsigned int dx, const unsigned int dy) const {$/;"	f	struct:cimg_library::CImg
is_sameXYC	CImg.h	/^    bool is_sameXYC(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameXYC	CImg.h	/^    bool is_sameXYC(const unsigned int dx, const unsigned int dy, const unsigned int dc) const {$/;"	f	struct:cimg_library::CImg
is_sameXYZ	CImg.h	/^    bool is_sameXYZ(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameXYZ	CImg.h	/^    bool is_sameXYZ(const unsigned int dx, const unsigned int dy, const unsigned int dz) const {$/;"	f	struct:cimg_library::CImg
is_sameXYZC	CImg.h	/^    bool is_sameXYZC(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameXYZC	CImg.h	/^    bool is_sameXYZC(const unsigned int dx, const unsigned int dy, const unsigned int dz, const unsigned int dc) const {$/;"	f	struct:cimg_library::CImg
is_sameXYZC	CImg.h	/^    bool is_sameXYZC(const unsigned int dx, const unsigned int dy, const unsigned int dz, const unsigned int dc) const {$/;"	f	struct:cimg_library::CImgList
is_sameXZ	CImg.h	/^    bool is_sameXZ(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameXZ	CImg.h	/^    bool is_sameXZ(const unsigned int dx, const unsigned int dz) const {$/;"	f	struct:cimg_library::CImg
is_sameXZC	CImg.h	/^    bool is_sameXZC(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameXZC	CImg.h	/^    bool is_sameXZC(const unsigned int dx, const unsigned int dz, const unsigned int dc) const {$/;"	f	struct:cimg_library::CImg
is_sameY	CImg.h	/^    bool is_sameY(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameY	CImg.h	/^    bool is_sameY(const CImgDisplay& disp) const {$/;"	f	struct:cimg_library::CImg
is_sameY	CImg.h	/^    bool is_sameY(const unsigned int dy) const {$/;"	f	struct:cimg_library::CImg
is_sameYC	CImg.h	/^    bool is_sameYC(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameYC	CImg.h	/^    bool is_sameYC(const unsigned int dy, const unsigned int dc) const {$/;"	f	struct:cimg_library::CImg
is_sameYZ	CImg.h	/^    bool is_sameYZ(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameYZ	CImg.h	/^    bool is_sameYZ(const unsigned int dy, const unsigned int dz) const {$/;"	f	struct:cimg_library::CImg
is_sameYZC	CImg.h	/^    bool is_sameYZC(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameYZC	CImg.h	/^    bool is_sameYZC(const unsigned int dy, const unsigned int dz, const unsigned int dc) const {$/;"	f	struct:cimg_library::CImg
is_sameZ	CImg.h	/^    bool is_sameZ(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameZ	CImg.h	/^    bool is_sameZ(const unsigned int dz) const {$/;"	f	struct:cimg_library::CImg
is_sameZC	CImg.h	/^    bool is_sameZC(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
is_sameZC	CImg.h	/^    bool is_sameZC(const unsigned int dz, const unsigned int dc) const {$/;"	f	struct:cimg_library::CImg
is_saveable	CImg.h	/^    static bool is_saveable(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
is_shared	CImg.h	/^    bool is_shared() const {$/;"	f	struct:cimg_library::CImg
is_shm_enabled	CImg.h	/^      bool             is_shm_enabled;$/;"	m	struct:cimg_library::cimg::X11_info
is_sphere	object.h	/^        virtual bool is_sphere() const { return false; }$/;"	f	class:object
is_sphere	object.h	/^        virtual bool is_sphere() const { return true; }$/;"	f	class:sphere
isoline3d	CImg.h	/^    static CImg<floatT> isoline3d(CImgList<tf>& primitives, const char *const expression, const float isovalue,$/;"	f	struct:cimg_library::CImg
isoline3d	CImg.h	/^    static CImg<floatT> isoline3d(CImgList<tf>& primitives, const tfunc& func, const float isovalue,$/;"	f	struct:cimg_library::CImg
isosurface3d	CImg.h	/^    static CImg<floatT> isosurface3d(CImgList<tf>& primitives, const char *const expression, const float isovalue,$/;"	f	struct:cimg_library::CImg
isosurface3d	CImg.h	/^    static CImg<floatT> isosurface3d(CImgList<tf>& primitives, const tfunc& func, const float isovalue,$/;"	f	struct:cimg_library::CImg
iterator	CImg.h	/^    typedef CImg<T>* iterator;$/;"	t	struct:cimg_library::CImgList
iterator	CImg.h	/^    typedef T* iterator;$/;"	t	struct:cimg_library::CImg
jet_LUT256	CImg.h	/^    static const CImg<Tuchar>& jet_LUT256() {$/;"	f	struct:cimg_library::CImg
key	CImg.h	/^    unsigned int key(const unsigned int pos=0) const {$/;"	f	struct:cimg_library::CImgDisplay
key0	CImg.h	/^    const unsigned int key0          = '0';$/;"	m	namespace:cimg_library::cimg
key0	CImg.h	/^    const unsigned int key0          = 24U;$/;"	m	namespace:cimg_library::cimg
key0	CImg.h	/^    const unsigned int key0          = XK_0;$/;"	m	namespace:cimg_library::cimg
key1	CImg.h	/^    const unsigned int key1          = '1';$/;"	m	namespace:cimg_library::cimg
key1	CImg.h	/^    const unsigned int key1          = 15U;$/;"	m	namespace:cimg_library::cimg
key1	CImg.h	/^    const unsigned int key1          = XK_1;$/;"	m	namespace:cimg_library::cimg
key2	CImg.h	/^    const unsigned int key2          = '2';$/;"	m	namespace:cimg_library::cimg
key2	CImg.h	/^    const unsigned int key2          = 16U;$/;"	m	namespace:cimg_library::cimg
key2	CImg.h	/^    const unsigned int key2          = XK_2;$/;"	m	namespace:cimg_library::cimg
key3	CImg.h	/^    const unsigned int key3          = '3';$/;"	m	namespace:cimg_library::cimg
key3	CImg.h	/^    const unsigned int key3          = 17U;$/;"	m	namespace:cimg_library::cimg
key3	CImg.h	/^    const unsigned int key3          = XK_3;$/;"	m	namespace:cimg_library::cimg
key4	CImg.h	/^    const unsigned int key4          = '4';$/;"	m	namespace:cimg_library::cimg
key4	CImg.h	/^    const unsigned int key4          = 18U;$/;"	m	namespace:cimg_library::cimg
key4	CImg.h	/^    const unsigned int key4          = XK_4;$/;"	m	namespace:cimg_library::cimg
key5	CImg.h	/^    const unsigned int key5          = '5';$/;"	m	namespace:cimg_library::cimg
key5	CImg.h	/^    const unsigned int key5          = 19U;$/;"	m	namespace:cimg_library::cimg
key5	CImg.h	/^    const unsigned int key5          = XK_5;$/;"	m	namespace:cimg_library::cimg
key6	CImg.h	/^    const unsigned int key6          = '6';$/;"	m	namespace:cimg_library::cimg
key6	CImg.h	/^    const unsigned int key6          = 20U;$/;"	m	namespace:cimg_library::cimg
key6	CImg.h	/^    const unsigned int key6          = XK_6;$/;"	m	namespace:cimg_library::cimg
key7	CImg.h	/^    const unsigned int key7          = '7';$/;"	m	namespace:cimg_library::cimg
key7	CImg.h	/^    const unsigned int key7          = 21U;$/;"	m	namespace:cimg_library::cimg
key7	CImg.h	/^    const unsigned int key7          = XK_7;$/;"	m	namespace:cimg_library::cimg
key8	CImg.h	/^    const unsigned int key8          = '8';$/;"	m	namespace:cimg_library::cimg
key8	CImg.h	/^    const unsigned int key8          = 22U;$/;"	m	namespace:cimg_library::cimg
key8	CImg.h	/^    const unsigned int key8          = XK_8;$/;"	m	namespace:cimg_library::cimg
key9	CImg.h	/^    const unsigned int key9          = '9';$/;"	m	namespace:cimg_library::cimg
key9	CImg.h	/^    const unsigned int key9          = 23U;$/;"	m	namespace:cimg_library::cimg
key9	CImg.h	/^    const unsigned int key9          = XK_9;$/;"	m	namespace:cimg_library::cimg
keyA	CImg.h	/^    const unsigned int keyA          = 'A';$/;"	m	namespace:cimg_library::cimg
keyA	CImg.h	/^    const unsigned int keyA          = 44U;$/;"	m	namespace:cimg_library::cimg
keyA	CImg.h	/^    const unsigned int keyA          = XK_a;$/;"	m	namespace:cimg_library::cimg
keyALT	CImg.h	/^    const unsigned int keyALT        = 66U;$/;"	m	namespace:cimg_library::cimg
keyALT	CImg.h	/^    const unsigned int keyALT        = VK_LMENU;$/;"	m	namespace:cimg_library::cimg
keyALT	CImg.h	/^    const unsigned int keyALT        = XK_Alt_L;$/;"	m	namespace:cimg_library::cimg
keyALTGR	CImg.h	/^    const unsigned int keyALTGR      = 68U;$/;"	m	namespace:cimg_library::cimg
keyALTGR	CImg.h	/^    const unsigned int keyALTGR      = VK_CONTROL;$/;"	m	namespace:cimg_library::cimg
keyALTGR	CImg.h	/^    const unsigned int keyALTGR      = XK_Alt_R;$/;"	m	namespace:cimg_library::cimg
keyAPPLEFT	CImg.h	/^    const unsigned int keyAPPLEFT    = 65U;$/;"	m	namespace:cimg_library::cimg
keyAPPLEFT	CImg.h	/^    const unsigned int keyAPPLEFT    = VK_LWIN;$/;"	m	namespace:cimg_library::cimg
keyAPPLEFT	CImg.h	/^    const unsigned int keyAPPLEFT    = XK_Super_L;$/;"	m	namespace:cimg_library::cimg
keyAPPRIGHT	CImg.h	/^    const unsigned int keyAPPRIGHT   = 69U;$/;"	m	namespace:cimg_library::cimg
keyAPPRIGHT	CImg.h	/^    const unsigned int keyAPPRIGHT   = VK_RWIN;$/;"	m	namespace:cimg_library::cimg
keyAPPRIGHT	CImg.h	/^    const unsigned int keyAPPRIGHT   = XK_Super_R;$/;"	m	namespace:cimg_library::cimg
keyARROWDOWN	CImg.h	/^    const unsigned int keyARROWDOWN  = 73U;$/;"	m	namespace:cimg_library::cimg
keyARROWDOWN	CImg.h	/^    const unsigned int keyARROWDOWN  = VK_DOWN;$/;"	m	namespace:cimg_library::cimg
keyARROWDOWN	CImg.h	/^    const unsigned int keyARROWDOWN  = XK_Down;$/;"	m	namespace:cimg_library::cimg
keyARROWLEFT	CImg.h	/^    const unsigned int keyARROWLEFT  = 72U;$/;"	m	namespace:cimg_library::cimg
keyARROWLEFT	CImg.h	/^    const unsigned int keyARROWLEFT  = VK_LEFT;$/;"	m	namespace:cimg_library::cimg
keyARROWLEFT	CImg.h	/^    const unsigned int keyARROWLEFT  = XK_Left;$/;"	m	namespace:cimg_library::cimg
keyARROWRIGHT	CImg.h	/^    const unsigned int keyARROWRIGHT = 74U;$/;"	m	namespace:cimg_library::cimg
keyARROWRIGHT	CImg.h	/^    const unsigned int keyARROWRIGHT = VK_RIGHT;$/;"	m	namespace:cimg_library::cimg
keyARROWRIGHT	CImg.h	/^    const unsigned int keyARROWRIGHT = XK_Right;$/;"	m	namespace:cimg_library::cimg
keyARROWUP	CImg.h	/^    const unsigned int keyARROWUP    = 63U;$/;"	m	namespace:cimg_library::cimg
keyARROWUP	CImg.h	/^    const unsigned int keyARROWUP    = VK_UP;$/;"	m	namespace:cimg_library::cimg
keyARROWUP	CImg.h	/^    const unsigned int keyARROWUP    = XK_Up;$/;"	m	namespace:cimg_library::cimg
keyB	CImg.h	/^    const unsigned int keyB          = 'B';$/;"	m	namespace:cimg_library::cimg
keyB	CImg.h	/^    const unsigned int keyB          = 59U;$/;"	m	namespace:cimg_library::cimg
keyB	CImg.h	/^    const unsigned int keyB          = XK_b;$/;"	m	namespace:cimg_library::cimg
keyBACKSPACE	CImg.h	/^    const unsigned int keyBACKSPACE  = 25U;$/;"	m	namespace:cimg_library::cimg
keyBACKSPACE	CImg.h	/^    const unsigned int keyBACKSPACE  = VK_BACK;$/;"	m	namespace:cimg_library::cimg
keyBACKSPACE	CImg.h	/^    const unsigned int keyBACKSPACE  = XK_BackSpace;$/;"	m	namespace:cimg_library::cimg
keyC	CImg.h	/^    const unsigned int keyC          = 'C';$/;"	m	namespace:cimg_library::cimg
keyC	CImg.h	/^    const unsigned int keyC          = 57U;$/;"	m	namespace:cimg_library::cimg
keyC	CImg.h	/^    const unsigned int keyC          = XK_c;$/;"	m	namespace:cimg_library::cimg
keyCAPSLOCK	CImg.h	/^    const unsigned int keyCAPSLOCK   = 43U;$/;"	m	namespace:cimg_library::cimg
keyCAPSLOCK	CImg.h	/^    const unsigned int keyCAPSLOCK   = VK_CAPITAL;$/;"	m	namespace:cimg_library::cimg
keyCAPSLOCK	CImg.h	/^    const unsigned int keyCAPSLOCK   = XK_Caps_Lock;$/;"	m	namespace:cimg_library::cimg
keyCTRLLEFT	CImg.h	/^    const unsigned int keyCTRLLEFT   = 64U;$/;"	m	namespace:cimg_library::cimg
keyCTRLLEFT	CImg.h	/^    const unsigned int keyCTRLLEFT   = VK_CONTROL;$/;"	m	namespace:cimg_library::cimg
keyCTRLLEFT	CImg.h	/^    const unsigned int keyCTRLLEFT   = XK_Control_L;$/;"	m	namespace:cimg_library::cimg
keyCTRLRIGHT	CImg.h	/^    const unsigned int keyCTRLRIGHT  = 71U;$/;"	m	namespace:cimg_library::cimg
keyCTRLRIGHT	CImg.h	/^    const unsigned int keyCTRLRIGHT  = VK_CONTROL;$/;"	m	namespace:cimg_library::cimg
keyCTRLRIGHT	CImg.h	/^    const unsigned int keyCTRLRIGHT  = XK_Control_R;$/;"	m	namespace:cimg_library::cimg
keyD	CImg.h	/^    const unsigned int keyD          = 'D';$/;"	m	namespace:cimg_library::cimg
keyD	CImg.h	/^    const unsigned int keyD          = 46U;$/;"	m	namespace:cimg_library::cimg
keyD	CImg.h	/^    const unsigned int keyD          = XK_d;$/;"	m	namespace:cimg_library::cimg
keyDELETE	CImg.h	/^    const unsigned int keyDELETE     = 40U;$/;"	m	namespace:cimg_library::cimg
keyDELETE	CImg.h	/^    const unsigned int keyDELETE     = VK_DELETE;$/;"	m	namespace:cimg_library::cimg
keyDELETE	CImg.h	/^    const unsigned int keyDELETE     = XK_Delete;$/;"	m	namespace:cimg_library::cimg
keyE	CImg.h	/^    const unsigned int keyE          = 'E';$/;"	m	namespace:cimg_library::cimg
keyE	CImg.h	/^    const unsigned int keyE          = 32U;$/;"	m	namespace:cimg_library::cimg
keyE	CImg.h	/^    const unsigned int keyE          = XK_e;$/;"	m	namespace:cimg_library::cimg
keyEND	CImg.h	/^    const unsigned int keyEND        = 41U;$/;"	m	namespace:cimg_library::cimg
keyEND	CImg.h	/^    const unsigned int keyEND        = VK_END;$/;"	m	namespace:cimg_library::cimg
keyEND	CImg.h	/^    const unsigned int keyEND        = XK_End;$/;"	m	namespace:cimg_library::cimg
keyENTER	CImg.h	/^    const unsigned int keyENTER      = 53U;$/;"	m	namespace:cimg_library::cimg
keyENTER	CImg.h	/^    const unsigned int keyENTER      = VK_RETURN;$/;"	m	namespace:cimg_library::cimg
keyENTER	CImg.h	/^    const unsigned int keyENTER      = XK_Return;$/;"	m	namespace:cimg_library::cimg
keyESC	CImg.h	/^    const unsigned int keyESC        = 1U;$/;"	m	namespace:cimg_library::cimg
keyESC	CImg.h	/^    const unsigned int keyESC        = VK_ESCAPE;$/;"	m	namespace:cimg_library::cimg
keyESC	CImg.h	/^    const unsigned int keyESC        = XK_Escape;$/;"	m	namespace:cimg_library::cimg
keyF	CImg.h	/^    const unsigned int keyF          = 'F';$/;"	m	namespace:cimg_library::cimg
keyF	CImg.h	/^    const unsigned int keyF          = 47U;$/;"	m	namespace:cimg_library::cimg
keyF	CImg.h	/^    const unsigned int keyF          = XK_f;$/;"	m	namespace:cimg_library::cimg
keyF1	CImg.h	/^    const unsigned int keyF1         = 2U;$/;"	m	namespace:cimg_library::cimg
keyF1	CImg.h	/^    const unsigned int keyF1         = VK_F1;$/;"	m	namespace:cimg_library::cimg
keyF1	CImg.h	/^    const unsigned int keyF1         = XK_F1;$/;"	m	namespace:cimg_library::cimg
keyF10	CImg.h	/^    const unsigned int keyF10        = 11U;$/;"	m	namespace:cimg_library::cimg
keyF10	CImg.h	/^    const unsigned int keyF10        = VK_F10;$/;"	m	namespace:cimg_library::cimg
keyF10	CImg.h	/^    const unsigned int keyF10        = XK_F10;$/;"	m	namespace:cimg_library::cimg
keyF11	CImg.h	/^    const unsigned int keyF11        = 12U;$/;"	m	namespace:cimg_library::cimg
keyF11	CImg.h	/^    const unsigned int keyF11        = VK_F11;$/;"	m	namespace:cimg_library::cimg
keyF11	CImg.h	/^    const unsigned int keyF11        = XK_F11;$/;"	m	namespace:cimg_library::cimg
keyF12	CImg.h	/^    const unsigned int keyF12        = 13U;$/;"	m	namespace:cimg_library::cimg
keyF12	CImg.h	/^    const unsigned int keyF12        = VK_F12;$/;"	m	namespace:cimg_library::cimg
keyF12	CImg.h	/^    const unsigned int keyF12        = XK_F12;$/;"	m	namespace:cimg_library::cimg
keyF2	CImg.h	/^    const unsigned int keyF2         = 3U;$/;"	m	namespace:cimg_library::cimg
keyF2	CImg.h	/^    const unsigned int keyF2         = VK_F2;$/;"	m	namespace:cimg_library::cimg
keyF2	CImg.h	/^    const unsigned int keyF2         = XK_F2;$/;"	m	namespace:cimg_library::cimg
keyF3	CImg.h	/^    const unsigned int keyF3         = 4U;$/;"	m	namespace:cimg_library::cimg
keyF3	CImg.h	/^    const unsigned int keyF3         = VK_F3;$/;"	m	namespace:cimg_library::cimg
keyF3	CImg.h	/^    const unsigned int keyF3         = XK_F3;$/;"	m	namespace:cimg_library::cimg
keyF4	CImg.h	/^    const unsigned int keyF4         = 5U;$/;"	m	namespace:cimg_library::cimg
keyF4	CImg.h	/^    const unsigned int keyF4         = VK_F4;$/;"	m	namespace:cimg_library::cimg
keyF4	CImg.h	/^    const unsigned int keyF4         = XK_F4;$/;"	m	namespace:cimg_library::cimg
keyF5	CImg.h	/^    const unsigned int keyF5         = 6U;$/;"	m	namespace:cimg_library::cimg
keyF5	CImg.h	/^    const unsigned int keyF5         = VK_F5;$/;"	m	namespace:cimg_library::cimg
keyF5	CImg.h	/^    const unsigned int keyF5         = XK_F5;$/;"	m	namespace:cimg_library::cimg
keyF6	CImg.h	/^    const unsigned int keyF6         = 7U;$/;"	m	namespace:cimg_library::cimg
keyF6	CImg.h	/^    const unsigned int keyF6         = VK_F6;$/;"	m	namespace:cimg_library::cimg
keyF6	CImg.h	/^    const unsigned int keyF6         = XK_F6;$/;"	m	namespace:cimg_library::cimg
keyF7	CImg.h	/^    const unsigned int keyF7         = 8U;$/;"	m	namespace:cimg_library::cimg
keyF7	CImg.h	/^    const unsigned int keyF7         = VK_F7;$/;"	m	namespace:cimg_library::cimg
keyF7	CImg.h	/^    const unsigned int keyF7         = XK_F7;$/;"	m	namespace:cimg_library::cimg
keyF8	CImg.h	/^    const unsigned int keyF8         = 9U;$/;"	m	namespace:cimg_library::cimg
keyF8	CImg.h	/^    const unsigned int keyF8         = VK_F8;$/;"	m	namespace:cimg_library::cimg
keyF8	CImg.h	/^    const unsigned int keyF8         = XK_F8;$/;"	m	namespace:cimg_library::cimg
keyF9	CImg.h	/^    const unsigned int keyF9         = 10U;$/;"	m	namespace:cimg_library::cimg
keyF9	CImg.h	/^    const unsigned int keyF9         = VK_F9;$/;"	m	namespace:cimg_library::cimg
keyF9	CImg.h	/^    const unsigned int keyF9         = XK_F9;$/;"	m	namespace:cimg_library::cimg
keyG	CImg.h	/^    const unsigned int keyG          = 'G';$/;"	m	namespace:cimg_library::cimg
keyG	CImg.h	/^    const unsigned int keyG          = 48U;$/;"	m	namespace:cimg_library::cimg
keyG	CImg.h	/^    const unsigned int keyG          = XK_g;$/;"	m	namespace:cimg_library::cimg
keyH	CImg.h	/^    const unsigned int keyH          = 'H';$/;"	m	namespace:cimg_library::cimg
keyH	CImg.h	/^    const unsigned int keyH          = 49U;$/;"	m	namespace:cimg_library::cimg
keyH	CImg.h	/^    const unsigned int keyH          = XK_h;$/;"	m	namespace:cimg_library::cimg
keyHOME	CImg.h	/^    const unsigned int keyHOME       = 27U;$/;"	m	namespace:cimg_library::cimg
keyHOME	CImg.h	/^    const unsigned int keyHOME       = VK_HOME;$/;"	m	namespace:cimg_library::cimg
keyHOME	CImg.h	/^    const unsigned int keyHOME       = XK_Home;$/;"	m	namespace:cimg_library::cimg
keyI	CImg.h	/^    const unsigned int keyI          = 'I';$/;"	m	namespace:cimg_library::cimg
keyI	CImg.h	/^    const unsigned int keyI          = 37U;$/;"	m	namespace:cimg_library::cimg
keyI	CImg.h	/^    const unsigned int keyI          = XK_i;$/;"	m	namespace:cimg_library::cimg
keyINSERT	CImg.h	/^    const unsigned int keyINSERT     = 26U;$/;"	m	namespace:cimg_library::cimg
keyINSERT	CImg.h	/^    const unsigned int keyINSERT     = VK_INSERT;$/;"	m	namespace:cimg_library::cimg
keyINSERT	CImg.h	/^    const unsigned int keyINSERT     = XK_Insert;$/;"	m	namespace:cimg_library::cimg
keyJ	CImg.h	/^    const unsigned int keyJ          = 'J';$/;"	m	namespace:cimg_library::cimg
keyJ	CImg.h	/^    const unsigned int keyJ          = 50U;$/;"	m	namespace:cimg_library::cimg
keyJ	CImg.h	/^    const unsigned int keyJ          = XK_j;$/;"	m	namespace:cimg_library::cimg
keyK	CImg.h	/^    const unsigned int keyK          = 'K';$/;"	m	namespace:cimg_library::cimg
keyK	CImg.h	/^    const unsigned int keyK          = 51U;$/;"	m	namespace:cimg_library::cimg
keyK	CImg.h	/^    const unsigned int keyK          = XK_k;$/;"	m	namespace:cimg_library::cimg
keyL	CImg.h	/^    const unsigned int keyL          = 'L';$/;"	m	namespace:cimg_library::cimg
keyL	CImg.h	/^    const unsigned int keyL          = 52U;$/;"	m	namespace:cimg_library::cimg
keyL	CImg.h	/^    const unsigned int keyL          = XK_l;$/;"	m	namespace:cimg_library::cimg
keyM	CImg.h	/^    const unsigned int keyM          = 'M';$/;"	m	namespace:cimg_library::cimg
keyM	CImg.h	/^    const unsigned int keyM          = 61U;$/;"	m	namespace:cimg_library::cimg
keyM	CImg.h	/^    const unsigned int keyM          = XK_m;$/;"	m	namespace:cimg_library::cimg
keyMENU	CImg.h	/^    const unsigned int keyMENU       = 70U;$/;"	m	namespace:cimg_library::cimg
keyMENU	CImg.h	/^    const unsigned int keyMENU       = VK_APPS;$/;"	m	namespace:cimg_library::cimg
keyMENU	CImg.h	/^    const unsigned int keyMENU       = XK_Menu;$/;"	m	namespace:cimg_library::cimg
keyN	CImg.h	/^    const unsigned int keyN          = 'N';$/;"	m	namespace:cimg_library::cimg
keyN	CImg.h	/^    const unsigned int keyN          = 60U;$/;"	m	namespace:cimg_library::cimg
keyN	CImg.h	/^    const unsigned int keyN          = XK_n;$/;"	m	namespace:cimg_library::cimg
keyO	CImg.h	/^    const unsigned int keyO          = 'O';$/;"	m	namespace:cimg_library::cimg
keyO	CImg.h	/^    const unsigned int keyO          = 38U;$/;"	m	namespace:cimg_library::cimg
keyO	CImg.h	/^    const unsigned int keyO          = XK_o;$/;"	m	namespace:cimg_library::cimg
keyP	CImg.h	/^    const unsigned int keyP          = 'P';$/;"	m	namespace:cimg_library::cimg
keyP	CImg.h	/^    const unsigned int keyP          = 39U;$/;"	m	namespace:cimg_library::cimg
keyP	CImg.h	/^    const unsigned int keyP          = XK_p;$/;"	m	namespace:cimg_library::cimg
keyPAD0	CImg.h	/^    const unsigned int keyPAD0       = 0x60;$/;"	m	namespace:cimg_library::cimg
keyPAD0	CImg.h	/^    const unsigned int keyPAD0       = 75U;$/;"	m	namespace:cimg_library::cimg
keyPAD0	CImg.h	/^    const unsigned int keyPAD0       = XK_KP_0;$/;"	m	namespace:cimg_library::cimg
keyPAD1	CImg.h	/^    const unsigned int keyPAD1       = 0x61;$/;"	m	namespace:cimg_library::cimg
keyPAD1	CImg.h	/^    const unsigned int keyPAD1       = 76U;$/;"	m	namespace:cimg_library::cimg
keyPAD1	CImg.h	/^    const unsigned int keyPAD1       = XK_KP_1;$/;"	m	namespace:cimg_library::cimg
keyPAD2	CImg.h	/^    const unsigned int keyPAD2       = 0x62;$/;"	m	namespace:cimg_library::cimg
keyPAD2	CImg.h	/^    const unsigned int keyPAD2       = 77U;$/;"	m	namespace:cimg_library::cimg
keyPAD2	CImg.h	/^    const unsigned int keyPAD2       = XK_KP_2;$/;"	m	namespace:cimg_library::cimg
keyPAD3	CImg.h	/^    const unsigned int keyPAD3       = 0x63;$/;"	m	namespace:cimg_library::cimg
keyPAD3	CImg.h	/^    const unsigned int keyPAD3       = 78U;$/;"	m	namespace:cimg_library::cimg
keyPAD3	CImg.h	/^    const unsigned int keyPAD3       = XK_KP_3;$/;"	m	namespace:cimg_library::cimg
keyPAD4	CImg.h	/^    const unsigned int keyPAD4       = 0x64;$/;"	m	namespace:cimg_library::cimg
keyPAD4	CImg.h	/^    const unsigned int keyPAD4       = 79U;$/;"	m	namespace:cimg_library::cimg
keyPAD4	CImg.h	/^    const unsigned int keyPAD4       = XK_KP_4;$/;"	m	namespace:cimg_library::cimg
keyPAD5	CImg.h	/^    const unsigned int keyPAD5       = 0x65;$/;"	m	namespace:cimg_library::cimg
keyPAD5	CImg.h	/^    const unsigned int keyPAD5       = 80U;$/;"	m	namespace:cimg_library::cimg
keyPAD5	CImg.h	/^    const unsigned int keyPAD5       = XK_KP_5;$/;"	m	namespace:cimg_library::cimg
keyPAD6	CImg.h	/^    const unsigned int keyPAD6       = 0x66;$/;"	m	namespace:cimg_library::cimg
keyPAD6	CImg.h	/^    const unsigned int keyPAD6       = 81U;$/;"	m	namespace:cimg_library::cimg
keyPAD6	CImg.h	/^    const unsigned int keyPAD6       = XK_KP_6;$/;"	m	namespace:cimg_library::cimg
keyPAD7	CImg.h	/^    const unsigned int keyPAD7       = 0x67;$/;"	m	namespace:cimg_library::cimg
keyPAD7	CImg.h	/^    const unsigned int keyPAD7       = 82U;$/;"	m	namespace:cimg_library::cimg
keyPAD7	CImg.h	/^    const unsigned int keyPAD7       = XK_KP_7;$/;"	m	namespace:cimg_library::cimg
keyPAD8	CImg.h	/^    const unsigned int keyPAD8       = 0x68;$/;"	m	namespace:cimg_library::cimg
keyPAD8	CImg.h	/^    const unsigned int keyPAD8       = 83U;$/;"	m	namespace:cimg_library::cimg
keyPAD8	CImg.h	/^    const unsigned int keyPAD8       = XK_KP_8;$/;"	m	namespace:cimg_library::cimg
keyPAD9	CImg.h	/^    const unsigned int keyPAD9       = 0x69;$/;"	m	namespace:cimg_library::cimg
keyPAD9	CImg.h	/^    const unsigned int keyPAD9       = 84U;$/;"	m	namespace:cimg_library::cimg
keyPAD9	CImg.h	/^    const unsigned int keyPAD9       = XK_KP_9;$/;"	m	namespace:cimg_library::cimg
keyPADADD	CImg.h	/^    const unsigned int keyPADADD     = 85U;$/;"	m	namespace:cimg_library::cimg
keyPADADD	CImg.h	/^    const unsigned int keyPADADD     = VK_ADD;$/;"	m	namespace:cimg_library::cimg
keyPADADD	CImg.h	/^    const unsigned int keyPADADD     = XK_KP_Add;$/;"	m	namespace:cimg_library::cimg
keyPADDIV	CImg.h	/^    const unsigned int keyPADDIV     = 88U;$/;"	m	namespace:cimg_library::cimg
keyPADDIV	CImg.h	/^    const unsigned int keyPADDIV     = VK_DIVIDE;$/;"	m	namespace:cimg_library::cimg
keyPADDIV	CImg.h	/^    const unsigned int keyPADDIV     = XK_KP_Divide;$/;"	m	namespace:cimg_library::cimg
keyPADMUL	CImg.h	/^    const unsigned int keyPADMUL     = 87U;$/;"	m	namespace:cimg_library::cimg
keyPADMUL	CImg.h	/^    const unsigned int keyPADMUL     = VK_MULTIPLY;$/;"	m	namespace:cimg_library::cimg
keyPADMUL	CImg.h	/^    const unsigned int keyPADMUL     = XK_KP_Multiply;$/;"	m	namespace:cimg_library::cimg
keyPADSUB	CImg.h	/^    const unsigned int keyPADSUB     = 86U;$/;"	m	namespace:cimg_library::cimg
keyPADSUB	CImg.h	/^    const unsigned int keyPADSUB     = VK_SUBTRACT;$/;"	m	namespace:cimg_library::cimg
keyPADSUB	CImg.h	/^    const unsigned int keyPADSUB     = XK_KP_Subtract;$/;"	m	namespace:cimg_library::cimg
keyPAGEDOWN	CImg.h	/^    const unsigned int keyPAGEDOWN   = 42U;$/;"	m	namespace:cimg_library::cimg
keyPAGEDOWN	CImg.h	/^    const unsigned int keyPAGEDOWN   = VK_NEXT;$/;"	m	namespace:cimg_library::cimg
keyPAGEDOWN	CImg.h	/^    const unsigned int keyPAGEDOWN   = XK_Page_Down;$/;"	m	namespace:cimg_library::cimg
keyPAGEUP	CImg.h	/^    const unsigned int keyPAGEUP     = 28U;$/;"	m	namespace:cimg_library::cimg
keyPAGEUP	CImg.h	/^    const unsigned int keyPAGEUP     = VK_PRIOR;$/;"	m	namespace:cimg_library::cimg
keyPAGEUP	CImg.h	/^    const unsigned int keyPAGEUP     = XK_Page_Up;$/;"	m	namespace:cimg_library::cimg
keyPAUSE	CImg.h	/^    const unsigned int keyPAUSE      = 14U;$/;"	m	namespace:cimg_library::cimg
keyPAUSE	CImg.h	/^    const unsigned int keyPAUSE      = VK_PAUSE;$/;"	m	namespace:cimg_library::cimg
keyPAUSE	CImg.h	/^    const unsigned int keyPAUSE      = XK_Pause;$/;"	m	namespace:cimg_library::cimg
keyQ	CImg.h	/^    const unsigned int keyQ          = 'Q';$/;"	m	namespace:cimg_library::cimg
keyQ	CImg.h	/^    const unsigned int keyQ          = 30U;$/;"	m	namespace:cimg_library::cimg
keyQ	CImg.h	/^    const unsigned int keyQ          = XK_q;$/;"	m	namespace:cimg_library::cimg
keyR	CImg.h	/^    const unsigned int keyR          = 'R';$/;"	m	namespace:cimg_library::cimg
keyR	CImg.h	/^    const unsigned int keyR          = 33U;$/;"	m	namespace:cimg_library::cimg
keyR	CImg.h	/^    const unsigned int keyR          = XK_r;$/;"	m	namespace:cimg_library::cimg
keyS	CImg.h	/^    const unsigned int keyS          = 'S';$/;"	m	namespace:cimg_library::cimg
keyS	CImg.h	/^    const unsigned int keyS          = 45U;$/;"	m	namespace:cimg_library::cimg
keyS	CImg.h	/^    const unsigned int keyS          = XK_s;$/;"	m	namespace:cimg_library::cimg
keySHIFTLEFT	CImg.h	/^    const unsigned int keySHIFTLEFT  = 54U;$/;"	m	namespace:cimg_library::cimg
keySHIFTLEFT	CImg.h	/^    const unsigned int keySHIFTLEFT  = VK_SHIFT;$/;"	m	namespace:cimg_library::cimg
keySHIFTLEFT	CImg.h	/^    const unsigned int keySHIFTLEFT  = XK_Shift_L;$/;"	m	namespace:cimg_library::cimg
keySHIFTRIGHT	CImg.h	/^    const unsigned int keySHIFTRIGHT = 62U;$/;"	m	namespace:cimg_library::cimg
keySHIFTRIGHT	CImg.h	/^    const unsigned int keySHIFTRIGHT = VK_SHIFT;$/;"	m	namespace:cimg_library::cimg
keySHIFTRIGHT	CImg.h	/^    const unsigned int keySHIFTRIGHT = XK_Shift_R;$/;"	m	namespace:cimg_library::cimg
keySPACE	CImg.h	/^    const unsigned int keySPACE      = 67U;$/;"	m	namespace:cimg_library::cimg
keySPACE	CImg.h	/^    const unsigned int keySPACE      = VK_SPACE;$/;"	m	namespace:cimg_library::cimg
keySPACE	CImg.h	/^    const unsigned int keySPACE      = XK_space;$/;"	m	namespace:cimg_library::cimg
keyT	CImg.h	/^    const unsigned int keyT          = 'T';$/;"	m	namespace:cimg_library::cimg
keyT	CImg.h	/^    const unsigned int keyT          = 34U;$/;"	m	namespace:cimg_library::cimg
keyT	CImg.h	/^    const unsigned int keyT          = XK_t;$/;"	m	namespace:cimg_library::cimg
keyTAB	CImg.h	/^    const unsigned int keyTAB        = 29U;$/;"	m	namespace:cimg_library::cimg
keyTAB	CImg.h	/^    const unsigned int keyTAB        = VK_TAB;$/;"	m	namespace:cimg_library::cimg
keyTAB	CImg.h	/^    const unsigned int keyTAB        = XK_Tab;$/;"	m	namespace:cimg_library::cimg
keyU	CImg.h	/^    const unsigned int keyU          = 'U';$/;"	m	namespace:cimg_library::cimg
keyU	CImg.h	/^    const unsigned int keyU          = 36U;$/;"	m	namespace:cimg_library::cimg
keyU	CImg.h	/^    const unsigned int keyU          = XK_u;$/;"	m	namespace:cimg_library::cimg
keyV	CImg.h	/^    const unsigned int keyV          = 'V';$/;"	m	namespace:cimg_library::cimg
keyV	CImg.h	/^    const unsigned int keyV          = 58U;$/;"	m	namespace:cimg_library::cimg
keyV	CImg.h	/^    const unsigned int keyV          = XK_v;$/;"	m	namespace:cimg_library::cimg
keyW	CImg.h	/^    const unsigned int keyW          = 'W';$/;"	m	namespace:cimg_library::cimg
keyW	CImg.h	/^    const unsigned int keyW          = 31U;$/;"	m	namespace:cimg_library::cimg
keyW	CImg.h	/^    const unsigned int keyW          = XK_w;$/;"	m	namespace:cimg_library::cimg
keyX	CImg.h	/^    const unsigned int keyX          = 'X';$/;"	m	namespace:cimg_library::cimg
keyX	CImg.h	/^    const unsigned int keyX          = 56U;$/;"	m	namespace:cimg_library::cimg
keyX	CImg.h	/^    const unsigned int keyX          = XK_x;$/;"	m	namespace:cimg_library::cimg
keyY	CImg.h	/^    const unsigned int keyY          = 'Y';$/;"	m	namespace:cimg_library::cimg
keyY	CImg.h	/^    const unsigned int keyY          = 35U;$/;"	m	namespace:cimg_library::cimg
keyY	CImg.h	/^    const unsigned int keyY          = XK_y;$/;"	m	namespace:cimg_library::cimg
keyZ	CImg.h	/^    const unsigned int keyZ          = 'Z';$/;"	m	namespace:cimg_library::cimg
keyZ	CImg.h	/^    const unsigned int keyZ          = 55U;$/;"	m	namespace:cimg_library::cimg
keyZ	CImg.h	/^    const unsigned int keyZ          = XK_z;$/;"	m	namespace:cimg_library::cimg
keycode	CImg.h	/^    static unsigned int keycode(const char *const textcode) {$/;"	f	struct:cimg_library::CImgDisplay
kth_smallest	CImg.h	/^    T kth_smallest(const unsigned int k) const {$/;"	f	struct:cimg_library::CImg
label	CImg.h	/^      CImgList<charT> label;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
label	CImg.h	/^    CImg<T>& label(const CImg<t>& connectivity_mask, const Tfloat tolerance=0) {$/;"	f	struct:cimg_library::CImg
label	CImg.h	/^    CImg<T>& label(const bool is_high_connectivity=false, const Tfloat tolerance=0) {$/;"	f	struct:cimg_library::CImg
laplacian	CImg.h	/^    CImg<T>& laplacian() {$/;"	f	struct:cimg_library::CImg
last	CImg.h	/^    template<typename t1, typename t2> struct last { typedef t2 type; };$/;"	s	namespace:cimg_library::cimg
lb	octree.h	/^        point3 lb; \/\/ Left-bottom$/;"	m	class:octree_node
level	CImg.h	/^      CImg<uintT> level, opcode;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
light	object.h	/^        light()$/;"	f	class:light
light	object.h	/^        light(const vector3& pos)$/;"	f	class:light
light	object.h	/^class light : public object \/\/ point, directional, area$/;"	c
lights	ray_tracer.h	/^    std::vector<light> lights; \/\/ shadow rays (light std::vector)$/;"	m	class:ray_tree_node
lights	scene.h	/^        std::vector<light> lights;$/;"	m	class:scene
line	CImg.h	/^    CImg<T>& line(const unsigned int y0) {$/;"	f	struct:cimg_library::CImg
linear_atX	CImg.h	/^    Tfloat linear_atX(const float fx, const int y, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImg
linear_atX	CImg.h	/^    Tfloat linear_atX(const float fx, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
linear_atXY	CImg.h	/^    Tfloat linear_atXY(const float fx, const float fy, const int z, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImg
linear_atXY	CImg.h	/^    Tfloat linear_atXY(const float fx, const float fy, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
linear_atXYZ	CImg.h	/^    Tfloat linear_atXYZ(const float fx, const float fy, const float fz, const int c, const T out_val) const {$/;"	f	struct:cimg_library::CImg
linear_atXYZ	CImg.h	/^    Tfloat linear_atXYZ(const float fx, const float fy=0, const float fz=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
linear_atXYZC	CImg.h	/^    Tfloat linear_atXYZC(const float fx, const float fy, const float fz, const float fc, const T out_val) const {$/;"	f	struct:cimg_library::CImg
linear_atXYZC	CImg.h	/^    Tfloat linear_atXYZC(const float fx, const float fy=0, const float fz=0, const float fc=0) const {$/;"	f	struct:cimg_library::CImg
lines	CImg.h	/^    CImg<T>& lines(const unsigned int y0, const unsigned int y1) {$/;"	f	struct:cimg_library::CImg
lines_LUT256	CImg.h	/^    static const CImg<Tuchar>& lines_LUT256() {$/;"	f	struct:cimg_library::CImg
load	CImg.h	/^    CImg<T>& load(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load	CImg.h	/^    CImgList<T>& load(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
load_analyze	CImg.h	/^    CImg<T>& load_analyze(const char *const filename, float *const voxsize=0) {$/;"	f	struct:cimg_library::CImg
load_analyze	CImg.h	/^    CImg<T>& load_analyze(std::FILE *const file, float *const voxsize=0) {$/;"	f	struct:cimg_library::CImg
load_ascii	CImg.h	/^    CImg<T>& load_ascii(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_ascii	CImg.h	/^    CImg<T>& load_ascii(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
load_bmp	CImg.h	/^    CImg<T>& load_bmp(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_bmp	CImg.h	/^    CImg<T>& load_bmp(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
load_camera	CImg.h	/^    CImg<T>& load_camera(const int camera_index=-1, const unsigned int skip_frames=0, const bool release_camera=false) {$/;"	f	struct:cimg_library::CImg
load_cimg	CImg.h	/^    CImg<T>& load_cimg(const char *const filename, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library::CImg
load_cimg	CImg.h	/^    CImg<T>& load_cimg(const char *const filename,$/;"	f	struct:cimg_library::CImg
load_cimg	CImg.h	/^    CImg<T>& load_cimg(std::FILE *const file, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library::CImg
load_cimg	CImg.h	/^    CImg<T>& load_cimg(std::FILE *const file,$/;"	f	struct:cimg_library::CImg
load_cimg	CImg.h	/^    CImgList<T>& load_cimg(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
load_cimg	CImg.h	/^    CImgList<T>& load_cimg(const char *const filename,$/;"	f	struct:cimg_library::CImgList
load_cimg	CImg.h	/^    CImgList<T>& load_cimg(std::FILE *const file) {$/;"	f	struct:cimg_library::CImgList
load_cimg	CImg.h	/^    CImgList<T>& load_cimg(std::FILE *const file,$/;"	f	struct:cimg_library::CImgList
load_dcraw_external	CImg.h	/^    CImg<T>& load_dcraw_external(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_dlm	CImg.h	/^    CImg<T>& load_dlm(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_dlm	CImg.h	/^    CImg<T>& load_dlm(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
load_exr	CImg.h	/^    CImg<T>& load_exr(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_ffmpeg	CImg.h	/^    CImg<T>& load_ffmpeg(const char *const filename, const unsigned int first_frame=0, const unsigned int last_frame=~0U,$/;"	f	struct:cimg_library::CImg
load_ffmpeg	CImg.h	/^    CImgList<T>& load_ffmpeg(const char *const filename, const unsigned int first_frame=0, const unsigned int last_frame=~0U,$/;"	f	struct:cimg_library::CImgList
load_ffmpeg_external	CImg.h	/^    CImg<T>& load_ffmpeg_external(const char *const filename, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library::CImg
load_ffmpeg_external	CImg.h	/^    CImgList<T>& load_ffmpeg_external(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
load_graphicsmagick_external	CImg.h	/^    CImg<T>& load_graphicsmagick_external(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_gzip_external	CImg.h	/^    CImg<T>& load_gzip_external(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_gzip_external	CImg.h	/^    CImgList<T>& load_gzip_external(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
load_imagemagick_external	CImg.h	/^    CImg<T>& load_imagemagick_external(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_inr	CImg.h	/^    CImg<T>& load_inr(const char *const filename, float *const voxsize=0) {$/;"	f	struct:cimg_library::CImg
load_inr	CImg.h	/^    CImg<T>& load_inr(std::FILE *const file, float *const voxsize=0) {$/;"	f	struct:cimg_library::CImg
load_jpeg	CImg.h	/^    CImg<T>& load_jpeg(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_jpeg	CImg.h	/^    CImg<T>& load_jpeg(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
load_magick	CImg.h	/^    CImg<T>& load_magick(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_medcon_external	CImg.h	/^    CImg<T>& load_medcon_external(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_minc2	CImg.h	/^    CImg<T>& load_minc2(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_off	CImg.h	/^    CImg<T>& load_off(const char *const filename, CImgList<tf>& primitives, CImgList<tc>& colors) {$/;"	f	struct:cimg_library::CImg
load_off	CImg.h	/^    CImg<T>& load_off(std::FILE *const file, CImgList<tf>& primitives, CImgList<tc>& colors) {$/;"	f	struct:cimg_library::CImg
load_off	CImg.h	/^    CImgList<T>& load_off(const char *const filename,$/;"	f	struct:cimg_library::CImgList
load_other	CImg.h	/^    CImg<T>& load_other(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_pandore	CImg.h	/^    CImg<T>& load_pandore(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_pandore	CImg.h	/^    CImg<T>& load_pandore(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
load_parrec	CImg.h	/^    CImg<T>& load_parrec(const char *const filename, const char axis='c', const float align=0) {$/;"	f	struct:cimg_library::CImg
load_parrec	CImg.h	/^    CImgList<T>& load_parrec(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
load_pfm	CImg.h	/^    CImg<T>& load_pfm(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_pfm	CImg.h	/^    CImg<T>& load_pfm(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
load_png	CImg.h	/^    CImg<T>& load_png(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_png	CImg.h	/^    CImg<T>& load_png(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
load_pnm	CImg.h	/^    CImg<T>& load_pnm(const char *const filename) {$/;"	f	struct:cimg_library::CImg
load_pnm	CImg.h	/^    CImg<T>& load_pnm(std::FILE *const file) {$/;"	f	struct:cimg_library::CImg
load_raw	CImg.h	/^    CImg<T>& load_raw(const char *const filename,$/;"	f	struct:cimg_library::CImg
load_raw	CImg.h	/^    CImg<T>& load_raw(std::FILE *const file,$/;"	f	struct:cimg_library::CImg
load_rgb	CImg.h	/^    CImg<T>& load_rgb(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library::CImg
load_rgb	CImg.h	/^    CImg<T>& load_rgb(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library::CImg
load_rgba	CImg.h	/^    CImg<T>& load_rgba(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library::CImg
load_rgba	CImg.h	/^    CImg<T>& load_rgba(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library::CImg
load_tiff	CImg.h	/^    CImg<T>& load_tiff(const char *const filename,$/;"	f	struct:cimg_library::CImg
load_tiff	CImg.h	/^    CImgList<T>& load_tiff(const char *const filename,$/;"	f	struct:cimg_library::CImgList
load_yuv	CImg.h	/^    CImg<T>& load_yuv(const char *const filename,$/;"	f	struct:cimg_library::CImg
load_yuv	CImg.h	/^    CImg<T>& load_yuv(std::FILE *const file,$/;"	f	struct:cimg_library::CImg
load_yuv	CImg.h	/^    CImgList<T>& load_yuv(const char *const filename,$/;"	f	struct:cimg_library::CImgList
load_yuv	CImg.h	/^    CImgList<T>& load_yuv(std::FILE *const file,$/;"	f	struct:cimg_library::CImgList
local_illu	ray_tracer.h	/^    vector3 local_illu;$/;"	m	class:ray_tree_node
log	CImg.h	/^    CImg<T>& log() {$/;"	f	struct:cimg_library::CImg
log	CImg.h	/^  inline CImg<_cimg_Tfloat> log(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
log10	CImg.h	/^    CImg<T>& log10() {$/;"	f	struct:cimg_library::CImg
log10	CImg.h	/^  inline CImg<_cimg_Tfloat> log10(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
logo40x38	CImg.h	/^    const unsigned char logo40x38[4576] = {$/;"	m	namespace:cimg_library::cimg
logo40x38	CImg.h	/^    static CImg<T> logo40x38() {$/;"	f	struct:cimg_library::CImg
longT	CImg.h	/^    typedef typename cimg::last<T,long>::type longT;$/;"	t	struct:cimg_library::CImg
longT	CImg.h	/^    typedef typename cimg::last<T,long>::type longT;$/;"	t	struct:cimg_library::CImgList
magnitude	CImg.h	/^    Tdouble magnitude(const int magnitude_type=2) const {$/;"	f	struct:cimg_library::CImg
main	hw5.cpp	/^int main(int argc, char* argv[])$/;"	f
main	hw5_backup.cpp	/^int main(int argc, char** argv)$/;"	f
make_polygon	polyhedron.h	/^inline void polyhedron<20>::make_polygon()$/;"	f	class:polyhedron
make_polygon	polyhedron.h	/^inline void polyhedron<6>::make_polygon()$/;"	f	class:polyhedron
make_quad	scene.cpp	/^void scene::make_quad(const vector3& v0, const vector3& v1, const vector3& v2,$/;"	f	class:scene
map	CImg.h	/^    CImg<T>& map(const CImg<t>& palette) {$/;"	f	struct:cimg_library::CImg
mat	object.h	/^        material mat;$/;"	m	class:object
material	material.h	/^        material()$/;"	f	class:material
material	material.h	/^        material(vector3 diffuse, vector3 specular, vector3 ambient, float shininess, float transparency, float reflection = 0.5)$/;"	f	class:material
material	material.h	/^class material$/;"	c
matrix	CImg.h	/^    CImg<T>& matrix() {$/;"	f	struct:cimg_library::CImg
matrix	CImg.h	/^    static CImg<T> matrix(const T& a0) {$/;"	f	struct:cimg_library::CImg
matrix	CImg.h	/^    static CImg<T> matrix(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4,$/;"	f	struct:cimg_library::CImg
matrix	CImg.h	/^    static CImg<T> matrix(const T& a0, const T& a1, const T& a2, const T& a3,$/;"	f	struct:cimg_library::CImg
matrix	CImg.h	/^    static CImg<T> matrix(const T& a0, const T& a1, const T& a2,$/;"	f	struct:cimg_library::CImg
matrix	CImg.h	/^    static CImg<T> matrix(const T& a0, const T& a1,$/;"	f	struct:cimg_library::CImg
matrix	common.h	/^typedef cml::matrix44f_c matrix;$/;"	t
matrixd	common.h	/^typedef cml::matrixd_c matrixd;$/;"	t
max	CImg.h	/^      static T max() { return (T)-1>0?(T)-1:~((T)-1<<(8*sizeof(T)-1)); }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static bool max() { return true; }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static char max() { return ~((char)(-1L<<(8*sizeof(char)-1))); }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static double max() { return  1.7E308; }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static float max() { return  3.4E38f; }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static int max() { return ~((int)(-1L<<(8*sizeof(int)-1))); }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static long max() { return ~((long)(-1L<<(8*sizeof(long)-1))); }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static short max() { return ~((short)(-1L<<(8*sizeof(short)-1))); }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static signed char max() { return ~((signed char)(-1L<<(8*sizeof(signed char)-1))); }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static unsigned char max() { return (unsigned char)~0U; }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static unsigned int max() { return (unsigned int)~0U; }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static unsigned long max() { return (unsigned long)~0UL; }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^      static unsigned short max() { return (unsigned short)~0U; }$/;"	f	struct:cimg_library::cimg::type
max	CImg.h	/^    CImg<T>& max(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
max	CImg.h	/^    CImg<T>& max(const T val) {$/;"	f	struct:cimg_library::CImg
max	CImg.h	/^    CImg<T>& max(const char *const expression) {$/;"	f	struct:cimg_library::CImg
max	CImg.h	/^    T& max() {$/;"	f	struct:cimg_library::CImg
max	CImg.h	/^    T& max() {$/;"	f	struct:cimg_library::CImgList
max	CImg.h	/^    const T& max() const {$/;"	f	struct:cimg_library::CImg
max	CImg.h	/^    const T& max() const {$/;"	f	struct:cimg_library::CImgList
max	CImg.h	/^    inline typename cimg::superset2<t1,t2,t3>::type max(const t1& a, const t2& b, const t3& c) {$/;"	f	namespace:cimg_library::cimg
max	CImg.h	/^    inline typename cimg::superset3<t1,t2,t3,t4>::type max(const t1& a, const t2& b, const t3& c, const t4& d) {$/;"	f	namespace:cimg_library::cimg
max	CImg.h	/^    inline typename cimg::superset<t1,t2>::type max(const t1& a, const t2& b) {$/;"	f	namespace:cimg_library::cimg
max	CImg.h	/^#define max(/;"	d
max	CImg.h	/^#undef max$/;"	d
max_min	CImg.h	/^    T& max_min(t& min_val) {$/;"	f	struct:cimg_library::CImg
max_min	CImg.h	/^    T& max_min(t& min_val) {$/;"	f	struct:cimg_library::CImgList
max_min	CImg.h	/^    const T& max_min(t& min_val) const {$/;"	f	struct:cimg_library::CImg
max_min	CImg.h	/^    const T& max_min(t& min_val) const {$/;"	f	struct:cimg_library::CImgList
mean	CImg.h	/^    Tdouble mean() const {$/;"	f	struct:cimg_library::CImg
medcon_path	CImg.h	/^    inline const char* medcon_path(const char *const user_path=0, const bool reinit_path=false) {$/;"	f	namespace:cimg_library::cimg
median	CImg.h	/^    T median() const {$/;"	f	struct:cimg_library::CImg
mem	CImg.h	/^      CImg<doubleT> mem;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
mempos	CImg.h	/^      unsigned int mempos, result;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
message	CImg.h	/^      char message[JMSG_LENGTH_MAX];$/;"	m	struct:cimg_library::CImg::_cimg_error_mgr
min	CImg.h	/^      static T min() { return (T)-1>0?(T)0:(T)-1<<(8*sizeof(T)-1); }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static bool min() { return false; }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static char min() { return (char)(-1L<<(8*sizeof(char)-1)); }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static double min() { return -1.7E308; }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static float min() { return -3.4E38f; }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static int min() { return (int)(-1L<<(8*sizeof(int)-1)); }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static long min() { return (long)(-1L<<(8*sizeof(long)-1)); }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static short min() { return (short)(-1L<<(8*sizeof(short)-1)); }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static signed char min() { return (signed char)(-1L<<(8*sizeof(signed char)-1)); }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static unsigned char min() { return 0; }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static unsigned int min() { return 0; }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static unsigned long min() { return 0; }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^      static unsigned short min() { return 0; }$/;"	f	struct:cimg_library::cimg::type
min	CImg.h	/^    CImg<T>& min(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
min	CImg.h	/^    CImg<T>& min(const T val) {$/;"	f	struct:cimg_library::CImg
min	CImg.h	/^    CImg<T>& min(const char *const expression) {$/;"	f	struct:cimg_library::CImg
min	CImg.h	/^    T& min() {$/;"	f	struct:cimg_library::CImg
min	CImg.h	/^    T& min() {$/;"	f	struct:cimg_library::CImgList
min	CImg.h	/^    const T& min() const {$/;"	f	struct:cimg_library::CImg
min	CImg.h	/^    const T& min() const {$/;"	f	struct:cimg_library::CImgList
min	CImg.h	/^    inline typename cimg::superset2<t1,t2,t3>::type min(const t1& a, const t2& b, const t3& c) {$/;"	f	namespace:cimg_library::cimg
min	CImg.h	/^    inline typename cimg::superset3<t1,t2,t3,t4>::type min(const t1& a, const t2& b, const t3& c, const t4& d) {$/;"	f	namespace:cimg_library::cimg
min	CImg.h	/^    inline typename cimg::superset<t1,t2>::type min(const t1& a, const t2& b) {$/;"	f	namespace:cimg_library::cimg
min	CImg.h	/^#define min(/;"	d
min	CImg.h	/^#undef min$/;"	d
min_max	CImg.h	/^    T& min_max(t& max_val) {$/;"	f	struct:cimg_library::CImg
min_max	CImg.h	/^    T& min_max(t& max_val) {$/;"	f	struct:cimg_library::CImgList
min_max	CImg.h	/^    const T& min_max(t& max_val) const {$/;"	f	struct:cimg_library::CImg
min_max	CImg.h	/^    const T& min_max(t& max_val) const {$/;"	f	struct:cimg_library::CImgList
minmod	CImg.h	/^    inline T minmod(const T a, const T b) {$/;"	f	namespace:cimg_library::cimg
mirror	CImg.h	/^    CImg<T>& mirror(const char axis) {$/;"	f	struct:cimg_library::CImg
mod	CImg.h	/^    inline T mod(const T& x, const T& m) {$/;"	f	namespace:cimg_library::cimg
mod	CImg.h	/^    inline int mod(const bool x, const bool m) {$/;"	f	namespace:cimg_library::cimg
mod	CImg.h	/^    inline int mod(const char x, const char m) {$/;"	f	namespace:cimg_library::cimg
mod	CImg.h	/^    inline int mod(const int x, const int m) {$/;"	f	namespace:cimg_library::cimg
mod	CImg.h	/^    inline int mod(const long x, const long m) {$/;"	f	namespace:cimg_library::cimg
mod	CImg.h	/^    inline int mod(const short x, const short m) {$/;"	f	namespace:cimg_library::cimg
mod	CImg.h	/^    inline int mod(const unsigned char x, const unsigned char m) {$/;"	f	namespace:cimg_library::cimg
mod	CImg.h	/^    inline int mod(const unsigned int x, const unsigned int m) {$/;"	f	namespace:cimg_library::cimg
mod	CImg.h	/^    inline int mod(const unsigned long x, const unsigned long m) {$/;"	f	namespace:cimg_library::cimg
mod	CImg.h	/^    inline int mod(const unsigned short x, const unsigned short m) {$/;"	f	namespace:cimg_library::cimg
mouse_x	CImg.h	/^    int mouse_x() const {$/;"	f	struct:cimg_library::CImgDisplay
mouse_y	CImg.h	/^    int mouse_y() const {$/;"	f	struct:cimg_library::CImgDisplay
move	CImg.h	/^    CImgDisplay& move(const int pos_x, const int pos_y) {$/;"	f	struct:cimg_library::CImgDisplay
move	CImg.h	/^    CImgDisplay& move(const int posx, const int posy) {$/;"	f	struct:cimg_library::CImgDisplay
move_dir	object.h	/^        vector3 move_dir;$/;"	m	class:object
move_to	CImg.h	/^    CImg<T>& move_to(CImg<T>& img) {$/;"	f	struct:cimg_library::CImg
move_to	CImg.h	/^    CImg<t>& move_to(CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
move_to	CImg.h	/^    CImgList<t>& move_to(CImgList<t>& list) {$/;"	f	struct:cimg_library::CImgList
move_to	CImg.h	/^    CImgList<t>& move_to(CImgList<t>& list, const unsigned int pos) {$/;"	f	struct:cimg_library::CImgList
move_to	CImg.h	/^    CImgList<t>& move_to(CImgList<t>& list, const unsigned int pos=~0U) {$/;"	f	struct:cimg_library::CImg
moving_objs	scene.h	/^        std::vector<std::shared_ptr<object>> moving_objs;$/;"	m	class:scene
mp	CImg.h	/^      _cimg_math_parser *mp;$/;"	m	struct:cimg_library::CImg::_functor2d_expr
mp	CImg.h	/^      _cimg_math_parser *mp;$/;"	m	struct:cimg_library::CImg::_functor3d_expr
mp	CImg.h	/^      _cimg_math_parser *mp;$/;"	m	struct:cimg_library::CImg::_functor4d_streamline_expr
mp_abs	CImg.h	/^      double mp_abs() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_acos	CImg.h	/^      double mp_acos() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_add	CImg.h	/^      double mp_add() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_arg	CImg.h	/^      double mp_arg() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_asin	CImg.h	/^      double mp_asin() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_atan	CImg.h	/^      double mp_atan() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_atan2	CImg.h	/^      double mp_atan2() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_bitwise_and	CImg.h	/^      double mp_bitwise_and() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_bitwise_not	CImg.h	/^      double mp_bitwise_not() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_bitwise_or	CImg.h	/^      double mp_bitwise_or() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_cM	CImg.h	/^      double mp_cM() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_cm	CImg.h	/^      double mp_cm() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_cos	CImg.h	/^      double mp_cos() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_cosh	CImg.h	/^      double mp_cosh() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_cs	CImg.h	/^      double mp_cs() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_div	CImg.h	/^      double mp_div() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_eqeq	CImg.h	/^      double mp_eqeq() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_equal	CImg.h	/^      double mp_equal() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_exp	CImg.h	/^      double mp_exp() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_g	CImg.h	/^      double mp_g() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_i	CImg.h	/^      double mp_i() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_iM	CImg.h	/^      double mp_iM() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_ia	CImg.h	/^      double mp_ia() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_if	CImg.h	/^      double mp_if() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_im	CImg.h	/^      double mp_im() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_inf	CImg.h	/^      double mp_inf() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_infeq	CImg.h	/^      double mp_infeq() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_int	CImg.h	/^      double mp_int() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_isbool	CImg.h	/^      double mp_isbool() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_isinf	CImg.h	/^      double mp_isinf() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_isint	CImg.h	/^      double mp_isint() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_isnan	CImg.h	/^      double mp_isnan() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_iv	CImg.h	/^      double mp_iv() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_ixyzc	CImg.h	/^      double mp_ixyzc() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_log	CImg.h	/^      double mp_log() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_log10	CImg.h	/^      double mp_log10() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_logical_and	CImg.h	/^      double mp_logical_and() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_logical_not	CImg.h	/^      double mp_logical_not() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_logical_or	CImg.h	/^      double mp_logical_or() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_lsl	CImg.h	/^      double mp_lsl() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_lsr	CImg.h	/^      double mp_lsr() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_max	CImg.h	/^      double mp_max() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_min	CImg.h	/^      double mp_min() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_minus	CImg.h	/^      double mp_minus() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_modulo	CImg.h	/^      double mp_modulo() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_mul	CImg.h	/^      double mp_mul() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_not	CImg.h	/^      double mp_not() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_noteq	CImg.h	/^      double mp_noteq() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_pow	CImg.h	/^      double mp_pow() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_rol	CImg.h	/^      double mp_rol() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_ror	CImg.h	/^      double mp_ror() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_round	CImg.h	/^      double mp_round() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_sign	CImg.h	/^      double mp_sign() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_sin	CImg.h	/^      double mp_sin() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_sinc	CImg.h	/^      double mp_sinc() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_sinh	CImg.h	/^      double mp_sinh() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_sqrt	CImg.h	/^      double mp_sqrt() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_sub	CImg.h	/^      double mp_sub() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_sup	CImg.h	/^      double mp_sup() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_supeq	CImg.h	/^      double mp_supeq() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_tan	CImg.h	/^      double mp_tan() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_tanh	CImg.h	/^      double mp_tanh() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_u	CImg.h	/^      double mp_u() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_xM	CImg.h	/^      double mp_xM() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_xm	CImg.h	/^      double mp_xm() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_xw	CImg.h	/^      double mp_xw() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_yM	CImg.h	/^      double mp_yM() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_yh	CImg.h	/^      double mp_yh() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_ym	CImg.h	/^      double mp_ym() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_zM	CImg.h	/^      double mp_zM() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_zd	CImg.h	/^      double mp_zd() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mp_zm	CImg.h	/^      double mp_zm() {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
mul	CImg.h	/^    CImg<T>& mul(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
mul	CImg.h	/^    CImg<T>& mul(const char *const expression) {$/;"	f	struct:cimg_library::CImg
n	triangle.h	/^        vector3 n[3];   \/\/ normal vector$/;"	m	class:triangle
nan	CImg.h	/^      static double nan() { static const double v_nan = std::sqrt(-1.0); return v_nan; }$/;"	f	struct:cimg_library::cimg::type
nan	CImg.h	/^      static float nan() { return (float)cimg::type<double>::nan(); }$/;"	f	struct:cimg_library::cimg::type
nb_bits	CImg.h	/^      unsigned int     nb_bits;$/;"	m	struct:cimg_library::cimg::X11_info
nb_resolutions	CImg.h	/^      unsigned int nb_resolutions;$/;"	m	struct:cimg_library::cimg::X11_info
nb_wins	CImg.h	/^      volatile unsigned int nb_wins;$/;"	m	struct:cimg_library::cimg::X11_info
nearest_pow2	CImg.h	/^    inline unsigned int nearest_pow2(const T x) {$/;"	f	namespace:cimg_library::cimg
noise	CImg.h	/^    CImg<T>& noise(const double sigma, const unsigned int noise_type=0) {$/;"	f	struct:cimg_library::CImg
norm	CImg.h	/^    CImg<T>& norm(const int norm_type=2) {$/;"	f	struct:cimg_library::CImg
normal	object.h	/^    vector3 normal;$/;"	m	struct:intersect_info
normalization	CImg.h	/^    unsigned int normalization() const {$/;"	f	struct:cimg_library::CImgDisplay
normalize	CImg.h	/^    CImg<T>& normalize() {$/;"	f	struct:cimg_library::CImg
normalize	CImg.h	/^    CImg<T>& normalize(const T value_min, const T value_max) {$/;"	f	struct:cimg_library::CImg
number_filename	CImg.h	/^    inline char* number_filename(const char *const filename, const int number, const unsigned int n, char *const string) {$/;"	f	namespace:cimg_library::cimg
obj	bsp_tree.cpp	/^    shared_ptr<const object> obj;$/;"	m	struct:data	file:
obj	object.h	/^    std::shared_ptr<const object> obj;$/;"	m	struct:intersect_info
object	object.h	/^        object(const vector3& pos, const vector3& move_dir = vector3(0, 0, 0))$/;"	f	class:object
object	object.h	/^class object : public std::enable_shared_from_this<object>$/;"	c
object3dtoCImg3d	CImg.h	/^    CImg<T>& object3dtoCImg3d() {$/;"	f	struct:cimg_library::CImg
object3dtoCImg3d	CImg.h	/^    CImg<T>& object3dtoCImg3d(const CImgList<tp>& primitives) {$/;"	f	struct:cimg_library::CImg
object3dtoCImg3d	CImg.h	/^    CImg<T>& object3dtoCImg3d(const CImgList<tp>& primitives,$/;"	f	struct:cimg_library::CImg
objs	octree.h	/^        std::vector<std::shared_ptr<object>> objs; \/\/ objects in this cube$/;"	m	class:octree_node
objs	scene.h	/^        std::vector<std::shared_ptr<object>> objs;$/;"	m	class:scene
octree	octree.h	/^class octree$/;"	c
octree_node	octree.h	/^        octree_node()$/;"	f	class:octree_node
octree_node	octree.h	/^class octree_node$/;"	c
offset	CImg.h	/^    int offset(const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library::CImg
opcode	CImg.h	/^      CImg<uintT> level, opcode;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
opcode0	CImg.h	/^      unsigned int opcode0(const char op) {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
opcode1	CImg.h	/^      unsigned int opcode1(const char op, const unsigned int arg1) {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
opcode2	CImg.h	/^      unsigned int opcode2(const char op, const unsigned int arg1, const unsigned int arg2) {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
opcode3	CImg.h	/^      unsigned int opcode3(const char op, const unsigned int arg1, const unsigned int arg2, const unsigned int arg3) {$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
opcode5	CImg.h	/^      unsigned int opcode5(const char op, const unsigned int arg1, const unsigned int arg2, const unsigned int arg3,$/;"	f	struct:cimg_library::CImg::_cimg_math_parser
operator !=	CImg.h	/^    bool operator!=(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
operator %	CImg.h	/^    CImg<Tfloat> operator%(const char *const expression) const {$/;"	f	struct:cimg_library::CImg
operator %	CImg.h	/^    CImg<_cimg_Tt> operator%(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
operator %	CImg.h	/^    CImg<_cimg_Tt> operator%(const t val) const {$/;"	f	struct:cimg_library::CImg
operator %=	CImg.h	/^    CImg<T>& operator%=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator %=	CImg.h	/^    CImg<T>& operator%=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator %=	CImg.h	/^    CImg<T>& operator%=(const t val) {$/;"	f	struct:cimg_library::CImg
operator &	CImg.h	/^    CImg<T> operator&(const t val) const {$/;"	f	struct:cimg_library::CImg
operator &	CImg.h	/^  inline CImg<T> operator&(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library
operator &=	CImg.h	/^    CImg<T>& operator&=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator &=	CImg.h	/^    CImg<T>& operator&=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator &=	CImg.h	/^    CImg<T>& operator&=(const t val) {$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^      float operator()(const float x, const float y) const {$/;"	f	struct:cimg_library::CImg::_functor2d_expr
operator ()	CImg.h	/^      float operator()(const float x, const float y) const {$/;"	f	struct:cimg_library::CImg::_functor2d_float
operator ()	CImg.h	/^      float operator()(const float x, const float y) const {$/;"	f	struct:cimg_library::CImg::_functor2d_int
operator ()	CImg.h	/^      float operator()(const float x, const float y, const float z) const {$/;"	f	struct:cimg_library::CImg::_functor3d_expr
operator ()	CImg.h	/^      float operator()(const float x, const float y, const float z) const {$/;"	f	struct:cimg_library::CImg::_functor3d_float
operator ()	CImg.h	/^      float operator()(const float x, const float y, const float z) const {$/;"	f	struct:cimg_library::CImg::_functor3d_int
operator ()	CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library::CImg::_functor4d_int
operator ()	CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library::CImg::_functor4d_streamline2d_directed
operator ()	CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library::CImg::_functor4d_streamline2d_oriented
operator ()	CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library::CImg::_functor4d_streamline3d_directed
operator ()	CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library::CImg::_functor4d_streamline3d_oriented
operator ()	CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library::CImg::_functor4d_streamline_expr
operator ()	CImg.h	/^    CImg<T>& operator()(const unsigned int pos) {$/;"	f	struct:cimg_library::CImgList
operator ()	CImg.h	/^    T& operator()(const unsigned int pos, const unsigned int x, const unsigned int y=0,$/;"	f	struct:cimg_library::CImgList
operator ()	CImg.h	/^    T& operator()(const unsigned int x) {$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y) {$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z) {$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c) {$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c,$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int,$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) {$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    const CImg<T>& operator()(const unsigned int pos) const {$/;"	f	struct:cimg_library::CImgList
operator ()	CImg.h	/^    const T& operator()(const unsigned int pos, const unsigned int x, const unsigned int y=0,$/;"	f	struct:cimg_library::CImgList
operator ()	CImg.h	/^    const T& operator()(const unsigned int x) const {$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y) const {$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z) const {$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c) const {$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c,$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int,$/;"	f	struct:cimg_library::CImg
operator ()	CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) const {$/;"	f	struct:cimg_library::CImg
operator *	CImg.h	/^    CImg<Tfloat> operator*(const char *const expression) const {$/;"	f	struct:cimg_library::CImg
operator *	CImg.h	/^    CImg<_cimg_Tt> operator*(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
operator *	CImg.h	/^    CImg<_cimg_Tt> operator*(const t val) const {$/;"	f	struct:cimg_library::CImg
operator *	CImg.h	/^  inline CImg<_cimg_Tfloat> operator*(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library
operator *	common.h	/^inline vector3 operator*(const vector3& lhs, const vector3& rhs)$/;"	f
operator *	object.h	/^        point3 operator*(const float s) const { return org + s*dir; }$/;"	f	class:ray
operator *=	CImg.h	/^    CImg<T>& operator*=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator *=	CImg.h	/^    CImg<T>& operator*=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator *=	CImg.h	/^    CImg<T>& operator*=(const t val) {$/;"	f	struct:cimg_library::CImg
operator +	CImg.h	/^    CImg<T> operator+() const {$/;"	f	struct:cimg_library::CImg
operator +	CImg.h	/^    CImg<Tfloat> operator+(const char *const expression) const {$/;"	f	struct:cimg_library::CImg
operator +	CImg.h	/^    CImg<_cimg_Tt> operator+(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
operator +	CImg.h	/^    CImg<_cimg_Tt> operator+(const t val) const {$/;"	f	struct:cimg_library::CImg
operator +	CImg.h	/^    CImgList<T> operator+() const {$/;"	f	struct:cimg_library::CImgList
operator +	CImg.h	/^  inline CImg<_cimg_Tfloat> operator+(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library
operator ++	CImg.h	/^    CImg<T> operator++(int) {$/;"	f	struct:cimg_library::CImg
operator ++	CImg.h	/^    CImg<T>& operator++() {$/;"	f	struct:cimg_library::CImg
operator +=	CImg.h	/^    CImg<T>& operator+=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator +=	CImg.h	/^    CImg<T>& operator+=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator +=	CImg.h	/^    CImg<T>& operator+=(const t val) {$/;"	f	struct:cimg_library::CImg
operator ,	CImg.h	/^    CImgList<T>& operator,(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImgList
operator ,	CImg.h	/^    CImgList<T>& operator,(const CImgList<t>& list) {$/;"	f	struct:cimg_library::CImgList
operator ,	CImg.h	/^    CImgList<_cimg_Tt> operator,(CImgList<t>& list) const {$/;"	f	struct:cimg_library::CImg
operator ,	CImg.h	/^    CImgList<_cimg_Tt> operator,(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
operator -	CImg.h	/^    CImg<T> operator-() const {$/;"	f	struct:cimg_library::CImg
operator -	CImg.h	/^    CImg<Tfloat> operator-(const char *const expression) const {$/;"	f	struct:cimg_library::CImg
operator -	CImg.h	/^    CImg<_cimg_Tt> operator-(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
operator -	CImg.h	/^    CImg<_cimg_Tt> operator-(const t val) const {$/;"	f	struct:cimg_library::CImg
operator -	CImg.h	/^  inline CImg<_cimg_Tfloat> operator-(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library
operator --	CImg.h	/^    CImg<T> operator--(int) {$/;"	f	struct:cimg_library::CImg
operator --	CImg.h	/^    CImg<T>& operator--() {$/;"	f	struct:cimg_library::CImg
operator -=	CImg.h	/^    CImg<T>& operator-=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator -=	CImg.h	/^    CImg<T>& operator-=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator -=	CImg.h	/^    CImg<T>& operator-=(const t val) {$/;"	f	struct:cimg_library::CImg
operator /	CImg.h	/^    CImg<Tfloat> operator\/(const char *const expression) const {$/;"	f	struct:cimg_library::CImg
operator /	CImg.h	/^    CImg<_cimg_Tt> operator\/(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
operator /	CImg.h	/^    CImg<_cimg_Tt> operator\/(const t val) const {$/;"	f	struct:cimg_library::CImg
operator /	CImg.h	/^  inline CImg<_cimg_Tfloat> operator\/(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library
operator /=	CImg.h	/^    CImg<T>& operator\/=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator /=	CImg.h	/^    CImg<T>& operator\/=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator /=	CImg.h	/^    CImg<T>& operator\/=(const t val) {$/;"	f	struct:cimg_library::CImg
operator <	CImg.h	/^    CImgList<T> operator<(const char axis) const {$/;"	f	struct:cimg_library::CImg
operator <	CImg.h	/^    CImgList<T> operator<(const char axis) const {$/;"	f	struct:cimg_library::CImgList
operator <<	CImg.h	/^    CImg<T> operator<<(const t val) const {$/;"	f	struct:cimg_library::CImg
operator <<	object.h	/^inline std::ostream& operator<<(std::ostream& os, const ray& r)$/;"	f
operator <<	triangle.h	/^inline std::ostream& operator<<(std::ostream& os, const triangle& t)$/;"	f
operator <<=	CImg.h	/^    CImg<T>& operator<<=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator <<=	CImg.h	/^    CImg<T>& operator<<=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator <<=	CImg.h	/^    CImg<T>& operator<<=(const t val) {$/;"	f	struct:cimg_library::CImg
operator =	CImg.h	/^    CImg<T>& operator=(const CImg<T>& img) {$/;"	f	struct:cimg_library::CImg
operator =	CImg.h	/^    CImg<T>& operator=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator =	CImg.h	/^    CImg<T>& operator=(const CImgDisplay& disp) {$/;"	f	struct:cimg_library::CImg
operator =	CImg.h	/^    CImg<T>& operator=(const T val) {$/;"	f	struct:cimg_library::CImg
operator =	CImg.h	/^    CImg<T>& operator=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator =	CImg.h	/^    CImgDisplay& operator=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImgDisplay
operator =	CImg.h	/^    CImgDisplay& operator=(const CImgDisplay& disp) {$/;"	f	struct:cimg_library::CImgDisplay
operator =	CImg.h	/^    CImgDisplay& operator=(const CImgList<t>& list) {$/;"	f	struct:cimg_library::CImgDisplay
operator =	CImg.h	/^    CImgList<T>& operator=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImgList
operator =	CImg.h	/^    CImgList<T>& operator=(const CImgDisplay& disp) {$/;"	f	struct:cimg_library::CImgList
operator =	CImg.h	/^    CImgList<T>& operator=(const CImgList<T>& list) {$/;"	f	struct:cimg_library::CImgList
operator =	CImg.h	/^    CImgList<T>& operator=(const CImgList<t>& list) {$/;"	f	struct:cimg_library::CImgList
operator =	CImg.h	/^    CImgList<T>& operator=(const char *const filename) {$/;"	f	struct:cimg_library::CImgList
operator ==	CImg.h	/^    bool operator==(const CImg<t>& img) const {$/;"	f	struct:cimg_library::CImg
operator >	CImg.h	/^    CImg<T> operator>(const char axis) const {$/;"	f	struct:cimg_library::CImgList
operator >>	CImg.h	/^    CImg<T> operator>>(const t val) const {$/;"	f	struct:cimg_library::CImg
operator >>=	CImg.h	/^    CImg<T>& operator>>=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator >>=	CImg.h	/^    CImg<T>& operator>>=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator >>=	CImg.h	/^    CImg<T>& operator>>=(const t val) {$/;"	f	struct:cimg_library::CImg
operator CImg<T>*	CImg.h	/^    operator CImg<T>*() {$/;"	f	struct:cimg_library::CImgList
operator T*	CImg.h	/^    operator T*() {$/;"	f	struct:cimg_library::CImg
operator []	triangle.h	/^        const vector3& operator[](int idx) const    { return v[idx]; }$/;"	f	class:triangle
operator []	triangle.h	/^        vector3& operator[](int idx)                { return v[idx]; }$/;"	f	class:triangle
operator ^	CImg.h	/^    CImg<T> operator^(const t val) const {$/;"	f	struct:cimg_library::CImg
operator ^	CImg.h	/^  inline CImg<T> operator^(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library
operator ^=	CImg.h	/^    CImg<T>& operator^=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator ^=	CImg.h	/^    CImg<T>& operator^=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator ^=	CImg.h	/^    CImg<T>& operator^=(const t val) {$/;"	f	struct:cimg_library::CImg
operator bool	CImg.h	/^    operator bool() const {$/;"	f	struct:cimg_library::CImgDisplay
operator const CImg<T>*	CImg.h	/^    operator const CImg<T>*() const {$/;"	f	struct:cimg_library::CImgList
operator const T*	CImg.h	/^    operator const T*() const {$/;"	f	struct:cimg_library::CImg
operator |	CImg.h	/^    CImg<T> operator|(const t val) const {$/;"	f	struct:cimg_library::CImg
operator |	CImg.h	/^  inline CImg<T> operator|(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library
operator |=	CImg.h	/^    CImg<T>& operator|=(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
operator |=	CImg.h	/^    CImg<T>& operator|=(const char *const expression) {$/;"	f	struct:cimg_library::CImg
operator |=	CImg.h	/^    CImg<T>& operator|=(const t val) {$/;"	f	struct:cimg_library::CImg
operator ~	CImg.h	/^    CImg<T> operator~() const {$/;"	f	struct:cimg_library::CImg
option	CImg.h	/^    inline bool option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library::cimg
option	CImg.h	/^    inline char option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library::cimg
option	CImg.h	/^    inline const char* option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library::cimg
option	CImg.h	/^    inline double option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library::cimg
option	CImg.h	/^    inline float option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library::cimg
option	CImg.h	/^    inline int option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library::cimg
org	object.h	/^        vector3 org;$/;"	m	class:ray
original	CImg.h	/^      struct jpeg_error_mgr original;$/;"	m	struct:cimg_library::CImg::_cimg_error_mgr	typeref:struct:cimg_library::CImg::_cimg_error_mgr::jpeg_error_mgr
output	CImg.h	/^    inline std::FILE* output(std::FILE *file) {$/;"	f	namespace:cimg_library::cimg
overlap	bsp_tree.h	/^        std::vector<std::shared_ptr<const object>> overlap;$/;"	m	class:bsp_tree_node
pI	CImg.h	/^      CImg<floatT> *pI;$/;"	m	struct:cimg_library::CImg::_functor4d_streamline2d_oriented
pI	CImg.h	/^      CImg<floatT> *pI;$/;"	m	struct:cimg_library::CImg::_functor4d_streamline3d_oriented
paint	CImg.h	/^    CImgDisplay& paint() {$/;"	f	struct:cimg_library::CImgDisplay
paint	CImg.h	/^    CImgDisplay& paint(const bool wait_expose=true) {$/;"	f	struct:cimg_library::CImgDisplay
permute_axes	CImg.h	/^    CImg<T>& permute_axes(const char *const order) {$/;"	f	struct:cimg_library::CImg
pixel_type	CImg.h	/^    static const char* pixel_type() {$/;"	f	struct:cimg_library::CImg
pixel_type	CImg.h	/^    static const char* pixel_type() {$/;"	f	struct:cimg_library::CImgList
plane	bsp_tree.h	/^        plane_t plane;$/;"	m	class:bsp_tree_node
plane3d	CImg.h	/^    static CImg<floatT> plane3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library::CImg
plane_n	object.h	/^        vector3 plane_n; \/\/ BSP plane normal$/;"	m	class:sphere
plane_t	common.h	/^typedef quaternionf_p plane_t; \/\/ ax+by+cz+d=0 -> (a, b, c, d)$/;"	t
point3	common.h	/^typedef vector3 point3;$/;"	t
polygon	polyhedron.h	/^        void polygon(int i, int j, int k, int l = -1)$/;"	f	class:polyhedron
polyhedron	polyhedron.cpp	/^polyhedron<20>::polyhedron(const vector3& pos, float r)$/;"	f	class:polyhedron
polyhedron	polyhedron.cpp	/^polyhedron<6>::polyhedron(const vector3& pos, float r)$/;"	f	class:polyhedron
polyhedron	polyhedron.h	/^class polyhedron : public sphere$/;"	c
pop_back	CImg.h	/^    CImgList<T>& pop_back() {$/;"	f	struct:cimg_library::CImgList
pop_front	CImg.h	/^    CImgList<T>& pop_front() {$/;"	f	struct:cimg_library::CImgList
pos	object.h	/^        point3 pos; \/\/ 절대 그냥 접근하지 말 것!! 반드시 get_pos(time) 사용.$/;"	m	class:object
pow	CImg.h	/^    CImg<T>& pow(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
pow	CImg.h	/^    CImg<T>& pow(const char *const expression) {$/;"	f	struct:cimg_library::CImg
pow	CImg.h	/^    CImg<T>& pow(const double p) {$/;"	f	struct:cimg_library::CImg
prand	CImg.h	/^    inline unsigned int prand(const double z) {$/;"	f	namespace:cimg_library::cimg
print	CImg.h	/^    const CImg<T>& print(const char *const title=0, const bool display_stats=true) const {$/;"	f	struct:cimg_library::CImg
print	CImg.h	/^    const CImgList<T>& print(const char *const title=0, const bool display_stats=true) const {$/;"	f	struct:cimg_library::CImgList
process	ray_tracer.h	/^    void process(const scene& s, const ray& in_ray, float time, int depth = 0)$/;"	f	class:ray_tree_node
programfiles_path	CImg.h	/^    inline const char* programfiles_path(const char *const user_path=0, const bool reinit_path=false) {$/;"	f	namespace:cimg_library::cimg
projections2d	CImg.h	/^    CImg<T>& projections2d(const unsigned int x0, const unsigned int y0, const unsigned int z0) {$/;"	f	struct:cimg_library::CImg
pseudoinvert	CImg.h	/^    CImg<T>& pseudoinvert() {$/;"	f	struct:cimg_library::CImg
pseudoinvert	CImg.h	/^  inline CImg<_cimg_Tfloat> pseudoinvert(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
pt_to_tex_coord	object.cpp	/^vector2 sphere::pt_to_tex_coord(const point3& pt, bool bump) const$/;"	f	class:sphere
pt_to_tex_coord	object.h	/^        virtual vector2 pt_to_tex_coord(const point3& pt, bool bump = false) const { assert(false); return vector2(); }$/;"	f	class:object
pt_to_tex_coord	triangle.cpp	/^vector2 triangle::pt_to_tex_coord(const point3& pt, bool bump) const$/;"	f	class:triangle
push_back	CImg.h	/^    CImgList<T>& push_back(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImgList
push_back	CImg.h	/^    CImgList<T>& push_back(const CImgList<t>& list) {$/;"	f	struct:cimg_library::CImgList
push_front	CImg.h	/^    CImgList<T>& push_front(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImgList
push_front	CImg.h	/^    CImgList<T>& push_front(const CImgList<t>& list) {$/;"	f	struct:cimg_library::CImgList
quantize	CImg.h	/^    CImg<T>& quantize(const unsigned int nb_levels, const bool keep_range=true) {$/;"	f	struct:cimg_library::CImg
quaterniond_p	common.h	/^typedef cml::quaterniond_p quaterniond_p;$/;"	t
quaternionf_p	common.h	/^typedef cml::quaternionf_p quaternionf_p;$/;"	t
r	object.h	/^        float r; \/\/ radius$/;"	m	class:sphere
r	polyhedron.h	/^        float r; \/\/ radius$/;"	m	class:polyhedron
r	ray_tracer.h	/^    std::shared_ptr<ray_tree_node> r;$/;"	m	class:ray_tree_node
rand	CImg.h	/^    CImg<T>& rand(const T val_min, const T val_max) {$/;"	f	struct:cimg_library::CImg
rand	CImg.h	/^    inline double rand() {$/;"	f	namespace:cimg_library::cimg
ray	object.h	/^        ray(const point3& org, const vector3& dir = -Z, float refr_idx = REFR_AIR)$/;"	f	class:ray
ray	object.h	/^class ray$/;"	c
ray_tracer	ray_tracer.h	/^        ray_tracer() : image(IMG_WIDTH, std::vector<vector3>(IMG_HEIGHT)) {}$/;"	f	class:ray_tracer
ray_tracer	ray_tracer.h	/^class ray_tracer$/;"	c
ray_tree_node	ray_tracer.h	/^    ray_tree_node(const scene& s, const ray& in_ray, int depth = 0)$/;"	f	class:ray_tree_node
ray_tree_node	ray_tracer.h	/^class ray_tree_node$/;"	c
read_obj_file	obj_file.cpp	/^vector<shared_ptr<triangle>> read_obj_file(const string& fname)$/;"	f
ref	CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library::CImg::_functor2d_float
ref	CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library::CImg::_functor2d_int
ref	CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library::CImg::_functor3d_float
ref	CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library::CImg::_functor3d_int
ref	CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library::CImg::_functor4d_int
ref	CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library::CImg::_functor4d_streamline2d_directed
ref	CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library::CImg::_functor4d_streamline2d_oriented
ref	CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library::CImg::_functor4d_streamline3d_directed
ref	CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library::CImg::_functor4d_streamline3d_oriented
reference	CImg.h	/^      const CImg<T>& reference;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
reference_stats	CImg.h	/^      CImg<Tdouble> reference_stats;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
reflection	material.h	/^        float reflection;$/;"	m	class:material
reflection	ray_tracer.h	/^    float reflection;$/;"	m	class:ray_tree_node
refr_idx	object.h	/^        float refr_idx;$/;"	m	class:object
refr_idx	object.h	/^        float refr_idx;$/;"	m	class:ray
released_key	CImg.h	/^    unsigned int released_key(const unsigned int pos=0) const {$/;"	f	struct:cimg_library::CImgDisplay
remove	CImg.h	/^    CImgList<T>& remove() {$/;"	f	struct:cimg_library::CImgList
remove	CImg.h	/^    CImgList<T>& remove(const unsigned int pos) {$/;"	f	struct:cimg_library::CImgList
remove	CImg.h	/^    CImgList<T>& remove(const unsigned int pos1, const unsigned int pos2) {$/;"	f	struct:cimg_library::CImgList
render	CImg.h	/^    CImgDisplay& render(const CImg<T>& img) {$/;"	f	struct:cimg_library::CImgDisplay
render	CImg.h	/^    CImgDisplay& render(const CImg<T>& img, const bool flag8=false) {$/;"	f	struct:cimg_library::CImgDisplay
reshape	hw5.cpp	/^void reshape(int w, int h)$/;"	f
reshape	hw5_backup.cpp	/^void reshape(int w, int h)$/;"	f
resize	CImg.h	/^    CImg<T>& resize(const CImg<t>& src,$/;"	f	struct:cimg_library::CImg
resize	CImg.h	/^    CImg<T>& resize(const CImgDisplay& disp,$/;"	f	struct:cimg_library::CImg
resize	CImg.h	/^    CImg<T>& resize(const int size_x, const int size_y=-100,$/;"	f	struct:cimg_library::CImg
resize	CImg.h	/^    CImgDisplay& resize(const CImg<T>& img, const bool force_redraw=true) {$/;"	f	struct:cimg_library::CImgDisplay
resize	CImg.h	/^    CImgDisplay& resize(const CImgDisplay& disp, const bool force_redraw=true) {$/;"	f	struct:cimg_library::CImgDisplay
resize	CImg.h	/^    CImgDisplay& resize(const bool force_redraw=true) {$/;"	f	struct:cimg_library::CImgDisplay
resize	CImg.h	/^    CImgDisplay& resize(const int nwidth, const int nheight, const bool force_redraw=true) {$/;"	f	struct:cimg_library::CImgDisplay
resize	CImg.h	/^    CImgDisplay& resize(const int width, const int height, const bool force_redraw=true) {$/;"	f	struct:cimg_library::CImgDisplay
resize_doubleXY	CImg.h	/^    CImg<T>& resize_doubleXY() {$/;"	f	struct:cimg_library::CImg
resize_halfXY	CImg.h	/^    CImg<T>& resize_halfXY() {$/;"	f	struct:cimg_library::CImg
resize_object3d	CImg.h	/^    CImg<T> resize_object3d() {$/;"	f	struct:cimg_library::CImg
resize_object3d	CImg.h	/^    CImg<T>& resize_object3d(const float sx, const float sy=-100, const float sz=-100) {$/;"	f	struct:cimg_library::CImg
resize_tripleXY	CImg.h	/^    CImg<T>& resize_tripleXY() {$/;"	f	struct:cimg_library::CImg
resolutions	CImg.h	/^      XRRScreenSize *resolutions;$/;"	m	struct:cimg_library::cimg::X11_info
result	CImg.h	/^      unsigned int mempos, result;$/;"	m	struct:cimg_library::CImg::_cimg_math_parser
reverse	CImg.h	/^    CImgList<T>& reverse() {$/;"	f	struct:cimg_library::CImgList
reverse_object3d	CImg.h	/^    CImgList<T>& reverse_object3d() {$/;"	f	struct:cimg_library::CImgList
rol	CImg.h	/^    CImg<T>& rol(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
rol	CImg.h	/^    CImg<T>& rol(const char *const expression) {$/;"	f	struct:cimg_library::CImg
rol	CImg.h	/^    CImg<T>& rol(const unsigned int n=1) {$/;"	f	struct:cimg_library::CImg
rol	CImg.h	/^    inline T rol(const T a, const unsigned int n=1) {$/;"	f	namespace:cimg_library::cimg
rol	CImg.h	/^    inline double rol(const double a, const unsigned int n=1) {$/;"	f	namespace:cimg_library::cimg
rol	CImg.h	/^    inline float rol(const float a, const unsigned int n=1) {$/;"	f	namespace:cimg_library::cimg
root	bsp_tree.h	/^        std::shared_ptr<bsp_tree_node> root;$/;"	m	class:bsp_tree
root	octree.h	/^        octree_node root;$/;"	m	class:octree
ror	CImg.h	/^    CImg<T>& ror(const CImg<t>& img) {$/;"	f	struct:cimg_library::CImg
ror	CImg.h	/^    CImg<T>& ror(const char *const expression) {$/;"	f	struct:cimg_library::CImg
ror	CImg.h	/^    CImg<T>& ror(const unsigned int n=1) {$/;"	f	struct:cimg_library::CImg
ror	CImg.h	/^    inline T ror(const T a, const unsigned int n=1) {$/;"	f	namespace:cimg_library::cimg
ror	CImg.h	/^    inline double ror(const double a, const unsigned int n=1) {$/;"	f	namespace:cimg_library::cimg
ror	CImg.h	/^    inline float ror(const float a, const unsigned int n=1) {$/;"	f	namespace:cimg_library::cimg
rotate	CImg.h	/^    CImg<T>& rotate(const float angle, const float cx, const float cy, const float zoom,$/;"	f	struct:cimg_library::CImg
rotate	CImg.h	/^    CImg<T>& rotate(const float angle, const unsigned int border_conditions=0, const unsigned int interpolation=1) {$/;"	f	struct:cimg_library::CImg
rotation_matrix	CImg.h	/^    static CImg<T> rotation_matrix(const float x, const float y, const float z, const float w, const bool quaternion_data=false) {$/;"	f	struct:cimg_library::CImg
round	CImg.h	/^    CImg<T>& round(const double y=1, const int rounding_type=0) {$/;"	f	struct:cimg_library::CImg
round	CImg.h	/^    inline T round(const T x, const double y=1, const int rounding_type=0) {$/;"	f	namespace:cimg_library::cimg
rt	hw5.cpp	/^ray_tracer rt;$/;"	v
rt	hw5_backup.cpp	/^ray_tracer rt;$/;"	v
rt	octree.h	/^        point3 rt; \/\/ Right-top$/;"	m	class:octree_node
run	ray_tracer.cpp	/^void ray_tracer::run(int img_width, int img_height, scene& s)$/;"	f	class:ray_tracer
save	CImg.h	/^    const CImg<T>& save(const char *const filename, const int number=-1) const {$/;"	f	struct:cimg_library::CImg
save	CImg.h	/^    const CImgList<T>& save(const char *const filename, const int number=-1) const {$/;"	f	struct:cimg_library::CImgList
save_analyze	CImg.h	/^    const CImg<T>& save_analyze(const char *const filename, const float *const voxsize=0) const {$/;"	f	struct:cimg_library::CImg
save_ascii	CImg.h	/^    const CImg<T>& save_ascii(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_ascii	CImg.h	/^    const CImg<T>& save_ascii(std::FILE *const file) const {$/;"	f	struct:cimg_library::CImg
save_bmp	CImg.h	/^    const CImg<T>& save_bmp(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_bmp	CImg.h	/^    const CImg<T>& save_bmp(std::FILE *const file) const {$/;"	f	struct:cimg_library::CImg
save_cimg	CImg.h	/^    const CImg<T>& save_cimg(const char *const filename, const bool compression=false) const {$/;"	f	struct:cimg_library::CImg
save_cimg	CImg.h	/^    const CImg<T>& save_cimg(const char *const filename,$/;"	f	struct:cimg_library::CImg
save_cimg	CImg.h	/^    const CImg<T>& save_cimg(std::FILE *const file, const bool compression=false) const {$/;"	f	struct:cimg_library::CImg
save_cimg	CImg.h	/^    const CImg<T>& save_cimg(std::FILE *const file,$/;"	f	struct:cimg_library::CImg
save_cimg	CImg.h	/^    const CImgList<T>& save_cimg(const char *const filename, const bool compress=false) const {$/;"	f	struct:cimg_library::CImgList
save_cimg	CImg.h	/^    const CImgList<T>& save_cimg(const char *const filename,$/;"	f	struct:cimg_library::CImgList
save_cimg	CImg.h	/^    const CImgList<T>& save_cimg(std::FILE *const file,$/;"	f	struct:cimg_library::CImgList
save_cimg	CImg.h	/^    const CImgList<T>& save_cimg(std::FILE *file, const bool compress=false) const {$/;"	f	struct:cimg_library::CImgList
save_cpp	CImg.h	/^    const CImg<T>& save_cpp(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_cpp	CImg.h	/^    const CImg<T>& save_cpp(std::FILE *const file) const {$/;"	f	struct:cimg_library::CImg
save_dlm	CImg.h	/^    const CImg<T>& save_dlm(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_dlm	CImg.h	/^    const CImg<T>& save_dlm(std::FILE *const file) const {$/;"	f	struct:cimg_library::CImg
save_empty_cimg	CImg.h	/^    static void save_empty_cimg(const char *const filename,$/;"	f	struct:cimg_library::CImg
save_empty_cimg	CImg.h	/^    static void save_empty_cimg(const char *const filename,$/;"	f	struct:cimg_library::CImgList
save_empty_cimg	CImg.h	/^    static void save_empty_cimg(std::FILE *const file,$/;"	f	struct:cimg_library::CImg
save_empty_cimg	CImg.h	/^    static void save_empty_cimg(std::FILE *const file,$/;"	f	struct:cimg_library::CImgList
save_exr	CImg.h	/^    const CImg<T>& save_exr(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_ffmpeg	CImg.h	/^    const CImg<T>& save_ffmpeg(const char *const filename, const unsigned int first_frame=0, const unsigned int last_frame=~0U,$/;"	f	struct:cimg_library::CImg
save_ffmpeg	CImg.h	/^    const CImgList<T>& save_ffmpeg(const char *const filename, const unsigned int first_frame=0, const unsigned int last_frame=~0U,$/;"	f	struct:cimg_library::CImgList
save_ffmpeg_external	CImg.h	/^    const CImg<T>& save_ffmpeg_external(const char *const filename, const unsigned int first_frame=0, const unsigned int last_frame=~0U,$/;"	f	struct:cimg_library::CImg
save_ffmpeg_external	CImg.h	/^    const CImgList<T>& save_ffmpeg_external(const char *const filename, const unsigned int first_frame=0, const unsigned int last_frame=~0U,$/;"	f	struct:cimg_library::CImgList
save_graphicsmagick_external	CImg.h	/^    const CImg<T>& save_graphicsmagick_external(const char *const filename, const unsigned int quality=100) const {$/;"	f	struct:cimg_library::CImg
save_gzip_external	CImg.h	/^    const CImg<T>& save_gzip_external(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_gzip_external	CImg.h	/^    const CImgList<T>& save_gzip_external(const char *const filename) const {$/;"	f	struct:cimg_library::CImgList
save_imagemagick_external	CImg.h	/^    const CImg<T>& save_imagemagick_external(const char *const filename, const unsigned int quality=100) const {$/;"	f	struct:cimg_library::CImg
save_inr	CImg.h	/^    const CImg<T>& save_inr(const char *const filename, const float *const voxsize=0) const {$/;"	f	struct:cimg_library::CImg
save_inr	CImg.h	/^    const CImg<T>& save_inr(std::FILE *const file, const float *const voxsize=0) const {$/;"	f	struct:cimg_library::CImg
save_jpeg	CImg.h	/^    const CImg<T>& save_jpeg(const char *const filename, const unsigned int quality=100) const {$/;"	f	struct:cimg_library::CImg
save_jpeg	CImg.h	/^    const CImg<T>& save_jpeg(std::FILE *const file, const unsigned int quality=100) const {$/;"	f	struct:cimg_library::CImg
save_magick	CImg.h	/^    const CImg<T>& save_magick(const char *const filename, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library::CImg
save_medcon_external	CImg.h	/^    const CImg<T>& save_medcon_external(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_minc2	CImg.h	/^    const CImg<T>& save_minc2(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_off	CImg.h	/^    const CImg<T>& save_off(const char *const filename,$/;"	f	struct:cimg_library::CImg
save_off	CImg.h	/^    const CImg<T>& save_off(std::FILE *const file,$/;"	f	struct:cimg_library::CImg
save_other	CImg.h	/^    const CImg<T>& save_other(const char *const filename, const unsigned int quality=100) const {$/;"	f	struct:cimg_library::CImg
save_pandore	CImg.h	/^    const CImg<T>& save_pandore(const char *const filename, const unsigned int colorspace=0) const {$/;"	f	struct:cimg_library::CImg
save_pandore	CImg.h	/^    const CImg<T>& save_pandore(std::FILE *const file, const unsigned int colorspace=0) const {$/;"	f	struct:cimg_library::CImg
save_pfm	CImg.h	/^    const CImg<T>& save_pfm(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_pfm	CImg.h	/^    const CImg<T>& save_pfm(std::FILE *const file) const {$/;"	f	struct:cimg_library::CImg
save_png	CImg.h	/^    const CImg<T>& save_png(const char *const filename, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library::CImg
save_png	CImg.h	/^    const CImg<T>& save_png(std::FILE *const file, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library::CImg
save_pnk	CImg.h	/^    const CImg<T>& save_pnk(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_pnk	CImg.h	/^    const CImg<T>& save_pnk(std::FILE *const file) const {$/;"	f	struct:cimg_library::CImg
save_pnm	CImg.h	/^    const CImg<T>& save_pnm(const char *const filename, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library::CImg
save_pnm	CImg.h	/^    const CImg<T>& save_pnm(std::FILE *const file, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library::CImg
save_raw	CImg.h	/^    const CImg<T>& save_raw(const char *const filename, const bool multiplexed=false) const {$/;"	f	struct:cimg_library::CImg
save_raw	CImg.h	/^    const CImg<T>& save_raw(std::FILE *const file, const bool multiplexed=false) const {$/;"	f	struct:cimg_library::CImg
save_rgb	CImg.h	/^    const CImg<T>& save_rgb(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_rgb	CImg.h	/^    const CImg<T>& save_rgb(std::FILE *const file) const {$/;"	f	struct:cimg_library::CImg
save_rgba	CImg.h	/^    const CImg<T>& save_rgba(const char *const filename) const {$/;"	f	struct:cimg_library::CImg
save_rgba	CImg.h	/^    const CImg<T>& save_rgba(std::FILE *const file) const {$/;"	f	struct:cimg_library::CImg
save_tiff	CImg.h	/^    const CImg<T>& save_tiff(const char *const filename, const unsigned int compression=0) const {$/;"	f	struct:cimg_library::CImg
save_tiff	CImg.h	/^    const CImgList<T>& save_tiff(const char *const filename, const unsigned int compression=0) const {$/;"	f	struct:cimg_library::CImgList
save_yuv	CImg.h	/^    const CImg<T>& save_yuv(const char *const filename, const bool rgb2yuv=true) const {$/;"	f	struct:cimg_library::CImg
save_yuv	CImg.h	/^    const CImg<T>& save_yuv(std::FILE *const file, const bool rgb2yuv=true) const {$/;"	f	struct:cimg_library::CImg
save_yuv	CImg.h	/^    const CImgList<T>& save_yuv(const char *const filename=0, const bool rgb2yuv=true) const {$/;"	f	struct:cimg_library::CImgList
save_yuv	CImg.h	/^    const CImgList<T>& save_yuv(std::FILE *const file, const bool rgb2yuv=true) const {$/;"	f	struct:cimg_library::CImgList
scene	scene.cpp	/^    scene::scene(int scene_num)$/;"	f	class:scene
scene	scene.h	/^class scene$/;"	c
scene_aux_0	scene.cpp	/^void scene_aux_0(scene& s)$/;"	f
scene_aux_1	scene.cpp	/^void scene_aux_1(scene& s)$/;"	f
scene_aux_2	scene.cpp	/^void scene_aux_2(scene& s)$/;"	f
scene_aux_3	scene.cpp	/^void scene_aux_3(scene& s)$/;"	f
screen_height	CImg.h	/^    static int screen_height() {$/;"	f	struct:cimg_library::CImgDisplay
screen_width	CImg.h	/^    static int screen_width() {$/;"	f	struct:cimg_library::CImgDisplay
select	CImg.h	/^    CImg<T>& select(CImgDisplay &disp,$/;"	f	struct:cimg_library::CImg
select	CImg.h	/^    CImg<T>& select(const char *const title,$/;"	f	struct:cimg_library::CImg
sequence	CImg.h	/^    CImg<T>& sequence(const T a0, const T a1) {$/;"	f	struct:cimg_library::CImg
sequence	CImg.h	/^    static CImg<T> sequence(const unsigned int N, const T a0, const T a1) {$/;"	f	struct:cimg_library::CImg
set_button	CImg.h	/^    CImgDisplay& set_button() {$/;"	f	struct:cimg_library::CImgDisplay
set_button	CImg.h	/^    CImgDisplay& set_button(const unsigned int button, const bool is_pressed=true) {$/;"	f	struct:cimg_library::CImgDisplay
set_fullscreen	CImg.h	/^    CImgDisplay& set_fullscreen(const bool is_fullscreen, const bool force_redraw=true) {$/;"	f	struct:cimg_library::CImgDisplay
set_key	CImg.h	/^    CImgDisplay& set_key() {$/;"	f	struct:cimg_library::CImgDisplay
set_key	CImg.h	/^    CImgDisplay& set_key(const unsigned int keycode, const bool pressed=true) {$/;"	f	struct:cimg_library::CImgDisplay
set_linear_atXY	CImg.h	/^    CImg<T>& set_linear_atXY(const T& val, const float fx, const float fy=0, const int z=0, const int c=0,$/;"	f	struct:cimg_library::CImg
set_linear_atXYZ	CImg.h	/^    CImg<T>& set_linear_atXYZ(const T& val, const float fx, const float fy=0, const float fz=0, const int c=0,$/;"	f	struct:cimg_library::CImg
set_matrix_at	CImg.h	/^    CImg<T>& set_matrix_at(const CImg<t>& mat, const unsigned int x=0, const unsigned int y=0, const unsigned int z=0) {$/;"	f	struct:cimg_library::CImg
set_mouse	CImg.h	/^    CImgDisplay& set_mouse(const int pos_x, const int pos_y) {$/;"	f	struct:cimg_library::CImgDisplay
set_mouse	CImg.h	/^    CImgDisplay& set_mouse(const int posx, const int posy) {$/;"	f	struct:cimg_library::CImgDisplay
set_normal	triangle.h	/^        void set_normal(const vector3& n0, const vector3& n1, const vector3& n2)$/;"	f	class:triangle
set_pos	object.h	/^        virtual void set_pos(const point3& new_pos) { pos = new_pos; }$/;"	f	class:object
set_pos	polyhedron.h	/^        virtual void set_pos(const point3& new_pos) { pos = new_pos; make_polygon(); }$/;"	f	class:polyhedron
set_pos	triangle.h	/^        virtual void set_pos(const point3& new_pos)$/;"	f	class:triangle
set_tensor_at	CImg.h	/^    CImg<T>& set_tensor_at(const CImg<t>& ten, const unsigned int x=0, const unsigned int y=0, const unsigned int z=0) {$/;"	f	struct:cimg_library::CImg
set_title	CImg.h	/^    CImgDisplay& set_title(const char *const format, ...) {$/;"	f	struct:cimg_library::CImgDisplay
set_vector_at	CImg.h	/^    CImg<T>& set_vector_at(const CImg<t>& vec, const unsigned int x, const unsigned int y=0, const unsigned int z=0) {$/;"	f	struct:cimg_library::CImg
set_vertex	triangle.h	/^        void set_vertex(const vector3& v0, const vector3& v1, const vector3& v2)$/;"	f	class:triangle
set_wheel	CImg.h	/^    CImgDisplay& set_wheel() {$/;"	f	struct:cimg_library::CImgDisplay
set_wheel	CImg.h	/^    CImgDisplay& set_wheel(const int amplitude) {$/;"	f	struct:cimg_library::CImgDisplay
setjmp_buffer	CImg.h	/^      jmp_buf setjmp_buffer;$/;"	m	struct:cimg_library::CImg::_cimg_error_mgr
sharpen	CImg.h	/^    CImg<T>& sharpen(const float amplitude, const bool sharpen_type=false, const float edge=1, const float alpha=0, const float sigma=0) {$/;"	f	struct:cimg_library::CImg
shift	CImg.h	/^    CImg<T>& shift(const int deltax, const int deltay=0, const int deltaz=0, const int deltac=0,$/;"	f	struct:cimg_library::CImg
shift_object3d	CImg.h	/^    CImg<T>& shift_object3d() {$/;"	f	struct:cimg_library::CImg
shift_object3d	CImg.h	/^    CImg<T>& shift_object3d(const float tx, const float ty=0, const float tz=0) {$/;"	f	struct:cimg_library::CImg
shininess	material.h	/^        float shininess;$/;"	m	class:material
shortT	CImg.h	/^    typedef typename cimg::last<T,short>::type shortT;$/;"	t	struct:cimg_library::CImg
shortT	CImg.h	/^    typedef typename cimg::last<T,short>::type shortT;$/;"	t	struct:cimg_library::CImgList
show	CImg.h	/^    CImgDisplay& show() {$/;"	f	struct:cimg_library::CImgDisplay
show_mouse	CImg.h	/^    CImgDisplay& show_mouse() {$/;"	f	struct:cimg_library::CImgDisplay
side_len	object.h	/^        float side_len;$/;"	m	class:light
sign	CImg.h	/^    CImg<T>& sign() {$/;"	f	struct:cimg_library::CImg
sign	CImg.h	/^    inline T sign(const T x) {$/;"	f	namespace:cimg_library::cimg
sign	CImg.h	/^  inline CImg<_cimg_Tfloat> sign(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
sin	CImg.h	/^    CImg<T>& sin() {$/;"	f	struct:cimg_library::CImg
sin	CImg.h	/^  inline CImg<_cimg_Tfloat> sin(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
sinc	CImg.h	/^    CImg<T>& sinc() {$/;"	f	struct:cimg_library::CImg
sinc	CImg.h	/^    inline double sinc(const double x) {$/;"	f	namespace:cimg_library::cimg
sinc	CImg.h	/^  inline CImg<_cimg_Tfloat> sinc(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
sinh	CImg.h	/^    CImg<T>& sinh() {$/;"	f	struct:cimg_library::CImg
sinh	CImg.h	/^  inline CImg<_cimg_Tfloat> sinh(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
size	CImg.h	/^    unsigned int size() const {$/;"	f	struct:cimg_library::CImg
size	CImg.h	/^    unsigned int size() const {$/;"	f	struct:cimg_library::CImgList
sleep	CImg.h	/^    inline void sleep(const unsigned int milliseconds) {$/;"	f	namespace:cimg_library::cimg
slice	CImg.h	/^    CImg<T>& slice(const unsigned int z0) {$/;"	f	struct:cimg_library::CImg
slices	CImg.h	/^    CImg<T>& slices(const unsigned int z0, const unsigned int z1) {$/;"	f	struct:cimg_library::CImg
snapshot	CImg.h	/^    const CImgDisplay& snapshot(CImg<T>& img) const {$/;"	f	struct:cimg_library::CImgDisplay
solve	CImg.h	/^    CImg<T>& solve(const CImg<t>& A) {$/;"	f	struct:cimg_library::CImg
solve_tridiagonal	CImg.h	/^    CImg<T>& solve_tridiagonal(const CImg<t>& A) {$/;"	f	struct:cimg_library::CImg
sort	CImg.h	/^    CImg<T>& sort(CImg<t>& permutations, const bool increasing=true) {$/;"	f	struct:cimg_library::CImg
sort	CImg.h	/^    CImg<T>& sort(const bool increasing=true, const char axis=0) {$/;"	f	struct:cimg_library::CImg
spectrum	CImg.h	/^    int spectrum() const {$/;"	f	struct:cimg_library::CImg
specular	material.h	/^        vector3 specular;$/;"	m	class:material
specular	ray_tracer.h	/^    vector3 specular;$/;"	m	class:ray_tree_node
sphere	object.h	/^        sphere(const vector3& pos, float r) : object(pos), r(r), plane_n(-vector3().cardinal(0))$/;"	f	class:sphere
sphere	object.h	/^class sphere : public object$/;"	c
sphere3d	CImg.h	/^    static CImg<floatT> sphere3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library::CImg
split	CImg.h	/^    CImgList<T>& split(const char axis, const int nb=0) {$/;"	f	struct:cimg_library::CImgList
split	triangle.cpp	/^list<triangle> triangle::split() const$/;"	f	class:triangle
split_filename	CImg.h	/^    inline const char *split_filename(const char *const filename, char *const body=0) {$/;"	f	namespace:cimg_library::cimg
sqr	CImg.h	/^    CImg<T>& sqr() {$/;"	f	struct:cimg_library::CImg
sqr	CImg.h	/^    inline T sqr(const T val) {$/;"	f	namespace:cimg_library::cimg
sqr	CImg.h	/^  inline CImg<_cimg_Tfloat> sqr(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
sqrt	CImg.h	/^    CImg<T>& sqrt() {$/;"	f	struct:cimg_library::CImg
sqrt	CImg.h	/^  inline CImg<_cimg_Tfloat> sqrt(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
srand	CImg.h	/^    inline void srand() {$/;"	f	namespace:cimg_library::cimg
start	octree.cpp	/^intersect_info octree::start(ray eye_ray, float time) const$/;"	f	class:octree
stats	CImg.h	/^    CImg<T>& stats(const unsigned int variance_method=1) {$/;"	f	struct:cimg_library::CImg
strbuffersize	CImg.h	/^    inline const char *strbuffersize(const unsigned long size) {$/;"	f	namespace:cimg_library::cimg
strcasecmp	CImg.h	/^    inline int strcasecmp(const char *const s1, const char *const s2) {$/;"	f	namespace:cimg_library::cimg
streamline	CImg.h	/^    static CImg<floatT> streamline(const char *const expression,$/;"	f	struct:cimg_library::CImg
streamline	CImg.h	/^    static CImg<floatT> streamline(const tfunc& func,$/;"	f	struct:cimg_library::CImg
strescape	CImg.h	/^    inline void strescape(char *const s) {$/;"	f	namespace:cimg_library::cimg
string	CImg.h	/^      static const char* string() { static const char *const s = "bool"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "char"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "double"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "float"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "int"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "long"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "short"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "signed char"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "unsigned char"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "unsigned int"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "unsigned long"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() { static const char *const s = "unsigned short"; return s; }$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^      static const char* string() {$/;"	f	struct:cimg_library::cimg::type
string	CImg.h	/^    static CImg<T> string(const char *const str) {$/;"	f	struct:cimg_library::CImg
strncasecmp	CImg.h	/^    inline int strncasecmp(const char *const s1, const char *const s2, const int l) {$/;"	f	namespace:cimg_library::cimg
strpare	CImg.h	/^    inline bool strpare(char *const s, const char delimiter=' ', const bool symmetric=false, const bool is_iterative=false) {$/;"	f	namespace:cimg_library::cimg
structure_tensors	CImg.h	/^    CImg<T>& structure_tensors(const unsigned int scheme=2) {$/;"	f	struct:cimg_library::CImg
sum	CImg.h	/^    Tdouble sum() const {$/;"	f	struct:cimg_library::CImg
superset	CImg.h	/^    template<> struct superset<bool,char> { typedef char type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<bool,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<bool,float> { typedef float type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<bool,int> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<bool,long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<bool,short> { typedef short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<bool,signed char> { typedef signed char type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<bool,unsigned char> { typedef unsigned char type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<bool,unsigned int> { typedef unsigned int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<bool,unsigned long> { typedef unsigned long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<bool,unsigned short> { typedef unsigned short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<char,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<char,float> { typedef float type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<char,int> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<char,long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<char,short> { typedef short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<char,signed char> { typedef short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<char,unsigned char> { typedef short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<char,unsigned int> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<char,unsigned long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<char,unsigned short> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<float,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<int,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<int,float> { typedef float type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<int,long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<int,unsigned int> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<int,unsigned long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<long,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<long,float> { typedef float type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<short,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<short,float> { typedef float type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<short,int> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<short,long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<short,unsigned int> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<short,unsigned long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<short,unsigned short> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<signed char,char> { typedef short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<signed char,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<signed char,float> { typedef float type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<signed char,int> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<signed char,long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<signed char,short> { typedef short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<signed char,unsigned char> { typedef short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<signed char,unsigned int> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<signed char,unsigned long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<signed char,unsigned short> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned char,char> { typedef short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned char,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned char,float> { typedef float type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned char,int> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned char,long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned char,short> { typedef short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned char,signed char> { typedef short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned char,unsigned int> { typedef unsigned int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned char,unsigned long> { typedef unsigned long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned char,unsigned short> { typedef unsigned short type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned int,char> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned int,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned int,float> { typedef float type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned int,int> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned int,long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned int,short> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned int,signed char> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned int,unsigned long> { typedef unsigned long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned long,char> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned long,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned long,float> { typedef float type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned long,int> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned long,long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned long,short> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned long,signed char> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned short,char> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned short,double> { typedef double type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned short,float> { typedef float type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned short,int> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned short,long> { typedef long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned short,short> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned short,signed char> { typedef int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned short,unsigned int> { typedef unsigned int type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<> struct superset<unsigned short,unsigned long> { typedef unsigned long type; };$/;"	s	namespace:cimg_library::cimg
superset	CImg.h	/^    template<typename T, typename t> struct superset { typedef T type; };$/;"	s	namespace:cimg_library::cimg
superset2	CImg.h	/^    template<typename t1, typename t2, typename t3> struct superset2 {$/;"	s	namespace:cimg_library::cimg
superset3	CImg.h	/^    template<typename t1, typename t2, typename t3, typename t4> struct superset3 {$/;"	s	namespace:cimg_library::cimg
swap	CImg.h	/^    CImg<T>& swap(CImg<T>& img) {$/;"	f	struct:cimg_library::CImg
swap	CImg.h	/^    CImgList<T>& swap(CImgList<T>& list) {$/;"	f	struct:cimg_library::CImgList
swap	CImg.h	/^    inline void swap(T& a, T& b) { T t = a; a = b; b = t; }$/;"	f	namespace:cimg_library::cimg
swap	CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2) {$/;"	f	namespace:cimg_library::cimg
swap	CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3) {$/;"	f	namespace:cimg_library::cimg
swap	CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4) {$/;"	f	namespace:cimg_library::cimg
swap	CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4, T5& a5, T5& b5) {$/;"	f	namespace:cimg_library::cimg
swap	CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4, T5& a5, T5& b5, T6& a6, T6& b6) {$/;"	f	namespace:cimg_library::cimg
swap	CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4, T5& a5, T5& b5, T6& a6, T6& b6,$/;"	f	namespace:cimg_library::cimg
syev	CImg.h	/^    inline void syev(char &JOB, char &UPLO, int &N, T *lapA, T *lapW, T *WORK, int &LWORK, int &INFO) {$/;"	f	namespace:cimg_library::cimg
syev	CImg.h	/^    inline void syev(char &JOB, char &UPLO, int &N, float *lapA, float *lapW, float *WORK, int &LWORK, int &INFO) {$/;"	f	namespace:cimg_library::cimg
symmetric_eigen	CImg.h	/^    const CImg<T>& symmetric_eigen(CImg<t>& val, CImg<t>& vec) const {$/;"	f	struct:cimg_library::CImg
system	CImg.h	/^    inline int system(const char *const command, const char *const module_name=0) {$/;"	f	namespace:cimg_library::cimg
t	ray_tracer.h	/^    std::shared_ptr<ray_tree_node> t;$/;"	m	class:ray_tree_node
t	triangle.h	/^        vector3 t[3];   \/\/ texture coord$/;"	m	class:triangle
t_bold	CImg.h	/^    const char t_bold[] = { 0x1b, '[', '1', 'm', 0 };$/;"	m	namespace:cimg_library::cimg
t_green	CImg.h	/^    const char t_green[] = { 0x1b, '[', '0', ';', '3', '2', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library::cimg
t_normal	CImg.h	/^    const char t_normal[] = { 0x1b, '[', '0', ';', '0', ';', '0', 'm', 0 };$/;"	m	namespace:cimg_library::cimg
t_purple	CImg.h	/^    const char t_purple[] = { 0x1b, '[', '0', ';', '3', '5', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library::cimg
t_red	CImg.h	/^    const char t_red[] = { 0x1b, '[', '4', ';', '3', '1', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library::cimg
tan	CImg.h	/^    CImg<T>& tan() {$/;"	f	struct:cimg_library::CImg
tan	CImg.h	/^  inline CImg<_cimg_Tfloat> tan(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
tanh	CImg.h	/^    CImg<T>& tanh() {$/;"	f	struct:cimg_library::CImg
tanh	CImg.h	/^  inline CImg<_cimg_Tfloat> tanh(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
temporary	CImg.h	/^    inline T& temporary(const T&) {$/;"	f	namespace:cimg_library::cimg
temporary_path	CImg.h	/^    inline const char* temporary_path(const char *const user_path=0, const bool reinit_path=false) {$/;"	f	namespace:cimg_library::cimg
tensor	CImg.h	/^    CImg<T>& tensor() {$/;"	f	struct:cimg_library::CImg
tensor	CImg.h	/^    static CImg<T> tensor(const T& a1) {$/;"	f	struct:cimg_library::CImg
tensor	CImg.h	/^    static CImg<T> tensor(const T& a1, const T& a2, const T& a3) {$/;"	f	struct:cimg_library::CImg
tensor	CImg.h	/^    static CImg<T> tensor(const T& a1, const T& a2, const T& a3, const T& a4, const T& a5, const T& a6) {$/;"	f	struct:cimg_library::CImg
texture	material.h	/^        std::shared_ptr<CImg<float>> texture;$/;"	m	class:material
texture	object.h	/^        std::shared_ptr<CImg<float>> texture;$/;"	m	class:object
texturize_object3d	CImg.h	/^    const CImg<T>& texturize_object3d(CImgList<tp>& primitives, CImgList<tc>& colors,$/;"	f	struct:cimg_library::CImg
threshold	CImg.h	/^    CImg<T>& threshold(const T value, const bool soft_threshold=false, const bool strict_threshold=false) {$/;"	f	struct:cimg_library::CImg
tic	CImg.h	/^    inline unsigned long tic() {$/;"	f	namespace:cimg_library::cimg
tictoc	CImg.h	/^    inline unsigned long tictoc(const bool is_tic) {$/;"	f	namespace:cimg_library::cimg
time	CImg.h	/^    inline unsigned long time() {$/;"	f	namespace:cimg_library::cimg
time	object.h	/^        float time;$/;"	m	class:object
title	CImg.h	/^    const char *title() const {$/;"	f	struct:cimg_library::CImgDisplay
toc	CImg.h	/^    inline unsigned long toc() {$/;"	f	namespace:cimg_library::cimg
toggle_fullscreen	CImg.h	/^    CImgDisplay& toggle_fullscreen(const bool force_redraw=true) {$/;"	f	struct:cimg_library::CImgDisplay
torus3d	CImg.h	/^    static CImg<floatT> torus3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library::CImg
trace	CImg.h	/^    Tdouble trace() const {$/;"	f	struct:cimg_library::CImg
transparency	material.h	/^        float transparency;$/;"	m	class:material
transparency	ray_tracer.h	/^    float transparency;$/;"	m	class:ray_tree_node
transpose	CImg.h	/^    CImg<T>& transpose() {$/;"	f	struct:cimg_library::CImg
transpose	CImg.h	/^  inline CImg<T> transpose(const CImg<T>& instance) {$/;"	f	namespace:cimg_library
traverse	bsp_tree.cpp	/^intersect_info bsp_tree::traverse(const ray& eye_ray) const$/;"	f	class:bsp_tree
traverse	bsp_tree.cpp	/^intersect_info bsp_tree_node::traverse(const ray& eye_ray) const$/;"	f	class:bsp_tree_node
traverse_tree	ray_tracer.h	/^inline vector3 traverse_tree(std::shared_ptr<ray_tree_node> node, int depth = 0)$/;"	f
tree	scene.h	/^        bsp_tree tree;$/;"	m	class:scene
triangle	triangle.h	/^        triangle(const vector3& v0, const vector3& v1, const vector3& v2)$/;"	f	class:triangle
triangle	triangle.h	/^        triangle(const vector3& v0, const vector3& v1, const vector3& v2,$/;"	f	class:triangle
triangle	triangle.h	/^class triangle : public object$/;"	c
triangles	polyhedron.h	/^        std::vector<std::shared_ptr<triangle>> triangles;$/;"	m	class:polyhedron
type	CImg.h	/^      typedef typename superset<t1, typename superset2<t2,t3,t4>::type>::type type;$/;"	t	struct:cimg_library::cimg::superset3
type	CImg.h	/^      typedef typename superset<t1, typename superset<t2,t3>::type>::type type;$/;"	t	struct:cimg_library::cimg::superset2
type	CImg.h	/^    template<> struct superset<bool,char> { typedef char type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<bool,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<bool,float> { typedef float type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<bool,int> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<bool,long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<bool,short> { typedef short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<bool,signed char> { typedef signed char type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<bool,unsigned char> { typedef unsigned char type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<bool,unsigned int> { typedef unsigned int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<bool,unsigned long> { typedef unsigned long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<bool,unsigned short> { typedef unsigned short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<char,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<char,float> { typedef float type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<char,int> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<char,long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<char,short> { typedef short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<char,signed char> { typedef short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<char,unsigned char> { typedef short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<char,unsigned int> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<char,unsigned long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<char,unsigned short> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<float,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<int,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<int,float> { typedef float type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<int,long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<int,unsigned int> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<int,unsigned long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<long,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<long,float> { typedef float type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<short,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<short,float> { typedef float type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<short,int> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<short,long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<short,unsigned int> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<short,unsigned long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<short,unsigned short> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<signed char,char> { typedef short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<signed char,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<signed char,float> { typedef float type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<signed char,int> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<signed char,long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<signed char,short> { typedef short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<signed char,unsigned char> { typedef short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<signed char,unsigned int> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<signed char,unsigned long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<signed char,unsigned short> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned char,char> { typedef short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned char,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned char,float> { typedef float type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned char,int> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned char,long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned char,short> { typedef short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned char,signed char> { typedef short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned char,unsigned int> { typedef unsigned int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned char,unsigned long> { typedef unsigned long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned char,unsigned short> { typedef unsigned short type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned int,char> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned int,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned int,float> { typedef float type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned int,int> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned int,long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned int,short> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned int,signed char> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned int,unsigned long> { typedef unsigned long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned long,char> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned long,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned long,float> { typedef float type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned long,int> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned long,long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned long,short> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned long,signed char> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned short,char> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned short,double> { typedef double type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned short,float> { typedef float type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned short,int> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned short,long> { typedef long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned short,short> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned short,signed char> { typedef int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned short,unsigned int> { typedef unsigned int type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct superset<unsigned short,unsigned long> { typedef unsigned long type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<> struct type<bool> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<char> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<double> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<float> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<int> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<long> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<short> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<signed char> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<unsigned char> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<unsigned int> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<unsigned long> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<> struct type<unsigned short> {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<typename T, typename t> struct superset { typedef T type; };$/;"	t	struct:cimg_library::cimg::superset
type	CImg.h	/^    template<typename T> struct type {$/;"	s	namespace:cimg_library::cimg
type	CImg.h	/^    template<typename t1, typename t2> struct last { typedef t2 type; };$/;"	t	struct:cimg_library::cimg::last
ucharT	CImg.h	/^    typedef typename cimg::last<T,unsigned char>::type ucharT;$/;"	t	struct:cimg_library::CImg
ucharT	CImg.h	/^    typedef typename cimg::last<T,unsigned char>::type ucharT;$/;"	t	struct:cimg_library::CImgList
uint2float	CImg.h	/^    inline float uint2float(const unsigned int u) {$/;"	f	namespace:cimg_library::cimg
uintT	CImg.h	/^    typedef typename cimg::last<T,unsigned int>::type uintT;$/;"	t	struct:cimg_library::CImg
uintT	CImg.h	/^    typedef typename cimg::last<T,unsigned int>::type uintT;$/;"	t	struct:cimg_library::CImgList
ulongT	CImg.h	/^    typedef typename cimg::last<T,unsigned long>::type ulongT;$/;"	t	struct:cimg_library::CImg
ulongT	CImg.h	/^    typedef typename cimg::last<T,unsigned long>::type ulongT;$/;"	t	struct:cimg_library::CImgList
uncase	CImg.h	/^    inline char uncase(const char x) {$/;"	f	namespace:cimg_library::cimg
uncase	CImg.h	/^    inline void uncase(char *const string) {$/;"	f	namespace:cimg_library::cimg
unroll	CImg.h	/^    CImg<T>& unroll(const char axis) {$/;"	f	struct:cimg_library::CImg
unused	CImg.h	/^    inline void unused(const T&, ...) {}$/;"	f	namespace:cimg_library::cimg
ushortT	CImg.h	/^    typedef typename cimg::last<T,unsigned short>::type ushortT;$/;"	t	struct:cimg_library::CImg
ushortT	CImg.h	/^    typedef typename cimg::last<T,unsigned short>::type ushortT;$/;"	t	struct:cimg_library::CImgList
v	triangle.h	/^        vector3 v[3];   \/\/ 3 points of a triangle$/;"	m	class:triangle
value_string	CImg.h	/^    CImg<charT> value_string(const char separator=',', const unsigned int max_size=0) const {$/;"	f	struct:cimg_library::CImg
value_string	CImg.h	/^    CImg<charT> value_string(const char separator=',', const unsigned int max_size=0) const {$/;"	f	struct:cimg_library::CImgList
value_type	CImg.h	/^    typedef T value_type;$/;"	t	struct:cimg_library::CImg
value_type	CImg.h	/^    typedef T value_type;$/;"	t	struct:cimg_library::CImgList
variance	CImg.h	/^    Tdouble variance(const unsigned int variance_method=1) const {$/;"	f	struct:cimg_library::CImg
variance_mean	CImg.h	/^    Tdouble variance_mean(const unsigned int variance_method, t& mean) const {$/;"	f	struct:cimg_library::CImg
variance_noise	CImg.h	/^    Tdouble variance_noise(const unsigned int variance_method=1) const {$/;"	f	struct:cimg_library::CImg
vector	CImg.h	/^    CImg<T>& vector() {$/;"	f	struct:cimg_library::CImg
vector	CImg.h	/^    static CImg<T> vector(const T& a0) {$/;"	f	struct:cimg_library::CImg
vector	CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1) {$/;"	f	struct:cimg_library::CImg
vector	CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1, const T& a2) {$/;"	f	struct:cimg_library::CImg
vector	CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3) {$/;"	f	struct:cimg_library::CImg
vector	CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4) {$/;"	f	struct:cimg_library::CImg
vector	CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4, const T& a5) {$/;"	f	struct:cimg_library::CImg
vector	CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,$/;"	f	struct:cimg_library::CImg
vector2	common.h	/^typedef cml::vector2f vector2;$/;"	t
vector3	common.h	/^typedef cml::vector3f vector3;$/;"	t
vector3d	common.h	/^typedef cml::vector3d vector3d;$/;"	t
vector4	common.h	/^typedef cml::vector4f vector4;$/;"	t
vertices	polyhedron.h	/^        vector3 vertices[12]; \/* 12 vertices with x, y, z coordinates *\/$/;"	m	class:polyhedron
wait	CImg.h	/^    CImgDisplay& wait() {$/;"	f	struct:cimg_library::CImgDisplay
wait	CImg.h	/^    CImgDisplay& wait(const unsigned int milliseconds) {$/;"	f	struct:cimg_library::CImgDisplay
wait	CImg.h	/^    inline unsigned int wait(const unsigned int milliseconds) {$/;"	f	namespace:cimg_library::cimg
wait	CImg.h	/^    static void wait(CImgDisplay& disp1) {$/;"	f	struct:cimg_library::CImgDisplay
wait	CImg.h	/^    static void wait(CImgDisplay& disp1, CImgDisplay& disp2) {$/;"	f	struct:cimg_library::CImgDisplay
wait	CImg.h	/^    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3) {$/;"	f	struct:cimg_library::CImgDisplay
wait	CImg.h	/^    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4) {$/;"	f	struct:cimg_library::CImgDisplay
wait	CImg.h	/^    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4, CImgDisplay& disp5) {$/;"	f	struct:cimg_library::CImgDisplay
wait	CImg.h	/^    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4, CImgDisplay& disp5,$/;"	f	struct:cimg_library::CImgDisplay
wait_all	CImg.h	/^    static void wait_all() {$/;"	f	struct:cimg_library::CImgDisplay
wait_event	CImg.h	/^      HANDLE wait_event;$/;"	m	struct:cimg_library::cimg::Win32_info
warn	CImg.h	/^    inline void warn(const char *const format, ...) {$/;"	f	namespace:cimg_library::cimg
warp	CImg.h	/^    CImg<T>& warp(const CImg<t>& warp, const bool is_relative=false,$/;"	f	struct:cimg_library::CImg
watershed	CImg.h	/^    CImg<T>& watershed(const CImg<t>& priority, const bool fill_lines=true) {$/;"	f	struct:cimg_library::CImg
what	CImg.h	/^    const char *what() const throw() { return _message; }$/;"	f	struct:cimg_library::CImgException
wheel	CImg.h	/^    int wheel() const {$/;"	f	struct:cimg_library::CImgDisplay
width	CImg.h	/^    int width() const {$/;"	f	struct:cimg_library::CImg
width	CImg.h	/^    int width() const {$/;"	f	struct:cimg_library::CImgDisplay
width	CImg.h	/^    int width() const {$/;"	f	struct:cimg_library::CImgList
window_height	CImg.h	/^    int window_height() const {$/;"	f	struct:cimg_library::CImgDisplay
window_width	CImg.h	/^    int window_width() const {$/;"	f	struct:cimg_library::CImgDisplay
window_x	CImg.h	/^    int window_x() const {$/;"	f	struct:cimg_library::CImgDisplay
window_y	CImg.h	/^    int window_y() const {$/;"	f	struct:cimg_library::CImgDisplay
winformat_string	CImg.h	/^    inline void winformat_string(char *const s) {$/;"	f	namespace:cimg_library::cimg
wins	CImg.h	/^      CImgDisplay*     wins[1024];$/;"	m	struct:cimg_library::cimg::X11_info
xln	CImg.h	/^    inline int xln(const int x) {$/;"	f	namespace:cimg_library::cimg
xyYtoRGB	CImg.h	/^    CImg<T>& xyYtoRGB() {$/;"	f	struct:cimg_library::CImg
xyYtoXYZ	CImg.h	/^    CImg<T>& xyYtoXYZ() {$/;"	f	struct:cimg_library::CImg
~CImg	CImg.h	/^    ~CImg() {$/;"	f	struct:cimg_library::CImg
~CImgDisplay	CImg.h	/^    ~CImgDisplay() {$/;"	f	struct:cimg_library::CImgDisplay
~CImgList	CImg.h	/^    ~CImgList() {$/;"	f	struct:cimg_library::CImgList
~_functor2d_expr	CImg.h	/^      ~_functor2d_expr() { delete mp; }$/;"	f	struct:cimg_library::CImg::_functor2d_expr
~_functor3d_expr	CImg.h	/^      ~_functor3d_expr() { delete mp; }$/;"	f	struct:cimg_library::CImg::_functor3d_expr
~_functor4d_streamline2d_oriented	CImg.h	/^      ~_functor4d_streamline2d_oriented() { delete pI; }$/;"	f	struct:cimg_library::CImg::_functor4d_streamline2d_oriented
~_functor4d_streamline3d_oriented	CImg.h	/^      ~_functor4d_streamline3d_oriented() { delete pI; }$/;"	f	struct:cimg_library::CImg::_functor4d_streamline3d_oriented
~_functor4d_streamline_expr	CImg.h	/^      ~_functor4d_streamline_expr() { delete mp; }$/;"	f	struct:cimg_library::CImg::_functor4d_streamline_expr
~bsp_tree_node	bsp_tree.cpp	/^bsp_tree_node::~bsp_tree_node()$/;"	f	class:bsp_tree_node
~object	object.h	/^        virtual ~object() {}$/;"	f	class:object
~ray_tree_node	ray_tracer.h	/^    ~ray_tree_node()$/;"	f	class:ray_tree_node
